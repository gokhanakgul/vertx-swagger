package {{package}};

{{#imports}}import {{import}};
{{/imports}}

{{#rxInterface}}
import rx.Completable;
import rx.Single;
import io.vertx.rxjava.ext.auth.User;
{{/rxInterface}}
{{^rxInterface}}
import io.vertx.core.AsyncResult;
import io.vertx.core.Handler;
import io.vertx.ext.auth.User;
{{/rxInterface}}
import java.util.*;
import java.util.List;
import java.util.Map;
import io.vertx.core.AsyncResult;
import io.vertx.core.Future;
import io.vertx.core.Handler;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.jdbc.JDBCClient;
import io.vertx.ext.sql.ResultSet;
import io.vertx.ext.sql.SQLConnection;

import io.vertx.core.logging.Logger;
import io.vertx.core.logging.LoggerFactory;

public class {{classname}}Impl implements {{classname}} {

    private final static Logger LOGGER = LoggerFactory.getLogger({{classname}}Impl.class);

{{#jdbcPersistence}}
    private final static String SQLQUERY_CREATE_TABLE ="CREATE TABLE if not exists TABLE_NAME (Id integer identity primary key, Name varchar(255) unique, Content clob)";
    {{#operations}}{{#operation}}{{#vendorExtensions}}private final static String SQLQUERY_{{x-serviceIduC}} = "{{{x-serviceId-SQL}}}";
    {{/vendorExtensions}}{{/operation}}{{/operations}}

    {{>serviceJdbcImpl}}
{{/jdbcPersistence}}

{{#operations}}
{{#operation}}
    //{{#vendorExtensions}}{{x-serviceId}}{{/vendorExtensions}}
{{#rxInterface}}{{>RxMethodImpl}}{{/rxInterface}}{{^rxInterface}}{{>AsyncMethodImpl}}{{/rxInterface}}
{{/operation}}
{{/operations}}

}

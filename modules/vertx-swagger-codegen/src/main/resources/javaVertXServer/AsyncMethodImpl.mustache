    public void {{operationId}}({{#allParams}}{{{dataType}}} {{paramName}}, {{/allParams}}{{#hasAuthMethods}}User user, {{/hasAuthMethods}}Handler<AsyncResult<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Void{{/returnType}}>> handler){
        {{^jdbcPersistence}}
        throw new java.lang.UnsupportedOperationException("Not implemented, yet") ;
        {{/jdbcPersistence}}
        {{#jdbcPersistence}}
        _dbClient.getConnection(car -> {
            if (car.succeeded()) {
                SQLConnection connection = car.result();

                JsonArray data = new JsonArray(){{#allParams}}.add({{paramName}}){{/allParams}};

                connection.{{#vendorExtensions}}{{^x-isGet}}updateWithParams{{/x-isGet}}{{#x-isGet}}queryWithParams{{/x-isGet}}{{/vendorExtensions}}(SQLQUERY_{{#vendorExtensions}}{{x-serviceIduC}}{{/vendorExtensions}}, data,res -> {

                    connection.close();
                    if (res.succeeded()) {
                    {{#returnType}}
                        {{#returnContainer}}{{{returnType}}} response  = {{{defaultResponse}}} ;{{/returnContainer}}
                        {{^returnContainer}}{{{returnType}}} response = new {{{returnType}}}();{{/returnContainer}}
                    {{/returnType}}

                    {{#vendorExtensions}}
                    {{#x-isGet}}
                        {{#returnType}}
                        ResultSet resultSet = res.result();
                        if (resultSet.getNumRows() == 0) {
                            handler.handle(Future.failedFuture(new {{classname}}Exception(404, "Not Found")));

                        } else {
                            JsonArray row = resultSet.getResults().get(0);
                            {{^returnContainer}}
                            //TODO: Implement response object
                            {{#returnTypeIsPrimitive}}//response={{{returnType}}}.valueOf(row.getLong(0));{{/returnTypeIsPrimitive}}
                            {{^returnTypeIsPrimitive}}//response.setId(row.getLong(0));{{/returnTypeIsPrimitive}}
                            {{/returnContainer}}
                        }
                        {{/returnType}}
                    {{/x-isGet}}
                    {{/vendorExtensions}}

                        handler.handle(Future.succeededFuture({{#returnType}}response{{/returnType}}));
                    } else {
                        LOGGER.error("Database query error", res.cause());
                        handler.handle(Future.failedFuture(res.cause()));
                    }
                });
            } else {
                LOGGER.error("Database query error", car.cause());
                handler.handle(Future.failedFuture(car.cause()));

            }
        });
        {{/jdbcPersistence}}

    }
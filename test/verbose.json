

{
  "appVersion": "1.0.0",
  "generatorClass": "com.github.phiz71.vertx.swagger.codegen.JavaVertXServerGenerator",
  "supportJava6": false,
  "groupId": "io.swagger",
  "invokerPackage": "io.swagger.server.api",
  "apiFolder": "io/swagger/server/api/verticle",
  "developerEmail": "apiteam@swagger.io",
  "authMethods": [
    {
      "name": "api_key",
      "type": "apiKey",
      "hasMore": false,
      "isBasic": false,
      "isOAuth": false,
      "isApiKey": true,
      "keyParamName": "api_key",
      "isKeyInQuery": false,
      "isKeyInHeader": true,
      "isCode": false,
      "isPassword": false,
      "isApplication": false,
      "isImplicit": false
    },
    {
      "name": "petstore_auth",
      "type": "oauth2",
      "hasMore": true,
      "isBasic": false,
      "isOAuth": true,
      "isApiKey": false,
      "isKeyInQuery": false,
      "isKeyInHeader": false,
      "flow": "implicit",
      "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
      "scopes": [
        {
          "scope": "write:pets",
          "hasMore": "true",
          "description": "modify pets in your account"
        },
        {
          "scope": "read:pets",
          "hasMore": null,
          "description": "read your pets"
        }
      ],
      "isCode": false,
      "isPassword": false,
      "isApplication": false,
      "isImplicit": true
    }
  ],
  "jdbcPersistence": "true",
  "generateModelTests": true,
  "swagger": {
    "swagger": "2.0",
    "info": {
      "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
      "version": "1.0.0",
      "title": "Swagger Petstore",
      "termsOfService": "http://swagger.io/terms/",
      "contact": {
        "email": "apiteam@swagger.io"
      },
      "license": {
        "name": "Apache 2.0",
        "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
      }
    },
    "host": "petstore.swagger.io",
    "basePath": "/v2",
    "tags": [
      {
        "name": "pet",
        "description": "Everything about your Pets",
        "externalDocs": {
          "description": "Find out more",
          "url": "http://swagger.io"
        }
      },
      {
        "name": "store",
        "description": "Access to Petstore orders"
      },
      {
        "name": "user",
        "description": "Operations about user",
        "externalDocs": {
          "description": "Find out more about our store",
          "url": "http://swagger.io"
        }
      }
    ],
    "schemes": [
      "http"
    ],
    "paths": {
      "/uuid/{uuidParam}": {
        "get": {
          "tags": [
            "user"
          ],
          "summary": "test uuid",
          "operationId": "uuid",
          "parameters": [
            {
              "name": "uuidParam",
              "in": "path",
              "required": true,
              "type": "string",
              "format": "uuid",
              "X-isUUID": true
            }
          ],
          "responses": {
            "default": {
              "description": "OK",
              "schema": {
                "$ref": "#/definitions/inline_response_default"
              }
            }
          },
          "x-contentType": "application/json",
          "x-accepts": "application/json",
          "x-serviceId": "uuid",
          "x-serviceIduC": "UUID",
          "x-serviceId-varName": "UUID_SERVICE_ID",
          "x-serviceId-SQL": "SELECT * FROM TABLE_NAME WHERE uuidParam = ?",
          "x-serviceId-Query-Method": "queryWithParams"
        }
      },
      "/pet": {
        "post": {
          "tags": [
            "pet"
          ],
          "summary": "Add a new pet to the store",
          "description": "",
          "operationId": "addPet",
          "consumes": [
            "application/json",
            "application/xml"
          ],
          "produces": [
            "application/xml",
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Pet object that needs to be added to the store",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Pet"
              }
            }
          ],
          "responses": {
            "405": {
              "description": "Invalid input"
            }
          },
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ],
          "x-contentType": "application/json",
          "x-accepts": "application/json",
          "x-serviceId": "addPet",
          "x-serviceIduC": "ADDPET",
          "x-serviceId-varName": "ADDPET_SERVICE_ID",
          "x-serviceId-SQL": "INSERT INTO TABLE_NAME",
          "x-serviceId-Query-Method": "updateWithParams"
        },
        "put": {
          "tags": [
            "pet"
          ],
          "summary": "Update an existing pet",
          "description": "",
          "operationId": "updatePet",
          "consumes": [
            "application/json",
            "application/xml"
          ],
          "produces": [
            "application/xml",
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Pet object that needs to be added to the store",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Pet"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Pet not found"
            },
            "405": {
              "description": "Validation exception"
            }
          },
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ],
          "x-contentType": "application/json",
          "x-accepts": "application/json",
          "x-serviceId": "updatePet",
          "x-serviceIduC": "UPDATEPET",
          "x-serviceId-varName": "UPDATEPET_SERVICE_ID",
          "x-serviceId-SQL": "UPDATE TABLE_NAME SET ",
          "x-serviceId-Query-Method": "updateWithParams"
        }
      },
      "/pet/findByStatus": {
        "get": {
          "tags": [
            "pet"
          ],
          "summary": "Finds Pets by status",
          "description": "Multiple status values can be provided with comma separated strings",
          "operationId": "findPetsByStatus",
          "produces": [
            "application/xml",
            "application/json"
          ],
          "parameters": [
            {
              "name": "status",
              "in": "query",
              "description": "Status values that need to be considered for filter",
              "required": true,
              "type": "array",
              "items": {
                "type": "string",
                "default": "available",
                "enum": [
                  "available",
                  "pending",
                  "sold"
                ]
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Pet"
                }
              }
            },
            "400": {
              "description": "Invalid status value"
            }
          },
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ],
          "x-contentType": "application/json",
          "x-accepts": "application/json",
          "x-serviceId": "findPetsByStatus",
          "x-serviceIduC": "FINDPETSBYSTATUS",
          "x-serviceId-varName": "FINDPETSBYSTATUS_SERVICE_ID",
          "x-serviceId-SQL": "SELECT * FROM TABLE_NAME WHERE status = ?",
          "x-serviceId-Query-Method": "queryWithParams"
        }
      },
      "/pet/findByTags": {
        "get": {
          "tags": [
            "pet"
          ],
          "summary": "Finds Pets by tags",
          "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
          "operationId": "findPetsByTags",
          "produces": [
            "application/xml",
            "application/json"
          ],
          "parameters": [
            {
              "name": "tags",
              "in": "query",
              "description": "Tags to filter by",
              "required": true,
              "type": "array",
              "items": {
                "type": "string"
              },
              "collectionFormat": "multi"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Pet"
                }
              }
            },
            "400": {
              "description": "Invalid tag value"
            }
          },
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ],
          "deprecated": true,
          "x-contentType": "application/json",
          "x-accepts": "application/json",
          "x-serviceId": "findPetsByTags",
          "x-serviceIduC": "FINDPETSBYTAGS",
          "x-serviceId-varName": "FINDPETSBYTAGS_SERVICE_ID",
          "x-serviceId-SQL": "SELECT * FROM TABLE_NAME WHERE tags = ?",
          "x-serviceId-Query-Method": "queryWithParams"
        }
      },
      "/pet/{petId}": {
        "get": {
          "tags": [
            "pet"
          ],
          "summary": "Find pet by ID",
          "description": "Returns a single pet",
          "operationId": "getPetById",
          "produces": [
            "application/xml",
            "application/json"
          ],
          "parameters": [
            {
              "name": "petId",
              "in": "path",
              "description": "ID of pet to return",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/Pet"
              }
            },
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Pet not found"
            }
          },
          "security": [
            {
              "api_key": []
            }
          ],
          "x-contentType": "application/json",
          "x-accepts": "application/json",
          "x-serviceId": "getPetById",
          "x-serviceIduC": "GETPETBYID",
          "x-serviceId-varName": "GETPETBYID_SERVICE_ID",
          "x-serviceId-SQL": "SELECT * FROM TABLE_NAME WHERE petId = ?",
          "x-serviceId-Query-Method": "queryWithParams"
        },
        "post": {
          "tags": [
            "pet"
          ],
          "summary": "Updates a pet in the store with form data",
          "description": "",
          "operationId": "updatePetWithForm",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/xml",
            "application/json"
          ],
          "parameters": [
            {
              "name": "petId",
              "in": "path",
              "description": "ID of pet that needs to be updated",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "name": "name",
              "in": "formData",
              "description": "Updated name of the pet",
              "required": false,
              "type": "string"
            },
            {
              "name": "status",
              "in": "formData",
              "description": "Updated status of the pet",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "405": {
              "description": "Invalid input"
            }
          },
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ],
          "x-contentType": "application/x-www-form-urlencoded",
          "x-accepts": "application/json",
          "x-serviceId": "updatePetWithForm",
          "x-serviceIduC": "UPDATEPETWITHFORM",
          "x-serviceId-varName": "UPDATEPETWITHFORM_SERVICE_ID",
          "x-serviceId-SQL": "INSERT INTO TABLE_NAME WHERE petId = ?",
          "x-serviceId-Query-Method": "updateWithParams"
        },
        "delete": {
          "tags": [
            "pet"
          ],
          "summary": "Deletes a pet",
          "description": "",
          "operationId": "deletePet",
          "produces": [
            "application/xml",
            "application/json"
          ],
          "parameters": [
            {
              "name": "api_key",
              "in": "header",
              "required": false,
              "type": "string"
            },
            {
              "name": "petId",
              "in": "path",
              "description": "Pet id to delete",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Pet not found"
            }
          },
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ],
          "x-contentType": "application/json",
          "x-accepts": "application/json",
          "x-serviceId": "deletePet",
          "x-serviceIduC": "DELETEPET",
          "x-serviceId-varName": "DELETEPET_SERVICE_ID",
          "x-serviceId-SQL": "DELETE FROM TABLE_NAME WHERE petId = ?",
          "x-serviceId-Query-Method": "updateWithParams"
        }
      },
      "/pet/{petId}/uploadImage": {
        "post": {
          "tags": [
            "pet"
          ],
          "summary": "uploads an image",
          "description": "",
          "operationId": "uploadFile",
          "consumes": [
            "multipart/form-data"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "petId",
              "in": "path",
              "description": "ID of pet to update",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "name": "additionalMetadata",
              "in": "formData",
              "description": "Additional data to pass to server",
              "required": false,
              "type": "string"
            },
            {
              "name": "file",
              "in": "formData",
              "description": "file to upload",
              "required": false,
              "type": "file"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/ApiResponse"
              }
            }
          },
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ],
          "x-contentType": "multipart/form-data",
          "x-accepts": "application/json",
          "x-serviceId": "uploadFile",
          "x-serviceIduC": "UPLOADFILE",
          "x-serviceId-varName": "UPLOADFILE_SERVICE_ID",
          "x-serviceId-SQL": "INSERT INTO TABLE_NAME WHERE petId = ?",
          "x-serviceId-Query-Method": "updateWithParams"
        }
      },
      "/store/inventory": {
        "get": {
          "tags": [
            "store"
          ],
          "summary": "Returns pet inventories by status",
          "description": "Returns a map of status codes to quantities",
          "operationId": "getInventory",
          "produces": [
            "application/json"
          ],
          "parameters": [],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "security": [
            {
              "api_key": []
            }
          ],
          "x-contentType": "application/json",
          "x-accepts": "application/json",
          "x-serviceId": "getInventory",
          "x-serviceIduC": "GETINVENTORY",
          "x-serviceId-varName": "GETINVENTORY_SERVICE_ID",
          "x-serviceId-SQL": "SELECT * FROM TABLE_NAME",
          "x-serviceId-Query-Method": "queryWithParams"
        }
      },
      "/store/order": {
        "post": {
          "tags": [
            "store"
          ],
          "summary": "Place an order for a pet",
          "description": "",
          "operationId": "placeOrder",
          "produces": [
            "application/xml",
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "order placed for purchasing the pet",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Order"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/Order"
              }
            },
            "400": {
              "description": "Invalid Order"
            }
          },
          "x-contentType": "application/json",
          "x-accepts": "application/json",
          "x-serviceId": "placeOrder",
          "x-serviceIduC": "PLACEORDER",
          "x-serviceId-varName": "PLACEORDER_SERVICE_ID",
          "x-serviceId-SQL": "INSERT INTO TABLE_NAME",
          "x-serviceId-Query-Method": "updateWithParams"
        }
      },
      "/store/order/{orderId}": {
        "get": {
          "tags": [
            "store"
          ],
          "summary": "Find purchase order by ID",
          "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
          "operationId": "getOrderById",
          "produces": [
            "application/xml",
            "application/json"
          ],
          "parameters": [
            {
              "name": "OrderId",
              "in": "path",
              "description": "ID of pet that needs to be fetched",
              "required": true,
              "type": "integer",
              "maximum": 10.0,
              "minimum": 1.0,
              "format": "int64"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/Order"
              }
            },
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Order not found"
            }
          },
          "x-contentType": "application/json",
          "x-accepts": "application/json",
          "x-serviceId": "getOrderById",
          "x-serviceIduC": "GETORDERBYID",
          "x-serviceId-varName": "GETORDERBYID_SERVICE_ID",
          "x-serviceId-SQL": "SELECT * FROM TABLE_NAME WHERE OrderId = ?",
          "x-serviceId-Query-Method": "queryWithParams"
        },
        "delete": {
          "tags": [
            "store"
          ],
          "summary": "Delete purchase order by ID",
          "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
          "operationId": "deleteOrder",
          "produces": [
            "application/xml",
            "application/json"
          ],
          "parameters": [
            {
              "name": "orderId",
              "in": "path",
              "description": "ID of the order that needs to be deleted",
              "required": true,
              "type": "integer",
              "minimum": 1.0,
              "format": "int64"
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Order not found"
            }
          },
          "x-contentType": "application/json",
          "x-accepts": "application/json",
          "x-serviceId": "deleteOrder",
          "x-serviceIduC": "DELETEORDER",
          "x-serviceId-varName": "DELETEORDER_SERVICE_ID",
          "x-serviceId-SQL": "DELETE FROM TABLE_NAME WHERE orderId = ?",
          "x-serviceId-Query-Method": "updateWithParams"
        }
      },
      "/user": {
        "post": {
          "tags": [
            "user"
          ],
          "summary": "Create user",
          "description": "This can only be done by the logged in user.",
          "operationId": "createUser",
          "produces": [
            "application/xml",
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "Created user object",
              "required": true,
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          ],
          "responses": {
            "default": {
              "description": "successful operation"
            }
          },
          "x-contentType": "application/json",
          "x-accepts": "application/json",
          "x-serviceId": "createUser",
          "x-serviceIduC": "CREATEUSER",
          "x-serviceId-varName": "CREATEUSER_SERVICE_ID",
          "x-serviceId-SQL": "INSERT INTO TABLE_NAME",
          "x-serviceId-Query-Method": "updateWithParams"
        }
      },
      "/user/createWithArray": {
        "post": {
          "tags": [
            "user"
          ],
          "summary": "Creates list of users with given input array",
          "description": "",
          "operationId": "createUsersWithArrayInput",
          "produces": [
            "application/xml",
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "List of user object",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/User"
                }
              }
            }
          ],
          "responses": {
            "default": {
              "description": "successful operation"
            }
          },
          "x-contentType": "application/json",
          "x-accepts": "application/json",
          "x-serviceId": "createUsersWithArrayInput",
          "x-serviceIduC": "CREATEUSERSWITHARRAYINPUT",
          "x-serviceId-varName": "CREATEUSERSWITHARRAYINPUT_SERVICE_ID",
          "x-serviceId-SQL": "INSERT INTO TABLE_NAME",
          "x-serviceId-Query-Method": "updateWithParams"
        }
      },
      "/user/createWithList": {
        "post": {
          "tags": [
            "user"
          ],
          "summary": "Creates list of users with given input array",
          "description": "",
          "operationId": "createUsersWithListInput",
          "produces": [
            "application/xml",
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "description": "List of user object",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/User"
                }
              }
            }
          ],
          "responses": {
            "default": {
              "description": "successful operation"
            }
          },
          "x-contentType": "application/json",
          "x-accepts": "application/json",
          "x-serviceId": "createUsersWithListInput",
          "x-serviceIduC": "CREATEUSERSWITHLISTINPUT",
          "x-serviceId-varName": "CREATEUSERSWITHLISTINPUT_SERVICE_ID",
          "x-serviceId-SQL": "INSERT INTO TABLE_NAME",
          "x-serviceId-Query-Method": "updateWithParams"
        }
      },
      "/user/login": {
        "get": {
          "tags": [
            "user"
          ],
          "summary": "Logs user into the system",
          "description": "",
          "operationId": "loginUser",
          "produces": [
            "application/xml",
            "application/json"
          ],
          "parameters": [
            {
              "name": "username",
              "in": "query",
              "description": "The user name for login",
              "required": true,
              "type": "string"
            },
            {
              "name": "password",
              "in": "query",
              "description": "The password for login in clear text",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "type": "string"
              },
              "headers": {
                "X-Rate-Limit": {
                  "type": "integer",
                  "format": "int32",
                  "description": "calls per hour allowed by the user"
                },
                "X-Expires-After": {
                  "type": "string",
                  "format": "date-time",
                  "description": "date in UTC when token expires"
                }
              }
            },
            "400": {
              "description": "Invalid username/password supplied"
            }
          },
          "x-contentType": "application/json",
          "x-accepts": "application/json",
          "x-serviceId": "loginUser",
          "x-serviceIduC": "LOGINUSER",
          "x-serviceId-varName": "LOGINUSER_SERVICE_ID",
          "x-serviceId-SQL": "SELECT * FROM TABLE_NAME WHERE username = ? AND password = ?",
          "x-serviceId-Query-Method": "queryWithParams"
        }
      },
      "/user/logout": {
        "get": {
          "tags": [
            "user"
          ],
          "summary": "Logs out current logged in user session",
          "description": "",
          "operationId": "logoutUser",
          "produces": [
            "application/xml",
            "application/json"
          ],
          "parameters": [],
          "responses": {
            "default": {
              "description": "successful operation"
            }
          },
          "x-contentType": "application/json",
          "x-accepts": "application/json",
          "x-serviceId": "logoutUser",
          "x-serviceIduC": "LOGOUTUSER",
          "x-serviceId-varName": "LOGOUTUSER_SERVICE_ID",
          "x-serviceId-SQL": "SELECT * FROM TABLE_NAME",
          "x-serviceId-Query-Method": "queryWithParams"
        }
      },
      "/user/{username}": {
        "get": {
          "tags": [
            "user"
          ],
          "summary": "Get user by user name",
          "description": "",
          "operationId": "getUserByName",
          "produces": [
            "application/xml",
            "application/json"
          ],
          "parameters": [
            {
              "name": "username",
              "in": "path",
              "description": "The name that needs to be fetched. Use user1 for testing. ",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/User"
              }
            },
            "400": {
              "description": "Invalid username supplied"
            },
            "404": {
              "description": "User not found"
            }
          },
          "x-contentType": "application/json",
          "x-accepts": "application/json",
          "x-serviceId": "getUserByName",
          "x-serviceIduC": "GETUSERBYNAME",
          "x-serviceId-varName": "GETUSERBYNAME_SERVICE_ID",
          "x-serviceId-SQL": "SELECT * FROM TABLE_NAME WHERE username = ?",
          "x-serviceId-Query-Method": "queryWithParams"
        },
        "put": {
          "tags": [
            "user"
          ],
          "summary": "Updated user",
          "description": "This can only be done by the logged in user.",
          "operationId": "updateUser",
          "produces": [
            "application/xml",
            "application/json"
          ],
          "parameters": [
            {
              "name": "username",
              "in": "path",
              "description": "name that need to be updated",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Updated user object",
              "required": true,
              "schema": {
                "$ref": "#/definitions/User"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid user supplied"
            },
            "404": {
              "description": "User not found"
            }
          },
          "x-contentType": "application/json",
          "x-accepts": "application/json",
          "x-serviceId": "updateUser",
          "x-serviceIduC": "UPDATEUSER",
          "x-serviceId-varName": "UPDATEUSER_SERVICE_ID",
          "x-serviceId-SQL": "UPDATE TABLE_NAME SET  WHERE username = ?",
          "x-serviceId-Query-Method": "updateWithParams"
        },
        "delete": {
          "tags": [
            "user"
          ],
          "summary": "Delete user",
          "description": "This can only be done by the logged in user.",
          "operationId": "deleteUser",
          "produces": [
            "application/xml",
            "application/json"
          ],
          "parameters": [
            {
              "name": "username",
              "in": "path",
              "description": "The name that needs to be deleted",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid username supplied"
            },
            "404": {
              "description": "User not found"
            }
          },
          "x-contentType": "application/json",
          "x-accepts": "application/json",
          "x-serviceId": "deleteUser",
          "x-serviceIduC": "DELETEUSER",
          "x-serviceId-varName": "DELETEUSER_SERVICE_ID",
          "x-serviceId-SQL": "DELETE FROM TABLE_NAME WHERE username = ?",
          "x-serviceId-Query-Method": "updateWithParams"
        }
      }
    },
    "securityDefinitions": {
      "petstore_auth": {
        "type": "oauth2",
        "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
        "flow": "implicit",
        "scopes": {
          "write:pets": "modify pets in your account",
          "read:pets": "read your pets"
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    },
    "definitions": {
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "petId": {
            "type": "integer",
            "format": "int64"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "shipDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Order Status",
            "enum": [
              "placed",
              "approved",
              "delivered"
            ]
          },
          "complete": {
            "type": "boolean",
            "default": false
          }
        },
        "xml": {
          "name": "Order"
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "description": "some description",
        "xml": {
          "name": "Category"
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "userStatus": {
            "type": "integer",
            "format": "int32",
            "description": "User Status"
          }
        },
        "xml": {
          "name": "User"
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Tag"
        }
      },
      "Pet": {
        "type": "object",
        "required": [
          "name",
          "photoUrls"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "category": {
            "$ref": "#/definitions/Category"
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "photoUrls": {
            "type": "array",
            "xml": {
              "name": "photoUrl",
              "wrapped": true
            },
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "xml": {
              "name": "tag",
              "wrapped": true
            },
            "items": {
              "$ref": "#/definitions/Tag"
            }
          },
          "status": {
            "type": "string",
            "description": "pet status in the store",
            "enum": [
              "available",
              "pending",
              "sold"
            ]
          }
        },
        "xml": {
          "name": "Pet"
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "inline_response_default": {
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          }
        }
      }
    },
    "externalDocs": {
      "description": "Find out more about Swagger",
      "url": "http://swagger.io"
    }
  },
  "generateApiTests": true,
  "serializableModel": false,
  "infoUrl": null,
  "inputSpec": "petStore.json",
  "host": "petstore.swagger.io",
  "artifactUrl": "https://github.com/swagger-api/swagger-codegen",
  "developerOrganization": "Swagger",
  "models": [
    {
      "importPath": "io.swagger.server.api.model.Category",
      "model": {
        "name": "Category",
        "classname": "Category",
        "description": "some description",
        "classVarName": "category",
        "modelJson": "{\n  \"type\" : \"object\",\n  \"properties\" : {\n    \"id\" : {\n      \"type\" : \"integer\",\n      \"format\" : \"int64\"\n    },\n    \"name\" : {\n      \"type\" : \"string\"\n    }\n  },\n  \"description\" : \"some description\",\n  \"xml\" : {\n    \"name\" : \"Category\"\n  }\n}",
        "dataType": "Object",
        "classFilename": "Category",
        "unescapedDescription": "some description",
        "vars": [
          {
            "baseName": "id",
            "getter": "getId",
            "setter": "setId",
            "datatype": "Long",
            "datatypeWithEnum": "Long",
            "dataFormat": "int64",
            "name": "id",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.id;",
            "baseType": "Long",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int64\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": true,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Id"
          },
          {
            "baseName": "name",
            "getter": "getName",
            "setter": "setName",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "name",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.name;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": false,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": false,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Name"
          }
        ],
        "requiredVars": [],
        "optionalVars": [
          {
            "baseName": "id",
            "getter": "getId",
            "setter": "setId",
            "datatype": "Long",
            "datatypeWithEnum": "Long",
            "dataFormat": "int64",
            "name": "id",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.id;",
            "baseType": "Long",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int64\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": true,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Id"
          },
          {
            "baseName": "name",
            "getter": "getName",
            "setter": "setName",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "name",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.name;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": false,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": false,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Name"
          }
        ],
        "readOnlyVars": [],
        "readWriteVars": [
          {
            "baseName": "id",
            "getter": "getId",
            "setter": "setId",
            "datatype": "Long",
            "datatypeWithEnum": "Long",
            "dataFormat": "int64",
            "name": "id",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.id;",
            "baseType": "Long",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int64\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": true,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Id"
          },
          {
            "baseName": "name",
            "getter": "getName",
            "setter": "setName",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "name",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.name;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": false,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": false,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Name"
          }
        ],
        "allVars": [
          {
            "baseName": "id",
            "getter": "getId",
            "setter": "setId",
            "datatype": "Long",
            "datatypeWithEnum": "Long",
            "dataFormat": "int64",
            "name": "id",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.id;",
            "baseType": "Long",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int64\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": true,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Id"
          },
          {
            "baseName": "name",
            "getter": "getName",
            "setter": "setName",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "name",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.name;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": false,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": false,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Name"
          }
        ],
        "parentVars": [],
        "mandatory": [],
        "allMandatory": [],
        "imports": [
          "JsonInclude",
          "JsonProperty"
        ],
        "hasVars": true,
        "emptyVars": false,
        "hasMoreModels": true,
        "hasEnums": false,
        "isEnum": false,
        "hasRequired": false,
        "isArrayModel": false,
        "hasChildren": false,
        "hasOnlyReadOnly": false,
        "vendorExtensions": {}
      }
    },
    {
      "importPath": "io.swagger.server.api.model.InlineResponseDefault",
      "model": {
        "name": "inline_response_default",
        "classname": "InlineResponseDefault",
        "classVarName": "inlineResponseDefault",
        "modelJson": "{\n  \"properties\" : {\n    \"uuid\" : {\n      \"type\" : \"string\",\n      \"format\" : \"uuid\"\n    }\n  }\n}",
        "classFilename": "InlineResponseDefault",
        "vars": [
          {
            "baseName": "uuid",
            "complexType": "UUID",
            "getter": "getUuid",
            "setter": "setUuid",
            "datatype": "UUID",
            "datatypeWithEnum": "UUID",
            "dataFormat": "uuid",
            "name": "uuid",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.uuid;",
            "baseType": "UUID",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\",\n  \"format\" : \"uuid\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": false,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": false,
            "isPrimitiveType": false,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Uuid"
          }
        ],
        "requiredVars": [],
        "optionalVars": [
          {
            "baseName": "uuid",
            "complexType": "UUID",
            "getter": "getUuid",
            "setter": "setUuid",
            "datatype": "UUID",
            "datatypeWithEnum": "UUID",
            "dataFormat": "uuid",
            "name": "uuid",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.uuid;",
            "baseType": "UUID",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\",\n  \"format\" : \"uuid\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": false,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": false,
            "isPrimitiveType": false,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Uuid"
          }
        ],
        "readOnlyVars": [],
        "readWriteVars": [
          {
            "baseName": "uuid",
            "complexType": "UUID",
            "getter": "getUuid",
            "setter": "setUuid",
            "datatype": "UUID",
            "datatypeWithEnum": "UUID",
            "dataFormat": "uuid",
            "name": "uuid",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.uuid;",
            "baseType": "UUID",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\",\n  \"format\" : \"uuid\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": false,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": false,
            "isPrimitiveType": false,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Uuid"
          }
        ],
        "allVars": [
          {
            "baseName": "uuid",
            "complexType": "UUID",
            "getter": "getUuid",
            "setter": "setUuid",
            "datatype": "UUID",
            "datatypeWithEnum": "UUID",
            "dataFormat": "uuid",
            "name": "uuid",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.uuid;",
            "baseType": "UUID",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\",\n  \"format\" : \"uuid\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": false,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": false,
            "isPrimitiveType": false,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Uuid"
          }
        ],
        "parentVars": [],
        "mandatory": [],
        "allMandatory": [],
        "imports": [
          "JsonInclude",
          "JsonProperty",
          "UUID"
        ],
        "hasVars": true,
        "emptyVars": false,
        "hasMoreModels": true,
        "hasEnums": false,
        "isEnum": false,
        "hasRequired": false,
        "isArrayModel": false,
        "hasChildren": false,
        "hasOnlyReadOnly": false,
        "vendorExtensions": {}
      }
    },
    {
      "importPath": "io.swagger.server.api.model.ModelApiResponse",
      "model": {
        "name": "ApiResponse",
        "classname": "ModelApiResponse",
        "classVarName": "_apiResponse",
        "modelJson": "{\n  \"type\" : \"object\",\n  \"properties\" : {\n    \"code\" : {\n      \"type\" : \"integer\",\n      \"format\" : \"int32\"\n    },\n    \"type\" : {\n      \"type\" : \"string\"\n    },\n    \"message\" : {\n      \"type\" : \"string\"\n    }\n  }\n}",
        "dataType": "Object",
        "classFilename": "ModelApiResponse",
        "vars": [
          {
            "baseName": "code",
            "getter": "getCode",
            "setter": "setCode",
            "datatype": "Integer",
            "datatypeWithEnum": "Integer",
            "dataFormat": "int32",
            "name": "code",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.code;",
            "baseType": "Integer",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int32\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": true,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Code"
          },
          {
            "baseName": "type",
            "getter": "getType",
            "setter": "setType",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "type",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.type;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Type"
          },
          {
            "baseName": "message",
            "getter": "getMessage",
            "setter": "setMessage",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "message",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.message;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": false,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": false,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Message"
          }
        ],
        "requiredVars": [],
        "optionalVars": [
          {
            "baseName": "code",
            "getter": "getCode",
            "setter": "setCode",
            "datatype": "Integer",
            "datatypeWithEnum": "Integer",
            "dataFormat": "int32",
            "name": "code",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.code;",
            "baseType": "Integer",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int32\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": true,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Code"
          },
          {
            "baseName": "type",
            "getter": "getType",
            "setter": "setType",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "type",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.type;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Type"
          },
          {
            "baseName": "message",
            "getter": "getMessage",
            "setter": "setMessage",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "message",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.message;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": false,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": false,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Message"
          }
        ],
        "readOnlyVars": [],
        "readWriteVars": [
          {
            "baseName": "code",
            "getter": "getCode",
            "setter": "setCode",
            "datatype": "Integer",
            "datatypeWithEnum": "Integer",
            "dataFormat": "int32",
            "name": "code",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.code;",
            "baseType": "Integer",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int32\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": true,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Code"
          },
          {
            "baseName": "type",
            "getter": "getType",
            "setter": "setType",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "type",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.type;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Type"
          },
          {
            "baseName": "message",
            "getter": "getMessage",
            "setter": "setMessage",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "message",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.message;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": false,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": false,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Message"
          }
        ],
        "allVars": [
          {
            "baseName": "code",
            "getter": "getCode",
            "setter": "setCode",
            "datatype": "Integer",
            "datatypeWithEnum": "Integer",
            "dataFormat": "int32",
            "name": "code",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.code;",
            "baseType": "Integer",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int32\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": true,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Code"
          },
          {
            "baseName": "type",
            "getter": "getType",
            "setter": "setType",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "type",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.type;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Type"
          },
          {
            "baseName": "message",
            "getter": "getMessage",
            "setter": "setMessage",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "message",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.message;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": false,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": false,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Message"
          }
        ],
        "parentVars": [],
        "mandatory": [],
        "allMandatory": [],
        "imports": [
          "JsonInclude",
          "JsonProperty"
        ],
        "hasVars": true,
        "emptyVars": false,
        "hasMoreModels": true,
        "hasEnums": false,
        "isEnum": false,
        "hasRequired": false,
        "isArrayModel": false,
        "hasChildren": false,
        "hasOnlyReadOnly": false,
        "vendorExtensions": {}
      }
    },
    {
      "importPath": "io.swagger.server.api.model.ModelUser",
      "model": {
        "name": "User",
        "classname": "ModelUser",
        "classVarName": "_user",
        "modelJson": "{\n  \"type\" : \"object\",\n  \"properties\" : {\n    \"id\" : {\n      \"type\" : \"integer\",\n      \"format\" : \"int64\"\n    },\n    \"username\" : {\n      \"type\" : \"string\"\n    },\n    \"firstName\" : {\n      \"type\" : \"string\"\n    },\n    \"lastName\" : {\n      \"type\" : \"string\"\n    },\n    \"email\" : {\n      \"type\" : \"string\"\n    },\n    \"password\" : {\n      \"type\" : \"string\"\n    },\n    \"phone\" : {\n      \"type\" : \"string\"\n    },\n    \"userStatus\" : {\n      \"type\" : \"integer\",\n      \"format\" : \"int32\",\n      \"description\" : \"User Status\"\n    }\n  },\n  \"xml\" : {\n    \"name\" : \"User\"\n  }\n}",
        "dataType": "Object",
        "classFilename": "ModelUser",
        "vars": [
          {
            "baseName": "id",
            "getter": "getId",
            "setter": "setId",
            "datatype": "Long",
            "datatypeWithEnum": "Long",
            "dataFormat": "int64",
            "name": "id",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.id;",
            "baseType": "Long",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int64\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": true,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Id"
          },
          {
            "baseName": "username",
            "getter": "getUsername",
            "setter": "setUsername",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "username",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.username;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Username"
          },
          {
            "baseName": "firstName",
            "getter": "getFirstName",
            "setter": "setFirstName",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "firstName",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.firstName;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "FirstName"
          },
          {
            "baseName": "lastName",
            "getter": "getLastName",
            "setter": "setLastName",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "lastName",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.lastName;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "LastName"
          },
          {
            "baseName": "email",
            "getter": "getEmail",
            "setter": "setEmail",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "email",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.email;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Email"
          },
          {
            "baseName": "password",
            "getter": "getPassword",
            "setter": "setPassword",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "password",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.password;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Password"
          },
          {
            "baseName": "phone",
            "getter": "getPhone",
            "setter": "setPhone",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "phone",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.phone;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Phone"
          },
          {
            "baseName": "userStatus",
            "getter": "getUserStatus",
            "setter": "setUserStatus",
            "description": "User Status",
            "datatype": "Integer",
            "datatypeWithEnum": "Integer",
            "dataFormat": "int32",
            "name": "userStatus",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.userStatus;",
            "baseType": "Integer",
            "unescapedDescription": "User Status",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int32\",\n  \"description\" : \"User Status\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": false,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": false,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": true,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "UserStatus"
          }
        ],
        "requiredVars": [],
        "optionalVars": [
          {
            "baseName": "id",
            "getter": "getId",
            "setter": "setId",
            "datatype": "Long",
            "datatypeWithEnum": "Long",
            "dataFormat": "int64",
            "name": "id",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.id;",
            "baseType": "Long",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int64\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": true,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Id"
          },
          {
            "baseName": "username",
            "getter": "getUsername",
            "setter": "setUsername",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "username",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.username;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Username"
          },
          {
            "baseName": "firstName",
            "getter": "getFirstName",
            "setter": "setFirstName",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "firstName",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.firstName;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "FirstName"
          },
          {
            "baseName": "lastName",
            "getter": "getLastName",
            "setter": "setLastName",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "lastName",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.lastName;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "LastName"
          },
          {
            "baseName": "email",
            "getter": "getEmail",
            "setter": "setEmail",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "email",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.email;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Email"
          },
          {
            "baseName": "password",
            "getter": "getPassword",
            "setter": "setPassword",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "password",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.password;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Password"
          },
          {
            "baseName": "phone",
            "getter": "getPhone",
            "setter": "setPhone",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "phone",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.phone;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Phone"
          },
          {
            "baseName": "userStatus",
            "getter": "getUserStatus",
            "setter": "setUserStatus",
            "description": "User Status",
            "datatype": "Integer",
            "datatypeWithEnum": "Integer",
            "dataFormat": "int32",
            "name": "userStatus",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.userStatus;",
            "baseType": "Integer",
            "unescapedDescription": "User Status",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int32\",\n  \"description\" : \"User Status\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": false,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": false,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": true,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "UserStatus"
          }
        ],
        "readOnlyVars": [],
        "readWriteVars": [
          {
            "baseName": "id",
            "getter": "getId",
            "setter": "setId",
            "datatype": "Long",
            "datatypeWithEnum": "Long",
            "dataFormat": "int64",
            "name": "id",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.id;",
            "baseType": "Long",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int64\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": true,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Id"
          },
          {
            "baseName": "username",
            "getter": "getUsername",
            "setter": "setUsername",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "username",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.username;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Username"
          },
          {
            "baseName": "firstName",
            "getter": "getFirstName",
            "setter": "setFirstName",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "firstName",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.firstName;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "FirstName"
          },
          {
            "baseName": "lastName",
            "getter": "getLastName",
            "setter": "setLastName",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "lastName",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.lastName;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "LastName"
          },
          {
            "baseName": "email",
            "getter": "getEmail",
            "setter": "setEmail",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "email",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.email;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Email"
          },
          {
            "baseName": "password",
            "getter": "getPassword",
            "setter": "setPassword",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "password",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.password;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Password"
          },
          {
            "baseName": "phone",
            "getter": "getPhone",
            "setter": "setPhone",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "phone",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.phone;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Phone"
          },
          {
            "baseName": "userStatus",
            "getter": "getUserStatus",
            "setter": "setUserStatus",
            "description": "User Status",
            "datatype": "Integer",
            "datatypeWithEnum": "Integer",
            "dataFormat": "int32",
            "name": "userStatus",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.userStatus;",
            "baseType": "Integer",
            "unescapedDescription": "User Status",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int32\",\n  \"description\" : \"User Status\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": false,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": false,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": true,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "UserStatus"
          }
        ],
        "allVars": [
          {
            "baseName": "id",
            "getter": "getId",
            "setter": "setId",
            "datatype": "Long",
            "datatypeWithEnum": "Long",
            "dataFormat": "int64",
            "name": "id",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.id;",
            "baseType": "Long",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int64\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": true,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Id"
          },
          {
            "baseName": "username",
            "getter": "getUsername",
            "setter": "setUsername",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "username",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.username;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Username"
          },
          {
            "baseName": "firstName",
            "getter": "getFirstName",
            "setter": "setFirstName",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "firstName",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.firstName;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "FirstName"
          },
          {
            "baseName": "lastName",
            "getter": "getLastName",
            "setter": "setLastName",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "lastName",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.lastName;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "LastName"
          },
          {
            "baseName": "email",
            "getter": "getEmail",
            "setter": "setEmail",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "email",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.email;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Email"
          },
          {
            "baseName": "password",
            "getter": "getPassword",
            "setter": "setPassword",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "password",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.password;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Password"
          },
          {
            "baseName": "phone",
            "getter": "getPhone",
            "setter": "setPhone",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "phone",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.phone;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Phone"
          },
          {
            "baseName": "userStatus",
            "getter": "getUserStatus",
            "setter": "setUserStatus",
            "description": "User Status",
            "datatype": "Integer",
            "datatypeWithEnum": "Integer",
            "dataFormat": "int32",
            "name": "userStatus",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.userStatus;",
            "baseType": "Integer",
            "unescapedDescription": "User Status",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int32\",\n  \"description\" : \"User Status\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": false,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": false,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": true,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "UserStatus"
          }
        ],
        "parentVars": [],
        "mandatory": [],
        "allMandatory": [],
        "imports": [
          "JsonInclude",
          "JsonProperty"
        ],
        "hasVars": true,
        "emptyVars": false,
        "hasMoreModels": true,
        "hasEnums": false,
        "isEnum": false,
        "hasRequired": false,
        "isArrayModel": false,
        "hasChildren": false,
        "hasOnlyReadOnly": false,
        "vendorExtensions": {}
      }
    },
    {
      "importPath": "io.swagger.server.api.model.Order",
      "model": {
        "name": "Order",
        "classname": "Order",
        "classVarName": "order",
        "modelJson": "{\n  \"type\" : \"object\",\n  \"properties\" : {\n    \"id\" : {\n      \"type\" : \"integer\",\n      \"format\" : \"int64\"\n    },\n    \"petId\" : {\n      \"type\" : \"integer\",\n      \"format\" : \"int64\"\n    },\n    \"quantity\" : {\n      \"type\" : \"integer\",\n      \"format\" : \"int32\"\n    },\n    \"shipDate\" : {\n      \"type\" : \"string\",\n      \"format\" : \"date-time\"\n    },\n    \"status\" : {\n      \"type\" : \"string\",\n      \"description\" : \"Order Status\",\n      \"enum\" : [ \"placed\", \"approved\", \"delivered\" ]\n    },\n    \"complete\" : {\n      \"type\" : \"boolean\",\n      \"default\" : false\n    }\n  },\n  \"xml\" : {\n    \"name\" : \"Order\"\n  }\n}",
        "dataType": "Object",
        "classFilename": "Order",
        "vars": [
          {
            "baseName": "id",
            "getter": "getId",
            "setter": "setId",
            "datatype": "Long",
            "datatypeWithEnum": "Long",
            "dataFormat": "int64",
            "name": "id",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.id;",
            "baseType": "Long",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int64\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": true,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Id"
          },
          {
            "baseName": "petId",
            "getter": "getPetId",
            "setter": "setPetId",
            "datatype": "Long",
            "datatypeWithEnum": "Long",
            "dataFormat": "int64",
            "name": "petId",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.petId;",
            "baseType": "Long",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int64\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": true,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "PetId"
          },
          {
            "baseName": "quantity",
            "getter": "getQuantity",
            "setter": "setQuantity",
            "datatype": "Integer",
            "datatypeWithEnum": "Integer",
            "dataFormat": "int32",
            "name": "quantity",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.quantity;",
            "baseType": "Integer",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int32\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": true,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Quantity"
          },
          {
            "baseName": "shipDate",
            "complexType": "OffsetDateTime",
            "getter": "getShipDate",
            "setter": "setShipDate",
            "datatype": "OffsetDateTime",
            "datatypeWithEnum": "OffsetDateTime",
            "dataFormat": "date-time",
            "name": "shipDate",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.shipDate;",
            "baseType": "OffsetDateTime",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\",\n  \"format\" : \"date-time\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": false,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": true,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "ShipDate"
          },
          {
            "baseName": "status",
            "getter": "getStatus",
            "setter": "setStatus",
            "description": "Order Status",
            "datatype": "String",
            "datatypeWithEnum": "StatusEnum",
            "name": "status",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.status;",
            "baseType": "String",
            "unescapedDescription": "Order Status",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\",\n  \"description\" : \"Order Status\",\n  \"enum\" : [ \"placed\", \"approved\", \"delivered\" ]\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": true,
            "isReadOnly": false,
            "_enum": [
              "placed",
              "approved",
              "delivered"
            ],
            "allowableValues": {
              "values": [
                "placed",
                "approved",
                "delivered"
              ],
              "enumVars": [
                {
                  "name": "PLACED",
                  "value": "\"placed\""
                },
                {
                  "name": "APPROVED",
                  "value": "\"approved\""
                },
                {
                  "name": "DELIVERED",
                  "value": "\"delivered\""
                }
              ]
            },
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Status",
            "enumName": "StatusEnum"
          },
          {
            "baseName": "complete",
            "getter": "getComplete",
            "setter": "setComplete",
            "datatype": "Boolean",
            "datatypeWithEnum": "Boolean",
            "name": "complete",
            "defaultValue": "false",
            "defaultValueWithParam": " = data.complete;",
            "baseType": "Boolean",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"boolean\",\n  \"default\" : false\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": false,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": false,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": true,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Complete"
          }
        ],
        "requiredVars": [],
        "optionalVars": [
          {
            "baseName": "id",
            "getter": "getId",
            "setter": "setId",
            "datatype": "Long",
            "datatypeWithEnum": "Long",
            "dataFormat": "int64",
            "name": "id",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.id;",
            "baseType": "Long",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int64\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": true,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Id"
          },
          {
            "baseName": "petId",
            "getter": "getPetId",
            "setter": "setPetId",
            "datatype": "Long",
            "datatypeWithEnum": "Long",
            "dataFormat": "int64",
            "name": "petId",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.petId;",
            "baseType": "Long",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int64\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": true,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "PetId"
          },
          {
            "baseName": "quantity",
            "getter": "getQuantity",
            "setter": "setQuantity",
            "datatype": "Integer",
            "datatypeWithEnum": "Integer",
            "dataFormat": "int32",
            "name": "quantity",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.quantity;",
            "baseType": "Integer",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int32\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": true,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Quantity"
          },
          {
            "baseName": "shipDate",
            "complexType": "OffsetDateTime",
            "getter": "getShipDate",
            "setter": "setShipDate",
            "datatype": "OffsetDateTime",
            "datatypeWithEnum": "OffsetDateTime",
            "dataFormat": "date-time",
            "name": "shipDate",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.shipDate;",
            "baseType": "OffsetDateTime",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\",\n  \"format\" : \"date-time\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": false,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": true,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "ShipDate"
          },
          {
            "baseName": "status",
            "getter": "getStatus",
            "setter": "setStatus",
            "description": "Order Status",
            "datatype": "String",
            "datatypeWithEnum": "StatusEnum",
            "name": "status",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.status;",
            "baseType": "String",
            "unescapedDescription": "Order Status",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\",\n  \"description\" : \"Order Status\",\n  \"enum\" : [ \"placed\", \"approved\", \"delivered\" ]\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": true,
            "isReadOnly": false,
            "_enum": [
              "placed",
              "approved",
              "delivered"
            ],
            "allowableValues": {
              "values": [
                "placed",
                "approved",
                "delivered"
              ],
              "enumVars": [
                {
                  "name": "PLACED",
                  "value": "\"placed\""
                },
                {
                  "name": "APPROVED",
                  "value": "\"approved\""
                },
                {
                  "name": "DELIVERED",
                  "value": "\"delivered\""
                }
              ]
            },
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Status",
            "enumName": "StatusEnum"
          },
          {
            "baseName": "complete",
            "getter": "getComplete",
            "setter": "setComplete",
            "datatype": "Boolean",
            "datatypeWithEnum": "Boolean",
            "name": "complete",
            "defaultValue": "false",
            "defaultValueWithParam": " = data.complete;",
            "baseType": "Boolean",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"boolean\",\n  \"default\" : false\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": false,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": false,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": true,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Complete"
          }
        ],
        "readOnlyVars": [],
        "readWriteVars": [
          {
            "baseName": "id",
            "getter": "getId",
            "setter": "setId",
            "datatype": "Long",
            "datatypeWithEnum": "Long",
            "dataFormat": "int64",
            "name": "id",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.id;",
            "baseType": "Long",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int64\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": true,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Id"
          },
          {
            "baseName": "petId",
            "getter": "getPetId",
            "setter": "setPetId",
            "datatype": "Long",
            "datatypeWithEnum": "Long",
            "dataFormat": "int64",
            "name": "petId",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.petId;",
            "baseType": "Long",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int64\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": true,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "PetId"
          },
          {
            "baseName": "quantity",
            "getter": "getQuantity",
            "setter": "setQuantity",
            "datatype": "Integer",
            "datatypeWithEnum": "Integer",
            "dataFormat": "int32",
            "name": "quantity",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.quantity;",
            "baseType": "Integer",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int32\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": true,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Quantity"
          },
          {
            "baseName": "shipDate",
            "complexType": "OffsetDateTime",
            "getter": "getShipDate",
            "setter": "setShipDate",
            "datatype": "OffsetDateTime",
            "datatypeWithEnum": "OffsetDateTime",
            "dataFormat": "date-time",
            "name": "shipDate",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.shipDate;",
            "baseType": "OffsetDateTime",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\",\n  \"format\" : \"date-time\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": false,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": true,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "ShipDate"
          },
          {
            "baseName": "status",
            "getter": "getStatus",
            "setter": "setStatus",
            "description": "Order Status",
            "datatype": "String",
            "datatypeWithEnum": "StatusEnum",
            "name": "status",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.status;",
            "baseType": "String",
            "unescapedDescription": "Order Status",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\",\n  \"description\" : \"Order Status\",\n  \"enum\" : [ \"placed\", \"approved\", \"delivered\" ]\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": true,
            "isReadOnly": false,
            "_enum": [
              "placed",
              "approved",
              "delivered"
            ],
            "allowableValues": {
              "values": [
                "placed",
                "approved",
                "delivered"
              ],
              "enumVars": [
                {
                  "name": "PLACED",
                  "value": "\"placed\""
                },
                {
                  "name": "APPROVED",
                  "value": "\"approved\""
                },
                {
                  "name": "DELIVERED",
                  "value": "\"delivered\""
                }
              ]
            },
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Status",
            "enumName": "StatusEnum"
          },
          {
            "baseName": "complete",
            "getter": "getComplete",
            "setter": "setComplete",
            "datatype": "Boolean",
            "datatypeWithEnum": "Boolean",
            "name": "complete",
            "defaultValue": "false",
            "defaultValueWithParam": " = data.complete;",
            "baseType": "Boolean",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"boolean\",\n  \"default\" : false\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": false,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": false,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": true,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Complete"
          }
        ],
        "allVars": [
          {
            "baseName": "id",
            "getter": "getId",
            "setter": "setId",
            "datatype": "Long",
            "datatypeWithEnum": "Long",
            "dataFormat": "int64",
            "name": "id",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.id;",
            "baseType": "Long",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int64\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": true,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Id"
          },
          {
            "baseName": "petId",
            "getter": "getPetId",
            "setter": "setPetId",
            "datatype": "Long",
            "datatypeWithEnum": "Long",
            "dataFormat": "int64",
            "name": "petId",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.petId;",
            "baseType": "Long",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int64\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": true,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "PetId"
          },
          {
            "baseName": "quantity",
            "getter": "getQuantity",
            "setter": "setQuantity",
            "datatype": "Integer",
            "datatypeWithEnum": "Integer",
            "dataFormat": "int32",
            "name": "quantity",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.quantity;",
            "baseType": "Integer",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int32\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": true,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Quantity"
          },
          {
            "baseName": "shipDate",
            "complexType": "OffsetDateTime",
            "getter": "getShipDate",
            "setter": "setShipDate",
            "datatype": "OffsetDateTime",
            "datatypeWithEnum": "OffsetDateTime",
            "dataFormat": "date-time",
            "name": "shipDate",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.shipDate;",
            "baseType": "OffsetDateTime",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\",\n  \"format\" : \"date-time\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": false,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": true,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "ShipDate"
          },
          {
            "baseName": "status",
            "getter": "getStatus",
            "setter": "setStatus",
            "description": "Order Status",
            "datatype": "String",
            "datatypeWithEnum": "StatusEnum",
            "name": "status",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.status;",
            "baseType": "String",
            "unescapedDescription": "Order Status",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\",\n  \"description\" : \"Order Status\",\n  \"enum\" : [ \"placed\", \"approved\", \"delivered\" ]\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": true,
            "isReadOnly": false,
            "_enum": [
              "placed",
              "approved",
              "delivered"
            ],
            "allowableValues": {
              "values": [
                "placed",
                "approved",
                "delivered"
              ],
              "enumVars": [
                {
                  "name": "PLACED",
                  "value": "\"placed\""
                },
                {
                  "name": "APPROVED",
                  "value": "\"approved\""
                },
                {
                  "name": "DELIVERED",
                  "value": "\"delivered\""
                }
              ]
            },
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Status",
            "enumName": "StatusEnum"
          },
          {
            "baseName": "complete",
            "getter": "getComplete",
            "setter": "setComplete",
            "datatype": "Boolean",
            "datatypeWithEnum": "Boolean",
            "name": "complete",
            "defaultValue": "false",
            "defaultValueWithParam": " = data.complete;",
            "baseType": "Boolean",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"boolean\",\n  \"default\" : false\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": false,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": false,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": true,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Complete"
          }
        ],
        "parentVars": [],
        "mandatory": [],
        "allMandatory": [],
        "imports": [
          "JsonInclude",
          "JsonProperty",
          "JsonValue",
          "OffsetDateTime"
        ],
        "hasVars": true,
        "emptyVars": false,
        "hasMoreModels": true,
        "hasEnums": true,
        "isEnum": false,
        "hasRequired": false,
        "isArrayModel": false,
        "hasChildren": false,
        "hasOnlyReadOnly": false,
        "vendorExtensions": {}
      }
    },
    {
      "importPath": "io.swagger.server.api.model.Pet",
      "model": {
        "name": "Pet",
        "classname": "Pet",
        "classVarName": "pet",
        "modelJson": "{\n  \"type\" : \"object\",\n  \"required\" : [ \"name\", \"photoUrls\" ],\n  \"properties\" : {\n    \"id\" : {\n      \"type\" : \"integer\",\n      \"format\" : \"int64\"\n    },\n    \"category\" : {\n      \"$ref\" : \"#/definitions/Category\"\n    },\n    \"name\" : {\n      \"type\" : \"string\",\n      \"example\" : \"doggie\"\n    },\n    \"photoUrls\" : {\n      \"type\" : \"array\",\n      \"xml\" : {\n        \"name\" : \"photoUrl\",\n        \"wrapped\" : true\n      },\n      \"items\" : {\n        \"type\" : \"string\"\n      }\n    },\n    \"tags\" : {\n      \"type\" : \"array\",\n      \"xml\" : {\n        \"name\" : \"tag\",\n        \"wrapped\" : true\n      },\n      \"items\" : {\n        \"$ref\" : \"#/definitions/Tag\"\n      }\n    },\n    \"status\" : {\n      \"type\" : \"string\",\n      \"description\" : \"pet status in the store\",\n      \"enum\" : [ \"available\", \"pending\", \"sold\" ]\n    }\n  },\n  \"xml\" : {\n    \"name\" : \"Pet\"\n  }\n}",
        "dataType": "Object",
        "classFilename": "Pet",
        "vars": [
          {
            "baseName": "id",
            "getter": "getId",
            "setter": "setId",
            "datatype": "Long",
            "datatypeWithEnum": "Long",
            "dataFormat": "int64",
            "name": "id",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.id;",
            "baseType": "Long",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int64\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": true,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Id"
          },
          {
            "baseName": "category",
            "complexType": "Category",
            "getter": "getCategory",
            "setter": "setCategory",
            "datatype": "Category",
            "datatypeWithEnum": "Category",
            "name": "category",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.category;",
            "baseType": "Category",
            "example": "null",
            "jsonSchema": "{\n  \"$ref\" : \"#/definitions/Category\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": false,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Category"
          },
          {
            "baseName": "name",
            "getter": "getName",
            "setter": "setName",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "name",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.name;",
            "baseType": "String",
            "example": "doggie",
            "jsonSchema": "{\n  \"type\" : \"string\",\n  \"example\" : \"doggie\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": true,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Name"
          },
          {
            "baseName": "photoUrls",
            "getter": "getPhotoUrls",
            "setter": "setPhotoUrls",
            "datatype": "List<String>",
            "datatypeWithEnum": "List<String>",
            "name": "photoUrls",
            "defaultValue": "new ArrayList<String>()",
            "defaultValueWithParam": " = data.photoUrls;",
            "baseType": "List",
            "containerType": "array",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"array\",\n  \"xml\" : {\n    \"name\" : \"photoUrl\",\n    \"wrapped\" : true\n  },\n  \"items\" : {\n    \"type\" : \"string\"\n  }\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": true,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": true,
            "isNotContainer": false,
            "isString": false,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": true,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "items": {
              "baseName": "photoUrls",
              "getter": "getPhotoUrls",
              "setter": "setPhotoUrls",
              "datatype": "String",
              "datatypeWithEnum": "String",
              "name": "photoUrls",
              "defaultValue": "null",
              "defaultValueWithParam": " = data.photoUrls;",
              "baseType": "String",
              "example": "null",
              "jsonSchema": "{\n  \"type\" : \"string\"\n}",
              "exclusiveMinimum": false,
              "exclusiveMaximum": false,
              "hasMore": false,
              "required": false,
              "secondaryParam": false,
              "hasMoreNonReadOnly": false,
              "isPrimitiveType": true,
              "isContainer": false,
              "isNotContainer": true,
              "isString": true,
              "isInteger": false,
              "isLong": false,
              "isFloat": false,
              "isDouble": false,
              "isByteArray": false,
              "isBinary": false,
              "isFile": false,
              "isBoolean": false,
              "isDate": false,
              "isDateTime": false,
              "isListContainer": false,
              "isMapContainer": false,
              "isEnum": false,
              "isReadOnly": false,
              "vendorExtensions": {},
              "hasValidation": false,
              "isInherited": false,
              "nameInCamelCase": "PhotoUrls"
            },
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "PhotoUrls"
          },
          {
            "baseName": "tags",
            "complexType": "Tag",
            "getter": "getTags",
            "setter": "setTags",
            "datatype": "List<Tag>",
            "datatypeWithEnum": "List<Tag>",
            "name": "tags",
            "defaultValue": "new ArrayList<Tag>()",
            "defaultValueWithParam": " = data.tags;",
            "baseType": "List",
            "containerType": "array",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"array\",\n  \"xml\" : {\n    \"name\" : \"tag\",\n    \"wrapped\" : true\n  },\n  \"items\" : {\n    \"$ref\" : \"#/definitions/Tag\"\n  }\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": false,
            "isContainer": true,
            "isNotContainer": false,
            "isString": false,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": true,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "items": {
              "baseName": "tags",
              "complexType": "Tag",
              "getter": "getTags",
              "setter": "setTags",
              "datatype": "Tag",
              "datatypeWithEnum": "Tag",
              "name": "tags",
              "defaultValue": "null",
              "defaultValueWithParam": " = data.tags;",
              "baseType": "Tag",
              "example": "null",
              "jsonSchema": "{\n  \"$ref\" : \"#/definitions/Tag\"\n}",
              "exclusiveMinimum": false,
              "exclusiveMaximum": false,
              "hasMore": false,
              "required": false,
              "secondaryParam": false,
              "hasMoreNonReadOnly": false,
              "isPrimitiveType": false,
              "isContainer": false,
              "isNotContainer": true,
              "isString": false,
              "isInteger": false,
              "isLong": false,
              "isFloat": false,
              "isDouble": false,
              "isByteArray": false,
              "isBinary": false,
              "isFile": false,
              "isBoolean": false,
              "isDate": false,
              "isDateTime": false,
              "isListContainer": false,
              "isMapContainer": false,
              "isEnum": false,
              "isReadOnly": false,
              "vendorExtensions": {
              },
              "hasValidation": false,
              "isInherited": false,
              "nameInCamelCase": "Tags"
            },
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Tags"
          },
          {
            "baseName": "status",
            "getter": "getStatus",
            "setter": "setStatus",
            "description": "pet status in the store",
            "datatype": "String",
            "datatypeWithEnum": "StatusEnum",
            "name": "status",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.status;",
            "baseType": "String",
            "unescapedDescription": "pet status in the store",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\",\n  \"description\" : \"pet status in the store\",\n  \"enum\" : [ \"available\", \"pending\", \"sold\" ]\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": false,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": false,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": true,
            "isReadOnly": false,
            "_enum": [
              "available",
              "pending",
              "sold"
            ],
            "allowableValues": {
              "values": [
                "available",
                "pending",
                "sold"
              ],
              "enumVars": [
                {
                  "name": "AVAILABLE",
                  "value": "\"available\""
                },
                {
                  "name": "PENDING",
                  "value": "\"pending\""
                },
                {
                  "name": "SOLD",
                  "value": "\"sold\""
                }
              ]
            },
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Status",
            "enumName": "StatusEnum"
          }
        ],
        "requiredVars": [
          {
            "baseName": "name",
            "getter": "getName",
            "setter": "setName",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "name",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.name;",
            "baseType": "String",
            "example": "doggie",
            "jsonSchema": "{\n  \"type\" : \"string\",\n  \"example\" : \"doggie\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": true,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Name"
          },
          {
            "baseName": "photoUrls",
            "getter": "getPhotoUrls",
            "setter": "setPhotoUrls",
            "datatype": "List<String>",
            "datatypeWithEnum": "List<String>",
            "name": "photoUrls",
            "defaultValue": "new ArrayList<String>()",
            "defaultValueWithParam": " = data.photoUrls;",
            "baseType": "List",
            "containerType": "array",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"array\",\n  \"xml\" : {\n    \"name\" : \"photoUrl\",\n    \"wrapped\" : true\n  },\n  \"items\" : {\n    \"type\" : \"string\"\n  }\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": true,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": true,
            "isNotContainer": false,
            "isString": false,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": true,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "items": {
              "baseName": "photoUrls",
              "getter": "getPhotoUrls",
              "setter": "setPhotoUrls",
              "datatype": "String",
              "datatypeWithEnum": "String",
              "name": "photoUrls",
              "defaultValue": "null",
              "defaultValueWithParam": " = data.photoUrls;",
              "baseType": "String",
              "example": "null",
              "jsonSchema": "{\n  \"type\" : \"string\"\n}",
              "exclusiveMinimum": false,
              "exclusiveMaximum": false,
              "hasMore": false,
              "required": false,
              "secondaryParam": false,
              "hasMoreNonReadOnly": false,
              "isPrimitiveType": true,
              "isContainer": false,
              "isNotContainer": true,
              "isString": true,
              "isInteger": false,
              "isLong": false,
              "isFloat": false,
              "isDouble": false,
              "isByteArray": false,
              "isBinary": false,
              "isFile": false,
              "isBoolean": false,
              "isDate": false,
              "isDateTime": false,
              "isListContainer": false,
              "isMapContainer": false,
              "isEnum": false,
              "isReadOnly": false,
              "vendorExtensions": {},
              "hasValidation": false,
              "isInherited": false,
              "nameInCamelCase": "PhotoUrls"
            },
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "PhotoUrls"
          }
        ],
        "optionalVars": [
          {
            "baseName": "id",
            "getter": "getId",
            "setter": "setId",
            "datatype": "Long",
            "datatypeWithEnum": "Long",
            "dataFormat": "int64",
            "name": "id",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.id;",
            "baseType": "Long",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int64\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": true,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Id"
          },
          {
            "baseName": "category",
            "complexType": "Category",
            "getter": "getCategory",
            "setter": "setCategory",
            "datatype": "Category",
            "datatypeWithEnum": "Category",
            "name": "category",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.category;",
            "baseType": "Category",
            "example": "null",
            "jsonSchema": "{\n  \"$ref\" : \"#/definitions/Category\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": false,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Category"
          },
          {
            "baseName": "tags",
            "complexType": "Tag",
            "getter": "getTags",
            "setter": "setTags",
            "datatype": "List<Tag>",
            "datatypeWithEnum": "List<Tag>",
            "name": "tags",
            "defaultValue": "new ArrayList<Tag>()",
            "defaultValueWithParam": " = data.tags;",
            "baseType": "List",
            "containerType": "array",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"array\",\n  \"xml\" : {\n    \"name\" : \"tag\",\n    \"wrapped\" : true\n  },\n  \"items\" : {\n    \"$ref\" : \"#/definitions/Tag\"\n  }\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": false,
            "isContainer": true,
            "isNotContainer": false,
            "isString": false,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": true,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "items": {
              "baseName": "tags",
              "complexType": "Tag",
              "getter": "getTags",
              "setter": "setTags",
              "datatype": "Tag",
              "datatypeWithEnum": "Tag",
              "name": "tags",
              "defaultValue": "null",
              "defaultValueWithParam": " = data.tags;",
              "baseType": "Tag",
              "example": "null",
              "jsonSchema": "{\n  \"$ref\" : \"#/definitions/Tag\"\n}",
              "exclusiveMinimum": false,
              "exclusiveMaximum": false,
              "hasMore": false,
              "required": false,
              "secondaryParam": false,
              "hasMoreNonReadOnly": false,
              "isPrimitiveType": false,
              "isContainer": false,
              "isNotContainer": true,
              "isString": false,
              "isInteger": false,
              "isLong": false,
              "isFloat": false,
              "isDouble": false,
              "isByteArray": false,
              "isBinary": false,
              "isFile": false,
              "isBoolean": false,
              "isDate": false,
              "isDateTime": false,
              "isListContainer": false,
              "isMapContainer": false,
              "isEnum": false,
              "isReadOnly": false,
              "vendorExtensions": {},
              "hasValidation": false,
              "isInherited": false,
              "nameInCamelCase": "Tags"
            },
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Tags"
          },
          {
            "baseName": "status",
            "getter": "getStatus",
            "setter": "setStatus",
            "description": "pet status in the store",
            "datatype": "String",
            "datatypeWithEnum": "StatusEnum",
            "name": "status",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.status;",
            "baseType": "String",
            "unescapedDescription": "pet status in the store",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\",\n  \"description\" : \"pet status in the store\",\n  \"enum\" : [ \"available\", \"pending\", \"sold\" ]\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": false,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": false,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": true,
            "isReadOnly": false,
            "_enum": [
              "available",
              "pending",
              "sold"
            ],
            "allowableValues": {
              "values": [
                "available",
                "pending",
                "sold"
              ],
              "enumVars": [
                {
                  "name": "AVAILABLE",
                  "value": "\"available\""
                },
                {
                  "name": "PENDING",
                  "value": "\"pending\""
                },
                {
                  "name": "SOLD",
                  "value": "\"sold\""
                }
              ]
            },
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Status",
            "enumName": "StatusEnum"
          }
        ],
        "readOnlyVars": [],
        "readWriteVars": [
          {
            "baseName": "id",
            "getter": "getId",
            "setter": "setId",
            "datatype": "Long",
            "datatypeWithEnum": "Long",
            "dataFormat": "int64",
            "name": "id",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.id;",
            "baseType": "Long",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int64\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": true,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Id"
          },
          {
            "baseName": "category",
            "complexType": "Category",
            "getter": "getCategory",
            "setter": "setCategory",
            "datatype": "Category",
            "datatypeWithEnum": "Category",
            "name": "category",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.category;",
            "baseType": "Category",
            "example": "null",
            "jsonSchema": "{\n  \"$ref\" : \"#/definitions/Category\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": false,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Category"
          },
          {
            "baseName": "name",
            "getter": "getName",
            "setter": "setName",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "name",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.name;",
            "baseType": "String",
            "example": "doggie",
            "jsonSchema": "{\n  \"type\" : \"string\",\n  \"example\" : \"doggie\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": true,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Name"
          },
          {
            "baseName": "photoUrls",
            "getter": "getPhotoUrls",
            "setter": "setPhotoUrls",
            "datatype": "List<String>",
            "datatypeWithEnum": "List<String>",
            "name": "photoUrls",
            "defaultValue": "new ArrayList<String>()",
            "defaultValueWithParam": " = data.photoUrls;",
            "baseType": "List",
            "containerType": "array",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"array\",\n  \"xml\" : {\n    \"name\" : \"photoUrl\",\n    \"wrapped\" : true\n  },\n  \"items\" : {\n    \"type\" : \"string\"\n  }\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": true,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": true,
            "isNotContainer": false,
            "isString": false,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": true,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "items": {
              "baseName": "photoUrls",
              "getter": "getPhotoUrls",
              "setter": "setPhotoUrls",
              "datatype": "String",
              "datatypeWithEnum": "String",
              "name": "photoUrls",
              "defaultValue": "null",
              "defaultValueWithParam": " = data.photoUrls;",
              "baseType": "String",
              "example": "null",
              "jsonSchema": "{\n  \"type\" : \"string\"\n}",
              "exclusiveMinimum": false,
              "exclusiveMaximum": false,
              "hasMore": false,
              "required": false,
              "secondaryParam": false,
              "hasMoreNonReadOnly": false,
              "isPrimitiveType": true,
              "isContainer": false,
              "isNotContainer": true,
              "isString": true,
              "isInteger": false,
              "isLong": false,
              "isFloat": false,
              "isDouble": false,
              "isByteArray": false,
              "isBinary": false,
              "isFile": false,
              "isBoolean": false,
              "isDate": false,
              "isDateTime": false,
              "isListContainer": false,
              "isMapContainer": false,
              "isEnum": false,
              "isReadOnly": false,
              "vendorExtensions": {},
              "hasValidation": false,
              "isInherited": false,
              "nameInCamelCase": "PhotoUrls"
            },
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "PhotoUrls"
          },
          {
            "baseName": "tags",
            "complexType": "Tag",
            "getter": "getTags",
            "setter": "setTags",
            "datatype": "List<Tag>",
            "datatypeWithEnum": "List<Tag>",
            "name": "tags",
            "defaultValue": "new ArrayList<Tag>()",
            "defaultValueWithParam": " = data.tags;",
            "baseType": "List",
            "containerType": "array",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"array\",\n  \"xml\" : {\n    \"name\" : \"tag\",\n    \"wrapped\" : true\n  },\n  \"items\" : {\n    \"$ref\" : \"#/definitions/Tag\"\n  }\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": false,
            "isContainer": true,
            "isNotContainer": false,
            "isString": false,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": true,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "items": {
              "baseName": "tags",
              "complexType": "Tag",
              "getter": "getTags",
              "setter": "setTags",
              "datatype": "Tag",
              "datatypeWithEnum": "Tag",
              "name": "tags",
              "defaultValue": "null",
              "defaultValueWithParam": " = data.tags;",
              "baseType": "Tag",
              "example": "null",
              "jsonSchema": "{\n  \"$ref\" : \"#/definitions/Tag\"\n}",
              "exclusiveMinimum": false,
              "exclusiveMaximum": false,
              "hasMore": false,
              "required": false,
              "secondaryParam": false,
              "hasMoreNonReadOnly": false,
              "isPrimitiveType": false,
              "isContainer": false,
              "isNotContainer": true,
              "isString": false,
              "isInteger": false,
              "isLong": false,
              "isFloat": false,
              "isDouble": false,
              "isByteArray": false,
              "isBinary": false,
              "isFile": false,
              "isBoolean": false,
              "isDate": false,
              "isDateTime": false,
              "isListContainer": false,
              "isMapContainer": false,
              "isEnum": false,
              "isReadOnly": false,
              "vendorExtensions": {
              },
              "hasValidation": false,
              "isInherited": false,
              "nameInCamelCase": "Tags"
            },
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Tags"
          },
          {
            "baseName": "status",
            "getter": "getStatus",
            "setter": "setStatus",
            "description": "pet status in the store",
            "datatype": "String",
            "datatypeWithEnum": "StatusEnum",
            "name": "status",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.status;",
            "baseType": "String",
            "unescapedDescription": "pet status in the store",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\",\n  \"description\" : \"pet status in the store\",\n  \"enum\" : [ \"available\", \"pending\", \"sold\" ]\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": false,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": false,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": true,
            "isReadOnly": false,
            "_enum": [
              "available",
              "pending",
              "sold"
            ],
            "allowableValues": {
              "values": [
                "available",
                "pending",
                "sold"
              ],
              "enumVars": [
                {
                  "name": "AVAILABLE",
                  "value": "\"available\""
                },
                {
                  "name": "PENDING",
                  "value": "\"pending\""
                },
                {
                  "name": "SOLD",
                  "value": "\"sold\""
                }
              ]
            },
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Status",
            "enumName": "StatusEnum"
          }
        ],
        "allVars": [
          {
            "baseName": "id",
            "getter": "getId",
            "setter": "setId",
            "datatype": "Long",
            "datatypeWithEnum": "Long",
            "dataFormat": "int64",
            "name": "id",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.id;",
            "baseType": "Long",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int64\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": true,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Id"
          },
          {
            "baseName": "category",
            "complexType": "Category",
            "getter": "getCategory",
            "setter": "setCategory",
            "datatype": "Category",
            "datatypeWithEnum": "Category",
            "name": "category",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.category;",
            "baseType": "Category",
            "example": "null",
            "jsonSchema": "{\n  \"$ref\" : \"#/definitions/Category\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": false,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Category"
          },
          {
            "baseName": "name",
            "getter": "getName",
            "setter": "setName",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "name",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.name;",
            "baseType": "String",
            "example": "doggie",
            "jsonSchema": "{\n  \"type\" : \"string\",\n  \"example\" : \"doggie\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": true,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Name"
          },
          {
            "baseName": "photoUrls",
            "getter": "getPhotoUrls",
            "setter": "setPhotoUrls",
            "datatype": "List<String>",
            "datatypeWithEnum": "List<String>",
            "name": "photoUrls",
            "defaultValue": "new ArrayList<String>()",
            "defaultValueWithParam": " = data.photoUrls;",
            "baseType": "List",
            "containerType": "array",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"array\",\n  \"xml\" : {\n    \"name\" : \"photoUrl\",\n    \"wrapped\" : true\n  },\n  \"items\" : {\n    \"type\" : \"string\"\n  }\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": true,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": true,
            "isNotContainer": false,
            "isString": false,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": true,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "items": {
              "baseName": "photoUrls",
              "getter": "getPhotoUrls",
              "setter": "setPhotoUrls",
              "datatype": "String",
              "datatypeWithEnum": "String",
              "name": "photoUrls",
              "defaultValue": "null",
              "defaultValueWithParam": " = data.photoUrls;",
              "baseType": "String",
              "example": "null",
              "jsonSchema": "{\n  \"type\" : \"string\"\n}",
              "exclusiveMinimum": false,
              "exclusiveMaximum": false,
              "hasMore": false,
              "required": false,
              "secondaryParam": false,
              "hasMoreNonReadOnly": false,
              "isPrimitiveType": true,
              "isContainer": false,
              "isNotContainer": true,
              "isString": true,
              "isInteger": false,
              "isLong": false,
              "isFloat": false,
              "isDouble": false,
              "isByteArray": false,
              "isBinary": false,
              "isFile": false,
              "isBoolean": false,
              "isDate": false,
              "isDateTime": false,
              "isListContainer": false,
              "isMapContainer": false,
              "isEnum": false,
              "isReadOnly": false,
              "vendorExtensions": {},
              "hasValidation": false,
              "isInherited": false,
              "nameInCamelCase": "PhotoUrls"
            },
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "PhotoUrls"
          },
          {
            "baseName": "tags",
            "complexType": "Tag",
            "getter": "getTags",
            "setter": "setTags",
            "datatype": "List<Tag>",
            "datatypeWithEnum": "List<Tag>",
            "name": "tags",
            "defaultValue": "new ArrayList<Tag>()",
            "defaultValueWithParam": " = data.tags;",
            "baseType": "List",
            "containerType": "array",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"array\",\n  \"xml\" : {\n    \"name\" : \"tag\",\n    \"wrapped\" : true\n  },\n  \"items\" : {\n    \"$ref\" : \"#/definitions/Tag\"\n  }\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": false,
            "isContainer": true,
            "isNotContainer": false,
            "isString": false,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": true,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "items": {
              "baseName": "tags",
              "complexType": "Tag",
              "getter": "getTags",
              "setter": "setTags",
              "datatype": "Tag",
              "datatypeWithEnum": "Tag",
              "name": "tags",
              "defaultValue": "null",
              "defaultValueWithParam": " = data.tags;",
              "baseType": "Tag",
              "example": "null",
              "jsonSchema": "{\n  \"$ref\" : \"#/definitions/Tag\"\n}",
              "exclusiveMinimum": false,
              "exclusiveMaximum": false,
              "hasMore": false,
              "required": false,
              "secondaryParam": false,
              "hasMoreNonReadOnly": false,
              "isPrimitiveType": false,
              "isContainer": false,
              "isNotContainer": true,
              "isString": false,
              "isInteger": false,
              "isLong": false,
              "isFloat": false,
              "isDouble": false,
              "isByteArray": false,
              "isBinary": false,
              "isFile": false,
              "isBoolean": false,
              "isDate": false,
              "isDateTime": false,
              "isListContainer": false,
              "isMapContainer": false,
              "isEnum": false,
              "isReadOnly": false,
              "vendorExtensions": {
              },
              "hasValidation": false,
              "isInherited": false,
              "nameInCamelCase": "Tags"
            },
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Tags"
          },
          {
            "baseName": "status",
            "getter": "getStatus",
            "setter": "setStatus",
            "description": "pet status in the store",
            "datatype": "String",
            "datatypeWithEnum": "StatusEnum",
            "name": "status",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.status;",
            "baseType": "String",
            "unescapedDescription": "pet status in the store",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\",\n  \"description\" : \"pet status in the store\",\n  \"enum\" : [ \"available\", \"pending\", \"sold\" ]\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": false,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": false,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": true,
            "isReadOnly": false,
            "_enum": [
              "available",
              "pending",
              "sold"
            ],
            "allowableValues": {
              "values": [
                "available",
                "pending",
                "sold"
              ],
              "enumVars": [
                {
                  "name": "AVAILABLE",
                  "value": "\"available\""
                },
                {
                  "name": "PENDING",
                  "value": "\"pending\""
                },
                {
                  "name": "SOLD",
                  "value": "\"sold\""
                }
              ]
            },
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Status",
            "enumName": "StatusEnum"
          }
        ],
        "parentVars": [],
        "mandatory": [
          "name",
          "photoUrls"
        ],
        "allMandatory": [
          "name",
          "photoUrls"
        ],
        "imports": [
          "ArrayList",
          "Category",
          "JsonInclude",
          "JsonProperty",
          "JsonValue",
          "List",
          "Tag"
        ],
        "hasVars": true,
        "emptyVars": false,
        "hasMoreModels": true,
        "hasEnums": true,
        "isEnum": false,
        "hasRequired": true,
        "isArrayModel": false,
        "hasChildren": false,
        "hasOnlyReadOnly": false,
        "vendorExtensions": {}
      }
    },
    {
      "importPath": "io.swagger.server.api.model.Tag",
      "model": {
        "name": "Tag",
        "classname": "Tag",
        "classVarName": "tag",
        "modelJson": "{\n  \"type\" : \"object\",\n  \"properties\" : {\n    \"id\" : {\n      \"type\" : \"integer\",\n      \"format\" : \"int64\"\n    },\n    \"name\" : {\n      \"type\" : \"string\"\n    }\n  },\n  \"xml\" : {\n    \"name\" : \"Tag\"\n  }\n}",
        "dataType": "Object",
        "classFilename": "Tag",
        "vars": [
          {
            "baseName": "id",
            "getter": "getId",
            "setter": "setId",
            "datatype": "Long",
            "datatypeWithEnum": "Long",
            "dataFormat": "int64",
            "name": "id",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.id;",
            "baseType": "Long",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int64\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": true,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Id"
          },
          {
            "baseName": "name",
            "getter": "getName",
            "setter": "setName",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "name",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.name;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": false,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": false,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Name"
          }
        ],
        "requiredVars": [],
        "optionalVars": [
          {
            "baseName": "id",
            "getter": "getId",
            "setter": "setId",
            "datatype": "Long",
            "datatypeWithEnum": "Long",
            "dataFormat": "int64",
            "name": "id",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.id;",
            "baseType": "Long",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int64\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": true,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Id"
          },
          {
            "baseName": "name",
            "getter": "getName",
            "setter": "setName",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "name",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.name;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": false,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": false,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Name"
          }
        ],
        "readOnlyVars": [],
        "readWriteVars": [
          {
            "baseName": "id",
            "getter": "getId",
            "setter": "setId",
            "datatype": "Long",
            "datatypeWithEnum": "Long",
            "dataFormat": "int64",
            "name": "id",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.id;",
            "baseType": "Long",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int64\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": true,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Id"
          },
          {
            "baseName": "name",
            "getter": "getName",
            "setter": "setName",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "name",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.name;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": false,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": false,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Name"
          }
        ],
        "allVars": [
          {
            "baseName": "id",
            "getter": "getId",
            "setter": "setId",
            "datatype": "Long",
            "datatypeWithEnum": "Long",
            "dataFormat": "int64",
            "name": "id",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.id;",
            "baseType": "Long",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int64\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": true,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": true,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": false,
            "isInteger": false,
            "isLong": true,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {
            },
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Id"
          },
          {
            "baseName": "name",
            "getter": "getName",
            "setter": "setName",
            "datatype": "String",
            "datatypeWithEnum": "String",
            "name": "name",
            "defaultValue": "null",
            "defaultValueWithParam": " = data.name;",
            "baseType": "String",
            "example": "null",
            "jsonSchema": "{\n  \"type\" : \"string\"\n}",
            "exclusiveMinimum": false,
            "exclusiveMaximum": false,
            "hasMore": false,
            "required": false,
            "secondaryParam": false,
            "hasMoreNonReadOnly": false,
            "isPrimitiveType": true,
            "isContainer": false,
            "isNotContainer": true,
            "isString": true,
            "isInteger": false,
            "isLong": false,
            "isFloat": false,
            "isDouble": false,
            "isByteArray": false,
            "isBinary": false,
            "isFile": false,
            "isBoolean": false,
            "isDate": false,
            "isDateTime": false,
            "isListContainer": false,
            "isMapContainer": false,
            "isEnum": false,
            "isReadOnly": false,
            "vendorExtensions": {},
            "hasValidation": false,
            "isInherited": false,
            "nameInCamelCase": "Name"
          }
        ],
        "parentVars": [],
        "mandatory": [],
        "allMandatory": [],
        "imports": [
          "JsonInclude",
          "JsonProperty"
        ],
        "hasVars": true,
        "emptyVars": false,
        "hasMoreModels": false,
        "hasEnums": false,
        "isEnum": false,
        "hasRequired": false,
        "isArrayModel": false,
        "hasChildren": false,
        "hasOnlyReadOnly": false,
        "vendorExtensions": {}
      }
    }
  ],
  "fullJavaUtil": false,
  "appDescription": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
  "contextPath": "/v2",
  "hasAuthMethods": true,
  "javaUtilPrefix": "",
  "licenseName": "Unlicense",
  "releaseNote": "Minor update",
  "version": "1.0.0",
  "apiInfo": {
    "apis": [
      {
        "appVersion": "1.0.0",
        "generatorClass": "com.github.phiz71.vertx.swagger.codegen.JavaVertXServerGenerator",
        "supportJava6": false,
        "sortParamsByRequiredFlag": true,
        "groupId": "io.swagger",
        "hasMore": "true",
        "invokerPackage": "io.swagger.server.api",
        "classVarName": "pet",
        "developerEmail": "apiteam@swagger.io",
        "jdbcPersistence": "true",
        "hasImport": true,
        "generateModelTests": true,
        "generateApiTests": true,
        "classFilename": "PetApi",
        "serializableModel": false,
        "infoUrl": null,
        "inputSpec": "petStore.json",
        "artifactUrl": "https://github.com/swagger-api/swagger-codegen",
        "developerOrganization": "Swagger",
        "baseName": "Pet",
        "package": "io.swagger.server.api.verticle",
        "imports": [
          {
            "import": "java.io.File"
          },
          {
            "import": "io.swagger.server.api.MainApiException"
          },
          {
            "import": "io.swagger.server.api.model.ModelApiResponse"
          },
          {
            "import": "io.swagger.server.api.model.Pet"
          }
        ],
        "fullJavaUtil": false,
        "contextPath": "/v2",
        "appDescription": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
        "javaUtilPrefix": "",
        "licenseName": "Unlicense",
        "releaseNote": "Minor update",
        "version": "1.0.0",
        "fullSwagger": "{\n  \"swagger\" : \"2.0\",\n  \"info\" : {\n    \"description\" : \"This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.\",\n    \"version\" : \"1.0.0\",\n    \"title\" : \"Swagger Petstore\",\n    \"termsOfService\" : \"http://swagger.io/terms/\",\n    \"contact\" : {\n      \"email\" : \"apiteam@swagger.io\"\n    },\n    \"license\" : {\n      \"name\" : \"Apache 2.0\",\n      \"url\" : \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n    }\n  },\n  \"host\" : \"petstore.swagger.io\",\n  \"basePath\" : \"/v2\",\n  \"tags\" : [ {\n    \"name\" : \"pet\",\n    \"description\" : \"Everything about your Pets\",\n    \"externalDocs\" : {\n      \"description\" : \"Find out more\",\n      \"url\" : \"http://swagger.io\"\n    }\n  }, {\n    \"name\" : \"store\",\n    \"description\" : \"Access to Petstore orders\"\n  }, {\n    \"name\" : \"user\",\n    \"description\" : \"Operations about user\",\n    \"externalDocs\" : {\n      \"description\" : \"Find out more about our store\",\n      \"url\" : \"http://swagger.io\"\n    }\n  } ],\n  \"schemes\" : [ \"http\" ],\n  \"paths\" : {\n    \"/uuid/{uuidParam}\" : {\n      \"get\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"test uuid\",\n        \"operationId\" : \"uuid\",\n        \"parameters\" : [ {\n          \"name\" : \"uuidParam\",\n          \"in\" : \"path\",\n          \"required\" : true,\n          \"type\" : \"string\",\n          \"format\" : \"uuid\"\n        } ],\n        \"responses\" : {\n          \"default\" : {\n            \"description\" : \"OK\",\n            \"schema\" : {\n              \"type\" : \"object\",\n              \"properties\" : {\n                \"uuid\" : {\n                  \"type\" : \"string\",\n                  \"format\" : \"uuid\"\n                }\n              }\n            }\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/pet\" : {\n      \"post\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Add a new pet to the store\",\n        \"description\" : \"\",\n        \"operationId\" : \"addPet\",\n        \"consumes\" : [ \"application/json\", \"application/xml\" ],\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"Pet object that needs to be added to the store\",\n          \"required\" : true,\n          \"schema\" : {\n            \"$ref\" : \"#/definitions/Pet\"\n          }\n        } ],\n        \"responses\" : {\n          \"405\" : {\n            \"description\" : \"Invalid input\"\n          }\n        },\n        \"security\" : [ {\n          \"petstore_auth\" : [ \"write:pets\", \"read:pets\" ]\n        } ],\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      },\n      \"put\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Update an existing pet\",\n        \"description\" : \"\",\n        \"operationId\" : \"updatePet\",\n        \"consumes\" : [ \"application/json\", \"application/xml\" ],\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"Pet object that needs to be added to the store\",\n          \"required\" : true,\n          \"schema\" : {\n            \"$ref\" : \"#/definitions/Pet\"\n          }\n        } ],\n        \"responses\" : {\n          \"400\" : {\n            \"description\" : \"Invalid ID supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"Pet not found\"\n          },\n          \"405\" : {\n            \"description\" : \"Validation exception\"\n          }\n        },\n        \"security\" : [ {\n          \"petstore_auth\" : [ \"write:pets\", \"read:pets\" ]\n        } ],\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/pet/findByStatus\" : {\n      \"get\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Finds Pets by status\",\n        \"description\" : \"Multiple status values can be provided with comma separated strings\",\n        \"operationId\" : \"findPetsByStatus\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"status\",\n          \"in\" : \"query\",\n          \"description\" : \"Status values that need to be considered for filter\",\n          \"required\" : true,\n          \"type\" : \"array\",\n          \"items\" : {\n            \"type\" : \"string\",\n            \"default\" : \"available\",\n            \"enum\" : [ \"available\", \"pending\", \"sold\" ]\n          },\n          \"collectionFormat\" : \"multi\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"type\" : \"array\",\n              \"items\" : {\n                \"$ref\" : \"#/definitions/Pet\"\n              }\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid status value\"\n          }\n        },\n        \"security\" : [ {\n          \"petstore_auth\" : [ \"write:pets\", \"read:pets\" ]\n        } ],\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/pet/findByTags\" : {\n      \"get\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Finds Pets by tags\",\n        \"description\" : \"Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\",\n        \"operationId\" : \"findPetsByTags\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"tags\",\n          \"in\" : \"query\",\n          \"description\" : \"Tags to filter by\",\n          \"required\" : true,\n          \"type\" : \"array\",\n          \"items\" : {\n            \"type\" : \"string\"\n          },\n          \"collectionFormat\" : \"multi\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"type\" : \"array\",\n              \"items\" : {\n                \"$ref\" : \"#/definitions/Pet\"\n              }\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid tag value\"\n          }\n        },\n        \"security\" : [ {\n          \"petstore_auth\" : [ \"write:pets\", \"read:pets\" ]\n        } ],\n        \"deprecated\" : true,\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/pet/{petId}\" : {\n      \"get\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Find pet by ID\",\n        \"description\" : \"Returns a single pet\",\n        \"operationId\" : \"getPetById\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"petId\",\n          \"in\" : \"path\",\n          \"description\" : \"ID of pet to return\",\n          \"required\" : true,\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"$ref\" : \"#/definitions/Pet\"\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid ID supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"Pet not found\"\n          }\n        },\n        \"security\" : [ {\n          \"api_key\" : [ ]\n        } ],\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      },\n      \"post\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Updates a pet in the store with form data\",\n        \"description\" : \"\",\n        \"operationId\" : \"updatePetWithForm\",\n        \"consumes\" : [ \"application/x-www-form-urlencoded\" ],\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"petId\",\n          \"in\" : \"path\",\n          \"description\" : \"ID of pet that needs to be updated\",\n          \"required\" : true,\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        }, {\n          \"name\" : \"name\",\n          \"in\" : \"formData\",\n          \"description\" : \"Updated name of the pet\",\n          \"required\" : false,\n          \"type\" : \"string\"\n        }, {\n          \"name\" : \"status\",\n          \"in\" : \"formData\",\n          \"description\" : \"Updated status of the pet\",\n          \"required\" : false,\n          \"type\" : \"string\"\n        } ],\n        \"responses\" : {\n          \"405\" : {\n            \"description\" : \"Invalid input\"\n          }\n        },\n        \"security\" : [ {\n          \"petstore_auth\" : [ \"write:pets\", \"read:pets\" ]\n        } ],\n        \"x-contentType\" : \"application/x-www-form-urlencoded\",\n        \"x-accepts\" : \"application/json\"\n      },\n      \"delete\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Deletes a pet\",\n        \"description\" : \"\",\n        \"operationId\" : \"deletePet\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"api_key\",\n          \"in\" : \"header\",\n          \"required\" : false,\n          \"type\" : \"string\"\n        }, {\n          \"name\" : \"petId\",\n          \"in\" : \"path\",\n          \"description\" : \"Pet id to delete\",\n          \"required\" : true,\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        } ],\n        \"responses\" : {\n          \"400\" : {\n            \"description\" : \"Invalid ID supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"Pet not found\"\n          }\n        },\n        \"security\" : [ {\n          \"petstore_auth\" : [ \"write:pets\", \"read:pets\" ]\n        } ],\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/pet/{petId}/uploadImage\" : {\n      \"post\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"uploads an image\",\n        \"description\" : \"\",\n        \"operationId\" : \"uploadFile\",\n        \"consumes\" : [ \"multipart/form-data\" ],\n        \"produces\" : [ \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"petId\",\n          \"in\" : \"path\",\n          \"description\" : \"ID of pet to update\",\n          \"required\" : true,\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        }, {\n          \"name\" : \"additionalMetadata\",\n          \"in\" : \"formData\",\n          \"description\" : \"Additional data to pass to server\",\n          \"required\" : false,\n          \"type\" : \"string\"\n        }, {\n          \"name\" : \"file\",\n          \"in\" : \"formData\",\n          \"description\" : \"file to upload\",\n          \"required\" : false,\n          \"type\" : \"file\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"$ref\" : \"#/definitions/ApiResponse\"\n            }\n          }\n        },\n        \"security\" : [ {\n          \"petstore_auth\" : [ \"write:pets\", \"read:pets\" ]\n        } ],\n        \"x-contentType\" : \"multipart/form-data\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/store/inventory\" : {\n      \"get\" : {\n        \"tags\" : [ \"store\" ],\n        \"summary\" : \"Returns pet inventories by status\",\n        \"description\" : \"Returns a map of status codes to quantities\",\n        \"operationId\" : \"getInventory\",\n        \"produces\" : [ \"application/json\" ],\n        \"parameters\" : [ ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"type\" : \"object\",\n              \"additionalProperties\" : {\n                \"type\" : \"integer\",\n                \"format\" : \"int32\"\n              }\n            }\n          }\n        },\n        \"security\" : [ {\n          \"api_key\" : [ ]\n        } ],\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/store/order\" : {\n      \"post\" : {\n        \"tags\" : [ \"store\" ],\n        \"summary\" : \"Place an order for a pet\",\n        \"description\" : \"\",\n        \"operationId\" : \"placeOrder\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"order placed for purchasing the pet\",\n          \"required\" : true,\n          \"schema\" : {\n            \"$ref\" : \"#/definitions/Order\"\n          }\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"$ref\" : \"#/definitions/Order\"\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid Order\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/store/order/{orderId}\" : {\n      \"get\" : {\n        \"tags\" : [ \"store\" ],\n        \"summary\" : \"Find purchase order by ID\",\n        \"description\" : \"For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions\",\n        \"operationId\" : \"getOrderById\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"OrderId\",\n          \"in\" : \"path\",\n          \"description\" : \"ID of pet that needs to be fetched\",\n          \"required\" : true,\n          \"type\" : \"integer\",\n          \"maximum\" : 10.0,\n          \"minimum\" : 1.0,\n          \"format\" : \"int64\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"$ref\" : \"#/definitions/Order\"\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid ID supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"Order not found\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      },\n      \"delete\" : {\n        \"tags\" : [ \"store\" ],\n        \"summary\" : \"Delete purchase order by ID\",\n        \"description\" : \"For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\",\n        \"operationId\" : \"deleteOrder\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"orderId\",\n          \"in\" : \"path\",\n          \"description\" : \"ID of the order that needs to be deleted\",\n          \"required\" : true,\n          \"type\" : \"integer\",\n          \"minimum\" : 1.0,\n          \"format\" : \"int64\"\n        } ],\n        \"responses\" : {\n          \"400\" : {\n            \"description\" : \"Invalid ID supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"Order not found\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/user\" : {\n      \"post\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Create user\",\n        \"description\" : \"This can only be done by the logged in user.\",\n        \"operationId\" : \"createUser\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"Created user object\",\n          \"required\" : true,\n          \"schema\" : {\n            \"$ref\" : \"#/definitions/User\"\n          }\n        } ],\n        \"responses\" : {\n          \"default\" : {\n            \"description\" : \"successful operation\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/user/createWithArray\" : {\n      \"post\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Creates list of users with given input array\",\n        \"description\" : \"\",\n        \"operationId\" : \"createUsersWithArrayInput\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"List of user object\",\n          \"required\" : true,\n          \"schema\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/definitions/User\"\n            }\n          }\n        } ],\n        \"responses\" : {\n          \"default\" : {\n            \"description\" : \"successful operation\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/user/createWithList\" : {\n      \"post\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Creates list of users with given input array\",\n        \"description\" : \"\",\n        \"operationId\" : \"createUsersWithListInput\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"List of user object\",\n          \"required\" : true,\n          \"schema\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/definitions/User\"\n            }\n          }\n        } ],\n        \"responses\" : {\n          \"default\" : {\n            \"description\" : \"successful operation\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/user/login\" : {\n      \"get\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Logs user into the system\",\n        \"description\" : \"\",\n        \"operationId\" : \"loginUser\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"username\",\n          \"in\" : \"query\",\n          \"description\" : \"The user name for login\",\n          \"required\" : true,\n          \"type\" : \"string\"\n        }, {\n          \"name\" : \"password\",\n          \"in\" : \"query\",\n          \"description\" : \"The password for login in clear text\",\n          \"required\" : true,\n          \"type\" : \"string\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"type\" : \"string\"\n            },\n            \"headers\" : {\n              \"X-Rate-Limit\" : {\n                \"type\" : \"integer\",\n                \"format\" : \"int32\",\n                \"description\" : \"calls per hour allowed by the user\"\n              },\n              \"X-Expires-After\" : {\n                \"type\" : \"string\",\n                \"format\" : \"date-time\",\n                \"description\" : \"date in UTC when token expires\"\n              }\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid username/password supplied\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/user/logout\" : {\n      \"get\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Logs out current logged in user session\",\n        \"description\" : \"\",\n        \"operationId\" : \"logoutUser\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ ],\n        \"responses\" : {\n          \"default\" : {\n            \"description\" : \"successful operation\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/user/{username}\" : {\n      \"get\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Get user by user name\",\n        \"description\" : \"\",\n        \"operationId\" : \"getUserByName\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"username\",\n          \"in\" : \"path\",\n          \"description\" : \"The name that needs to be fetched. Use user1 for testing. \",\n          \"required\" : true,\n          \"type\" : \"string\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"$ref\" : \"#/definitions/User\"\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid username supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"User not found\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      },\n      \"put\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Updated user\",\n        \"description\" : \"This can only be done by the logged in user.\",\n        \"operationId\" : \"updateUser\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"username\",\n          \"in\" : \"path\",\n          \"description\" : \"name that need to be updated\",\n          \"required\" : true,\n          \"type\" : \"string\"\n        }, {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"Updated user object\",\n          \"required\" : true,\n          \"schema\" : {\n            \"$ref\" : \"#/definitions/User\"\n          }\n        } ],\n        \"responses\" : {\n          \"400\" : {\n            \"description\" : \"Invalid user supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"User not found\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      },\n      \"delete\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Delete user\",\n        \"description\" : \"This can only be done by the logged in user.\",\n        \"operationId\" : \"deleteUser\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"username\",\n          \"in\" : \"path\",\n          \"description\" : \"The name that needs to be deleted\",\n          \"required\" : true,\n          \"type\" : \"string\"\n        } ],\n        \"responses\" : {\n          \"400\" : {\n            \"description\" : \"Invalid username supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"User not found\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    }\n  },\n  \"securityDefinitions\" : {\n    \"petstore_auth\" : {\n      \"type\" : \"oauth2\",\n      \"authorizationUrl\" : \"http://petstore.swagger.io/oauth/dialog\",\n      \"flow\" : \"implicit\",\n      \"scopes\" : {\n        \"write:pets\" : \"modify pets in your account\",\n        \"read:pets\" : \"read your pets\"\n      }\n    },\n    \"api_key\" : {\n      \"type\" : \"apiKey\",\n      \"name\" : \"api_key\",\n      \"in\" : \"header\"\n    }\n  },\n  \"definitions\" : {\n    \"Order\" : {\n      \"type\" : \"object\",\n      \"properties\" : {\n        \"id\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        },\n        \"petId\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        },\n        \"quantity\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int32\"\n        },\n        \"shipDate\" : {\n          \"type\" : \"string\",\n          \"format\" : \"date-time\"\n        },\n        \"status\" : {\n          \"type\" : \"string\",\n          \"description\" : \"Order Status\",\n          \"enum\" : [ \"placed\", \"approved\", \"delivered\" ]\n        },\n        \"complete\" : {\n          \"type\" : \"boolean\",\n          \"default\" : false\n        }\n      },\n      \"xml\" : {\n        \"name\" : \"Order\"\n      }\n    },\n    \"Category\" : {\n      \"type\" : \"object\",\n      \"properties\" : {\n        \"id\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        },\n        \"name\" : {\n          \"type\" : \"string\"\n        }\n      },\n      \"description\" : \"some description\",\n      \"xml\" : {\n        \"name\" : \"Category\"\n      }\n    },\n    \"User\" : {\n      \"type\" : \"object\",\n      \"properties\" : {\n        \"id\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        },\n        \"username\" : {\n          \"type\" : \"string\"\n        },\n        \"firstName\" : {\n          \"type\" : \"string\"\n        },\n        \"lastName\" : {\n          \"type\" : \"string\"\n        },\n        \"email\" : {\n          \"type\" : \"string\"\n        },\n        \"password\" : {\n          \"type\" : \"string\"\n        },\n        \"phone\" : {\n          \"type\" : \"string\"\n        },\n        \"userStatus\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int32\",\n          \"description\" : \"User Status\"\n        }\n      },\n      \"xml\" : {\n        \"name\" : \"User\"\n      }\n    },\n    \"Tag\" : {\n      \"type\" : \"object\",\n      \"properties\" : {\n        \"id\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        },\n        \"name\" : {\n          \"type\" : \"string\"\n        }\n      },\n      \"xml\" : {\n        \"name\" : \"Tag\"\n      }\n    },\n    \"Pet\" : {\n      \"type\" : \"object\",\n      \"required\" : [ \"name\", \"photoUrls\" ],\n      \"properties\" : {\n        \"id\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        },\n        \"category\" : {\n          \"$ref\" : \"#/definitions/Category\"\n        },\n        \"name\" : {\n          \"type\" : \"string\",\n          \"example\" : \"doggie\"\n        },\n        \"photoUrls\" : {\n          \"type\" : \"array\",\n          \"xml\" : {\n            \"name\" : \"photoUrl\",\n            \"wrapped\" : true\n          },\n          \"items\" : {\n            \"type\" : \"string\"\n          }\n        },\n        \"tags\" : {\n          \"type\" : \"array\",\n          \"xml\" : {\n            \"name\" : \"tag\",\n            \"wrapped\" : true\n          },\n          \"items\" : {\n            \"$ref\" : \"#/definitions/Tag\"\n          }\n        },\n        \"status\" : {\n          \"type\" : \"string\",\n          \"description\" : \"pet status in the store\",\n          \"enum\" : [ \"available\", \"pending\", \"sold\" ]\n        }\n      },\n      \"xml\" : {\n        \"name\" : \"Pet\"\n      }\n    },\n    \"ApiResponse\" : {\n      \"type\" : \"object\",\n      \"properties\" : {\n        \"code\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int32\"\n        },\n        \"type\" : {\n          \"type\" : \"string\"\n        },\n        \"message\" : {\n          \"type\" : \"string\"\n        }\n      }\n    }\n  },\n  \"externalDocs\" : {\n    \"description\" : \"Find out more about Swagger\",\n    \"url\" : \"http://swagger.io\"\n  }\n}",
        "modelDocPath": "docs/",
        "scmDeveloperConnection": "scm:git:git@github.com:swagger-api/swagger-codegen.git",
        "vertxSwaggerRouterVersion": "1.4.1-SNAPSHOT",
        "importPath": "io.swagger.server.api.verticle.Pet",
        "licenseUrl": "http://www.apache.org/licenses/LICENSE-2.0.html",
        "modelPackage": "io.swagger.server.api.model",
        "apiDocPath": "docs/",
        "licenseInfo": "Apache 2.0",
        "serverPort": "8080",
        "basePathWithoutHost": "/v2",
        "developerOrganizationUrl": "http://swagger.io",
        "operations": {
          "classname": "PetApi",
          "operation": [
            {
              "responseHeaders": [],
              "hasAuthMethods": true,
              "hasConsumes": true,
              "hasProduces": true,
              "hasParams": true,
              "hasOptionalParams": false,
              "returnTypeIsPrimitive": false,
              "returnSimpleType": false,
              "subresourceOperation": false,
              "isMapContainer": false,
              "isListContainer": false,
              "isMultipart": false,
              "hasMore": true,
              "isResponseBinary": false,
              "isResponseFile": false,
              "hasReference": false,
              "isRestfulIndex": false,
              "isRestfulShow": false,
              "isRestfulCreate": false,
              "isRestfulUpdate": false,
              "isRestfulDestroy": false,
              "isRestful": false,
              "path": "/pet",
              "operationId": "addPet",
              "httpMethod": "post",
              "summary": "Add a new pet to the store",
              "unescapedNotes": "",
              "notes": "",
              "baseName": "Pet",
              "consumes": [
                {
                  "hasMore": "true",
                  "mediaType": "application/json"
                },
                {
                  "hasMore": null,
                  "mediaType": "application/xml"
                }
              ],
              "produces": [
                {
                  "hasMore": "true",
                  "mediaType": "application/xml"
                },
                {
                  "hasMore": null,
                  "mediaType": "application/json"
                }
              ],
              "bodyParam": {
                "isFormParam": false,
                "isQueryParam": false,
                "isPathParam": false,
                "isHeaderParam": false,
                "isCookieParam": false,
                "isBodyParam": true,
                "hasMore": false,
                "isContainer": false,
                "secondaryParam": false,
                "isCollectionFormatMulti": false,
                "isPrimitiveType": false,
                "baseName": "body",
                "paramName": "body",
                "dataType": "Pet",
                "description": "Pet object that needs to be added to the store",
                "unescapedDescription": "Pet object that needs to be added to the store",
                "baseType": "Pet",
                "example": "new Pet()",
                "jsonSchema": "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"Pet object that needs to be added to the store\",\n  \"required\" : true,\n  \"schema\" : {\n    \"$ref\" : \"#/definitions/Pet\"\n  }\n}",
                "isString": false,
                "isInteger": false,
                "isLong": false,
                "isFloat": false,
                "isDouble": false,
                "isByteArray": false,
                "isBinary": false,
                "isBoolean": false,
                "isDate": false,
                "isDateTime": false,
                "isListContainer": false,
                "isMapContainer": false,
                "isFile": false,
                "notFile": false,
                "isEnum": false,
                "vendorExtensions": {},
                "hasValidation": false,
                "required": true,
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "uniqueItems": false
              },
              "allParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": true,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": false,
                  "baseName": "body",
                  "paramName": "body",
                  "dataType": "Pet",
                  "description": "Pet object that needs to be added to the store",
                  "unescapedDescription": "Pet object that needs to be added to the store",
                  "baseType": "Pet",
                  "example": "new Pet()",
                  "jsonSchema": "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"Pet object that needs to be added to the store\",\n  \"required\" : true,\n  \"schema\" : {\n    \"$ref\" : \"#/definitions/Pet\"\n  }\n}",
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "bodyParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": true,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": false,
                  "baseName": "body",
                  "paramName": "body",
                  "dataType": "Pet",
                  "description": "Pet object that needs to be added to the store",
                  "unescapedDescription": "Pet object that needs to be added to the store",
                  "baseType": "Pet",
                  "example": "new Pet()",
                  "jsonSchema": "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"Pet object that needs to be added to the store\",\n  \"required\" : true,\n  \"schema\" : {\n    \"$ref\" : \"#/definitions/Pet\"\n  }\n}",
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "pathParams": [],
              "queryParams": [],
              "headerParams": [],
              "formParams": [],
              "authMethods": [
                {
                  "name": "petstore_auth",
                  "type": "oauth2",
                  "hasMore": false,
                  "isBasic": false,
                  "isOAuth": true,
                  "isApiKey": false,
                  "isKeyInQuery": false,
                  "isKeyInHeader": false,
                  "flow": "implicit",
                  "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
                  "scopes": [
                    {
                      "scope": "write:pets",
                      "hasMore": "true",
                      "description": "modify pets in your account"
                    },
                    {
                      "scope": "read:pets",
                      "hasMore": null,
                      "description": "read your pets"
                    }
                  ],
                  "isCode": false,
                  "isPassword": false,
                  "isApplication": false,
                  "isImplicit": true
                }
              ],
              "tags": [
                "Pet"
              ],
              "responses": [
                {
                  "headers": [],
                  "code": "405",
                  "message": "Invalid input",
                  "hasMore": false,
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": false,
                  "simpleType": true,
                  "primitiveType": true,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "jsonSchema": "{\n  \"description\" : \"Invalid input\"\n}",
                  "vendorExtensions": {
                  }
                }
              ],
              "imports": [
                "MainApiException",
                "Pet"
              ],
              "vendorExtensions": {
                "x-contentType": "application/json",
                "x-accepts": "application/json",
                "x-serviceId": "addPet",
                "x-serviceIduC": "ADDPET",
                "x-serviceId-varName": "ADDPET_SERVICE_ID",
                "x-serviceId-SQL": "INSERT INTO TABLE_NAME",
                "x-serviceId-Query-Method": "updateWithParams"
              },
              "nickname": "addPet",
              "operationIdLowerCase": "addpet",
              "hasBodyParam": true,
              "hasQueryParams": false,
              "hasHeaderParams": false,
              "hasFormParams": false,
              "hasExamples": false,
              "hasPathParams": false,
              "restfulShow": false,
              "restfulIndex": false,
              "restfulCreate": false,
              "restfulUpdate": false,
              "restfulDestroy": false,
              "restful": false
            },
            {
              "responseHeaders": [],
              "hasAuthMethods": true,
              "hasConsumes": false,
              "hasProduces": true,
              "hasParams": true,
              "hasOptionalParams": true,
              "returnTypeIsPrimitive": false,
              "returnSimpleType": false,
              "subresourceOperation": false,
              "isMapContainer": false,
              "isListContainer": false,
              "isMultipart": false,
              "hasMore": true,
              "isResponseBinary": false,
              "isResponseFile": false,
              "hasReference": false,
              "isRestfulIndex": false,
              "isRestfulShow": false,
              "isRestfulCreate": false,
              "isRestfulUpdate": false,
              "isRestfulDestroy": false,
              "isRestful": false,
              "path": "/pet/:petId",
              "operationId": "deletePet",
              "httpMethod": "delete",
              "summary": "Deletes a pet",
              "unescapedNotes": "",
              "notes": "",
              "baseName": "Pet",
              "produces": [
                {
                  "hasMore": "true",
                  "mediaType": "application/xml"
                },
                {
                  "hasMore": null,
                  "mediaType": "application/json"
                }
              ],
              "allParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": true,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": true,
                  "baseName": "petId",
                  "paramName": "petId",
                  "dataType": "Long",
                  "dataFormat": "int64",
                  "description": "Pet id to delete",
                  "unescapedDescription": "Pet id to delete",
                  "example": "789L",
                  "jsonSchema": "{\n  \"name\" : \"petId\",\n  \"in\" : \"path\",\n  \"description\" : \"Pet id to delete\",\n  \"required\" : true,\n  \"type\" : \"integer\",\n  \"format\" : \"int64\"\n}",
                  "isString": false,
                  "isInteger": false,
                  "isLong": true,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                },
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isHeaderParam": true,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": true,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": true,
                  "baseName": "api_key",
                  "paramName": "apiKey",
                  "dataType": "String",
                  "example": "\"apiKey_example\"",
                  "jsonSchema": "{\n  \"name\" : \"api_key\",\n  \"in\" : \"header\",\n  \"required\" : false,\n  \"type\" : \"string\"\n}",
                  "isString": true,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": false,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "bodyParams": [],
              "pathParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": false,
                  "baseName": "petId",
                  "paramName": "petId",
                  "dataType": "Long",
                  "dataFormat": "int64",
                  "description": "Pet id to delete",
                  "unescapedDescription": "Pet id to delete",
                  "example": "789L",
                  "jsonSchema": "{\n  \"name\" : \"petId\",\n  \"in\" : \"path\",\n  \"description\" : \"Pet id to delete\",\n  \"required\" : true,\n  \"type\" : \"integer\",\n  \"format\" : \"int64\"\n}",
                  "isString": false,
                  "isInteger": false,
                  "isLong": true,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "queryParams": [],
              "headerParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isHeaderParam": true,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": false,
                  "baseName": "api_key",
                  "paramName": "apiKey",
                  "dataType": "String",
                  "example": "\"apiKey_example\"",
                  "jsonSchema": "{\n  \"name\" : \"api_key\",\n  \"in\" : \"header\",\n  \"required\" : false,\n  \"type\" : \"string\"\n}",
                  "isString": true,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {
                  },
                  "hasValidation": false,
                  "required": false,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "formParams": [],
              "authMethods": [
                {
                  "name": "petstore_auth",
                  "type": "oauth2",
                  "hasMore": false,
                  "isBasic": false,
                  "isOAuth": true,
                  "isApiKey": false,
                  "isKeyInQuery": false,
                  "isKeyInHeader": false,
                  "flow": "implicit",
                  "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
                  "scopes": [
                    {
                      "scope": "write:pets",
                      "hasMore": "true",
                      "description": "modify pets in your account"
                    },
                    {
                      "scope": "read:pets",
                      "hasMore": null,
                      "description": "read your pets"
                    }
                  ],
                  "isCode": false,
                  "isPassword": false,
                  "isApplication": false,
                  "isImplicit": true
                }
              ],
              "tags": [
                "Pet"
              ],
              "responses": [
                {
                  "headers": [],
                  "code": "400",
                  "message": "Invalid ID supplied",
                  "hasMore": true,
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": false,
                  "simpleType": true,
                  "primitiveType": true,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "jsonSchema": "{\n  \"description\" : \"Invalid ID supplied\"\n}",
                  "vendorExtensions": {
                  }
                },
                {
                  "headers": [],
                  "code": "404",
                  "message": "Pet not found",
                  "hasMore": false,
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": false,
                  "simpleType": true,
                  "primitiveType": true,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "jsonSchema": "{\n  \"description\" : \"Pet not found\"\n}",
                  "vendorExtensions": {
                  }
                }
              ],
              "imports": [
                "MainApiException"
              ],
              "vendorExtensions": {
                "x-contentType": "application/json",
                "x-accepts": "application/json",
                "x-serviceId": "deletePet",
                "x-serviceIduC": "DELETEPET",
                "x-serviceId-varName": "DELETEPET_SERVICE_ID",
                "x-serviceId-SQL": "DELETE FROM TABLE_NAME WHERE petId = ?",
                "x-serviceId-Query-Method": "updateWithParams"
              },
              "nickname": "deletePet",
              "operationIdLowerCase": "deletepet",
              "hasBodyParam": false,
              "hasQueryParams": false,
              "hasHeaderParams": true,
              "hasFormParams": false,
              "hasExamples": false,
              "hasPathParams": true,
              "restfulShow": false,
              "restfulIndex": false,
              "restfulCreate": false,
              "restfulUpdate": false,
              "restfulDestroy": false,
              "restful": false
            },
            {
              "responseHeaders": [],
              "hasAuthMethods": true,
              "hasConsumes": false,
              "hasProduces": true,
              "hasParams": true,
              "hasOptionalParams": false,
              "returnTypeIsPrimitive": false,
              "returnSimpleType": false,
              "subresourceOperation": false,
              "isMapContainer": false,
              "isListContainer": true,
              "isMultipart": false,
              "hasMore": true,
              "isResponseBinary": false,
              "isResponseFile": false,
              "hasReference": true,
              "isRestfulIndex": false,
              "isRestfulShow": false,
              "isRestfulCreate": false,
              "isRestfulUpdate": false,
              "isRestfulDestroy": false,
              "isRestful": false,
              "path": "/pet/findByStatus",
              "operationId": "findPetsByStatus",
              "returnType": "List<Pet>",
              "httpMethod": "get",
              "returnBaseType": "Pet",
              "returnContainer": "array",
              "summary": "Finds Pets by status",
              "unescapedNotes": "Multiple status values can be provided with comma separated strings",
              "notes": "Multiple status values can be provided with comma separated strings",
              "baseName": "Pet",
              "defaultResponse": "new ArrayList<Pet>()",
              "produces": [
                {
                  "hasMore": "true",
                  "mediaType": "application/xml"
                },
                {
                  "hasMore": null,
                  "mediaType": "application/json"
                }
              ],
              "allParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": true,
                  "isPathParam": false,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": false,
                  "isContainer": true,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": true,
                  "isPrimitiveType": false,
                  "baseName": "status",
                  "paramName": "status",
                  "dataType": "List<String>",
                  "datatypeWithEnum": "List<StatusEnum>",
                  "collectionFormat": "multi",
                  "description": "Status values that need to be considered for filter",
                  "unescapedDescription": "Status values that need to be considered for filter",
                  "baseType": "String",
                  "enumName": "StatusEnum",
                  "example": "Arrays.asList(\"status_example\")",
                  "jsonSchema": "{\n  \"name\" : \"status\",\n  \"in\" : \"query\",\n  \"description\" : \"Status values that need to be considered for filter\",\n  \"required\" : true,\n  \"type\" : \"array\",\n  \"items\" : {\n    \"type\" : \"string\",\n    \"default\" : \"available\",\n    \"enum\" : [ \"available\", \"pending\", \"sold\" ]\n  },\n  \"collectionFormat\" : \"multi\"\n}",
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": true,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": true,
                  "allowableValues": {
                    "values": [
                      "available",
                      "pending",
                      "sold"
                    ],
                    "enumVars": [
                      {
                        "name": "AVAILABLE",
                        "value": "\"available\""
                      },
                      {
                        "name": "PENDING",
                        "value": "\"pending\""
                      },
                      {
                        "name": "SOLD",
                        "value": "\"sold\""
                      }
                    ]
                  },
                  "items": {
                    "baseName": "status",
                    "getter": "getStatus",
                    "setter": "setStatus",
                    "datatype": "String",
                    "datatypeWithEnum": "StatusEnum",
                    "name": "status",
                    "defaultValue": "available",
                    "defaultValueWithParam": " = data.status;",
                    "baseType": "String",
                    "example": "null",
                    "jsonSchema": "{\n  \"type\" : \"string\",\n  \"default\" : \"available\",\n  \"enum\" : [ \"available\", \"pending\", \"sold\" ]\n}",
                    "exclusiveMinimum": false,
                    "exclusiveMaximum": false,
                    "hasMore": false,
                    "required": false,
                    "secondaryParam": false,
                    "hasMoreNonReadOnly": false,
                    "isPrimitiveType": true,
                    "isContainer": false,
                    "isNotContainer": true,
                    "isString": true,
                    "isInteger": false,
                    "isLong": false,
                    "isFloat": false,
                    "isDouble": false,
                    "isByteArray": false,
                    "isBinary": false,
                    "isFile": false,
                    "isBoolean": false,
                    "isDate": false,
                    "isDateTime": false,
                    "isListContainer": false,
                    "isMapContainer": false,
                    "isEnum": true,
                    "isReadOnly": false,
                    "_enum": [
                      "available",
                      "pending",
                      "sold"
                    ],
                    "allowableValues": {
                      "values": [
                        "available",
                        "pending",
                        "sold"
                      ],
                      "enumVars": [
                        {
                          "name": "AVAILABLE",
                          "value": "\"available\""
                        },
                        {
                          "name": "PENDING",
                          "value": "\"pending\""
                        },
                        {
                          "name": "SOLD",
                          "value": "\"sold\""
                        }
                      ]
                    },
                    "vendorExtensions": {},
                    "hasValidation": false,
                    "isInherited": false,
                    "nameInCamelCase": "Status",
                    "enumName": "StatusEnum"
                  },
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "bodyParams": [],
              "pathParams": [],
              "queryParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": true,
                  "isPathParam": false,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": false,
                  "isContainer": true,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": true,
                  "isPrimitiveType": false,
                  "baseName": "status",
                  "paramName": "status",
                  "dataType": "List<String>",
                  "datatypeWithEnum": "List<StatusEnum>",
                  "collectionFormat": "multi",
                  "description": "Status values that need to be considered for filter",
                  "unescapedDescription": "Status values that need to be considered for filter",
                  "baseType": "String",
                  "enumName": "StatusEnum",
                  "example": "Arrays.asList(\"status_example\")",
                  "jsonSchema": "{\n  \"name\" : \"status\",\n  \"in\" : \"query\",\n  \"description\" : \"Status values that need to be considered for filter\",\n  \"required\" : true,\n  \"type\" : \"array\",\n  \"items\" : {\n    \"type\" : \"string\",\n    \"default\" : \"available\",\n    \"enum\" : [ \"available\", \"pending\", \"sold\" ]\n  },\n  \"collectionFormat\" : \"multi\"\n}",
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": true,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": true,
                  "allowableValues": {
                    "enumVars": [
                      {
                        "name": "AVAILABLE",
                        "value": "\"available\""
                      },
                      {
                        "name": "PENDING",
                        "value": "\"pending\""
                      },
                      {
                        "name": "SOLD",
                        "value": "\"sold\""
                      }
                    ],
                    "values": [
                      "available",
                      "pending",
                      "sold"
                    ]
                  },
                  "items": {
                    "baseName": "status",
                    "getter": "getStatus",
                    "setter": "setStatus",
                    "datatype": "String",
                    "datatypeWithEnum": "StatusEnum",
                    "name": "status",
                    "defaultValue": "available",
                    "defaultValueWithParam": " = data.status;",
                    "baseType": "String",
                    "example": "null",
                    "jsonSchema": "{\n  \"type\" : \"string\",\n  \"default\" : \"available\",\n  \"enum\" : [ \"available\", \"pending\", \"sold\" ]\n}",
                    "exclusiveMinimum": false,
                    "exclusiveMaximum": false,
                    "hasMore": false,
                    "required": false,
                    "secondaryParam": false,
                    "hasMoreNonReadOnly": false,
                    "isPrimitiveType": true,
                    "isContainer": false,
                    "isNotContainer": true,
                    "isString": true,
                    "isInteger": false,
                    "isLong": false,
                    "isFloat": false,
                    "isDouble": false,
                    "isByteArray": false,
                    "isBinary": false,
                    "isFile": false,
                    "isBoolean": false,
                    "isDate": false,
                    "isDateTime": false,
                    "isListContainer": false,
                    "isMapContainer": false,
                    "isEnum": true,
                    "isReadOnly": false,
                    "_enum": [
                      "available",
                      "pending",
                      "sold"
                    ],
                    "allowableValues": {
                      "values": [
                        "available",
                        "pending",
                        "sold"
                      ],
                      "enumVars": [
                        {
                          "name": "AVAILABLE",
                          "value": "\"available\""
                        },
                        {
                          "name": "PENDING",
                          "value": "\"pending\""
                        },
                        {
                          "name": "SOLD",
                          "value": "\"sold\""
                        }
                      ]
                    },
                    "vendorExtensions": {},
                    "hasValidation": false,
                    "isInherited": false,
                    "nameInCamelCase": "Status",
                    "enumName": "StatusEnum"
                  },
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "headerParams": [],
              "formParams": [],
              "authMethods": [
                {
                  "name": "petstore_auth",
                  "type": "oauth2",
                  "hasMore": false,
                  "isBasic": false,
                  "isOAuth": true,
                  "isApiKey": false,
                  "isKeyInQuery": false,
                  "isKeyInHeader": false,
                  "flow": "implicit",
                  "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
                  "scopes": [
                    {
                      "scope": "write:pets",
                      "hasMore": "true",
                      "description": "modify pets in your account"
                    },
                    {
                      "scope": "read:pets",
                      "hasMore": null,
                      "description": "read your pets"
                    }
                  ],
                  "isCode": false,
                  "isPassword": false,
                  "isApplication": false,
                  "isImplicit": true
                }
              ],
              "tags": [
                "Pet"
              ],
              "responses": [
                {
                  "headers": [],
                  "code": "200",
                  "message": "successful operation",
                  "hasMore": true,
                  "dataType": "List<Pet>",
                  "baseType": "Pet",
                  "containerType": "array",
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": true,
                  "simpleType": false,
                  "primitiveType": false,
                  "isMapContainer": false,
                  "isListContainer": true,
                  "isBinary": false,
                  "isFile": false,
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Pet"
                    }
                  },
                  "jsonSchema": "{\n  \"description\" : \"successful operation\",\n  \"schema\" : {\n    \"type\" : \"array\",\n    \"items\" : {\n      \"$ref\" : \"#/definitions/Pet\"\n    }\n  }\n}",
                  "vendorExtensions": {}
                },
                {
                  "headers": [],
                  "code": "400",
                  "message": "Invalid status value",
                  "hasMore": false,
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": false,
                  "simpleType": true,
                  "primitiveType": true,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "jsonSchema": "{\n  \"description\" : \"Invalid status value\"\n}",
                  "vendorExtensions": {
                  }
                }
              ],
              "imports": [
                "MainApiException",
                "Pet"
              ],
              "examples": [
                {
                  "contentType": "application/xml",
                  "example": "<Pet>\n  <id>123456789</id>\n  <name>doggie</name>\n  <photoUrls>\n    <photoUrls>aeiou</photoUrls>\n  </photoUrls>\n  <tags>\n  </tags>\n  <status>aeiou</status>\n</Pet>"
                },
                {
                  "contentType": "application/json",
                  "example": "[ {\n  \"photoUrls\" : [ \"aeiou\" ],\n  \"name\" : \"doggie\",\n  \"id\" : 123456789,\n  \"category\" : {\n    \"name\" : \"aeiou\",\n    \"id\" : 123456789\n  },\n  \"tags\" : [ {\n    \"name\" : \"aeiou\",\n    \"id\" : 123456789\n  } ],\n  \"status\" : \"aeiou\"\n} ]"
                }
              ],
              "vendorExtensions": {
                "x-contentType": "application/json",
                "x-accepts": "application/json",
                "x-serviceId": "findPetsByStatus",
                "x-serviceIduC": "FINDPETSBYSTATUS",
                "x-serviceId-varName": "FINDPETSBYSTATUS_SERVICE_ID",
                "x-serviceId-SQL": "SELECT * FROM TABLE_NAME WHERE status = ?",
                "x-serviceId-Query-Method": "queryWithParams"
              },
              "nickname": "findPetsByStatus",
              "operationIdLowerCase": "findpetsbystatus",
              "hasBodyParam": false,
              "hasQueryParams": true,
              "hasHeaderParams": false,
              "hasFormParams": false,
              "hasExamples": true,
              "hasPathParams": false,
              "restfulShow": false,
              "restfulIndex": false,
              "restfulCreate": false,
              "restfulUpdate": false,
              "restfulDestroy": false,
              "restful": false
            },
            {
              "responseHeaders": [],
              "hasAuthMethods": true,
              "hasConsumes": false,
              "hasProduces": true,
              "hasParams": true,
              "hasOptionalParams": false,
              "returnTypeIsPrimitive": false,
              "returnSimpleType": false,
              "subresourceOperation": false,
              "isMapContainer": false,
              "isListContainer": true,
              "isMultipart": false,
              "hasMore": true,
              "isResponseBinary": false,
              "isResponseFile": false,
              "hasReference": true,
              "isRestfulIndex": false,
              "isRestfulShow": false,
              "isRestfulCreate": false,
              "isRestfulUpdate": false,
              "isRestfulDestroy": false,
              "isRestful": false,
              "path": "/pet/findByTags",
              "operationId": "findPetsByTags",
              "returnType": "List<Pet>",
              "httpMethod": "get",
              "returnBaseType": "Pet",
              "returnContainer": "array",
              "summary": "Finds Pets by tags",
              "unescapedNotes": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
              "notes": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
              "baseName": "Pet",
              "defaultResponse": "new ArrayList<Pet>()",
              "produces": [
                {
                  "hasMore": "true",
                  "mediaType": "application/xml"
                },
                {
                  "hasMore": null,
                  "mediaType": "application/json"
                }
              ],
              "allParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": true,
                  "isPathParam": false,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": false,
                  "isContainer": true,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": true,
                  "isPrimitiveType": false,
                  "baseName": "tags",
                  "paramName": "tags",
                  "dataType": "List<String>",
                  "collectionFormat": "multi",
                  "description": "Tags to filter by",
                  "unescapedDescription": "Tags to filter by",
                  "baseType": "String",
                  "example": "Arrays.asList(\"tags_example\")",
                  "jsonSchema": "{\n  \"name\" : \"tags\",\n  \"in\" : \"query\",\n  \"description\" : \"Tags to filter by\",\n  \"required\" : true,\n  \"type\" : \"array\",\n  \"items\" : {\n    \"type\" : \"string\"\n  },\n  \"collectionFormat\" : \"multi\"\n}",
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": true,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "items": {
                    "baseName": "inner",
                    "getter": "getInner",
                    "setter": "setInner",
                    "datatype": "String",
                    "datatypeWithEnum": "String",
                    "name": "inner",
                    "defaultValue": "null",
                    "defaultValueWithParam": " = data.inner;",
                    "baseType": "String",
                    "example": "null",
                    "jsonSchema": "{\n  \"type\" : \"string\"\n}",
                    "exclusiveMinimum": false,
                    "exclusiveMaximum": false,
                    "hasMore": false,
                    "required": false,
                    "secondaryParam": false,
                    "hasMoreNonReadOnly": false,
                    "isPrimitiveType": true,
                    "isContainer": false,
                    "isNotContainer": true,
                    "isString": true,
                    "isInteger": false,
                    "isLong": false,
                    "isFloat": false,
                    "isDouble": false,
                    "isByteArray": false,
                    "isBinary": false,
                    "isFile": false,
                    "isBoolean": false,
                    "isDate": false,
                    "isDateTime": false,
                    "isListContainer": false,
                    "isMapContainer": false,
                    "isEnum": false,
                    "isReadOnly": false,
                    "vendorExtensions": {},
                    "hasValidation": false,
                    "isInherited": false,
                    "nameInCamelCase": "Inner"
                  },
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "bodyParams": [],
              "pathParams": [],
              "queryParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": true,
                  "isPathParam": false,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": false,
                  "isContainer": true,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": true,
                  "isPrimitiveType": false,
                  "baseName": "tags",
                  "paramName": "tags",
                  "dataType": "List<String>",
                  "collectionFormat": "multi",
                  "description": "Tags to filter by",
                  "unescapedDescription": "Tags to filter by",
                  "baseType": "String",
                  "example": "Arrays.asList(\"tags_example\")",
                  "jsonSchema": "{\n  \"name\" : \"tags\",\n  \"in\" : \"query\",\n  \"description\" : \"Tags to filter by\",\n  \"required\" : true,\n  \"type\" : \"array\",\n  \"items\" : {\n    \"type\" : \"string\"\n  },\n  \"collectionFormat\" : \"multi\"\n}",
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": true,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "items": {
                    "baseName": "inner",
                    "getter": "getInner",
                    "setter": "setInner",
                    "datatype": "String",
                    "datatypeWithEnum": "String",
                    "name": "inner",
                    "defaultValue": "null",
                    "defaultValueWithParam": " = data.inner;",
                    "baseType": "String",
                    "example": "null",
                    "jsonSchema": "{\n  \"type\" : \"string\"\n}",
                    "exclusiveMinimum": false,
                    "exclusiveMaximum": false,
                    "hasMore": false,
                    "required": false,
                    "secondaryParam": false,
                    "hasMoreNonReadOnly": false,
                    "isPrimitiveType": true,
                    "isContainer": false,
                    "isNotContainer": true,
                    "isString": true,
                    "isInteger": false,
                    "isLong": false,
                    "isFloat": false,
                    "isDouble": false,
                    "isByteArray": false,
                    "isBinary": false,
                    "isFile": false,
                    "isBoolean": false,
                    "isDate": false,
                    "isDateTime": false,
                    "isListContainer": false,
                    "isMapContainer": false,
                    "isEnum": false,
                    "isReadOnly": false,
                    "vendorExtensions": {},
                    "hasValidation": false,
                    "isInherited": false,
                    "nameInCamelCase": "Inner"
                  },
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "headerParams": [],
              "formParams": [],
              "authMethods": [
                {
                  "name": "petstore_auth",
                  "type": "oauth2",
                  "hasMore": false,
                  "isBasic": false,
                  "isOAuth": true,
                  "isApiKey": false,
                  "isKeyInQuery": false,
                  "isKeyInHeader": false,
                  "flow": "implicit",
                  "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
                  "scopes": [
                    {
                      "scope": "write:pets",
                      "hasMore": "true",
                      "description": "modify pets in your account"
                    },
                    {
                      "scope": "read:pets",
                      "hasMore": null,
                      "description": "read your pets"
                    }
                  ],
                  "isCode": false,
                  "isPassword": false,
                  "isApplication": false,
                  "isImplicit": true
                }
              ],
              "tags": [
                "Pet"
              ],
              "responses": [
                {
                  "headers": [],
                  "code": "200",
                  "message": "successful operation",
                  "hasMore": true,
                  "dataType": "List<Pet>",
                  "baseType": "Pet",
                  "containerType": "array",
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": true,
                  "simpleType": false,
                  "primitiveType": false,
                  "isMapContainer": false,
                  "isListContainer": true,
                  "isBinary": false,
                  "isFile": false,
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Pet"
                    }
                  },
                  "jsonSchema": "{\n  \"description\" : \"successful operation\",\n  \"schema\" : {\n    \"type\" : \"array\",\n    \"items\" : {\n      \"$ref\" : \"#/definitions/Pet\"\n    }\n  }\n}",
                  "vendorExtensions": {}
                },
                {
                  "headers": [],
                  "code": "400",
                  "message": "Invalid tag value",
                  "hasMore": false,
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": false,
                  "simpleType": true,
                  "primitiveType": true,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "jsonSchema": "{\n  \"description\" : \"Invalid tag value\"\n}",
                  "vendorExtensions": {
                  }
                }
              ],
              "imports": [
                "MainApiException",
                "Pet"
              ],
              "examples": [
                {
                  "contentType": "application/xml",
                  "example": "<Pet>\n  <id>123456789</id>\n  <name>doggie</name>\n  <photoUrls>\n    <photoUrls>aeiou</photoUrls>\n  </photoUrls>\n  <tags>\n  </tags>\n  <status>aeiou</status>\n</Pet>"
                },
                {
                  "contentType": "application/json",
                  "example": "[ {\n  \"photoUrls\" : [ \"aeiou\" ],\n  \"name\" : \"doggie\",\n  \"id\" : 123456789,\n  \"category\" : {\n    \"name\" : \"aeiou\",\n    \"id\" : 123456789\n  },\n  \"tags\" : [ {\n    \"name\" : \"aeiou\",\n    \"id\" : 123456789\n  } ],\n  \"status\" : \"aeiou\"\n} ]"
                }
              ],
              "vendorExtensions": {
                "x-contentType": "application/json",
                "x-accepts": "application/json",
                "x-serviceId": "findPetsByTags",
                "x-serviceIduC": "FINDPETSBYTAGS",
                "x-serviceId-varName": "FINDPETSBYTAGS_SERVICE_ID",
                "x-serviceId-SQL": "SELECT * FROM TABLE_NAME WHERE tags = ?",
                "x-serviceId-Query-Method": "queryWithParams"
              },
              "nickname": "findPetsByTags",
              "operationIdLowerCase": "findpetsbytags",
              "hasBodyParam": false,
              "hasQueryParams": true,
              "hasHeaderParams": false,
              "hasFormParams": false,
              "hasExamples": true,
              "hasPathParams": false,
              "restfulShow": false,
              "restfulIndex": false,
              "restfulCreate": false,
              "restfulUpdate": false,
              "restfulDestroy": false,
              "restful": false
            },
            {
              "responseHeaders": [],
              "hasAuthMethods": true,
              "hasConsumes": false,
              "hasProduces": true,
              "hasParams": true,
              "hasOptionalParams": false,
              "returnTypeIsPrimitive": false,
              "returnSimpleType": true,
              "subresourceOperation": false,
              "isMapContainer": false,
              "isListContainer": false,
              "isMultipart": false,
              "hasMore": true,
              "isResponseBinary": false,
              "isResponseFile": false,
              "hasReference": true,
              "isRestfulIndex": false,
              "isRestfulShow": false,
              "isRestfulCreate": false,
              "isRestfulUpdate": false,
              "isRestfulDestroy": false,
              "isRestful": false,
              "path": "/pet/:petId",
              "operationId": "getPetById",
              "returnType": "Pet",
              "httpMethod": "get",
              "returnBaseType": "Pet",
              "summary": "Find pet by ID",
              "unescapedNotes": "Returns a single pet",
              "notes": "Returns a single pet",
              "baseName": "Pet",
              "defaultResponse": "null",
              "produces": [
                {
                  "hasMore": "true",
                  "mediaType": "application/xml"
                },
                {
                  "hasMore": null,
                  "mediaType": "application/json"
                }
              ],
              "allParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": true,
                  "baseName": "petId",
                  "paramName": "petId",
                  "dataType": "Long",
                  "dataFormat": "int64",
                  "description": "ID of pet to return",
                  "unescapedDescription": "ID of pet to return",
                  "example": "789L",
                  "jsonSchema": "{\n  \"name\" : \"petId\",\n  \"in\" : \"path\",\n  \"description\" : \"ID of pet to return\",\n  \"required\" : true,\n  \"type\" : \"integer\",\n  \"format\" : \"int64\"\n}",
                  "isString": false,
                  "isInteger": false,
                  "isLong": true,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "bodyParams": [],
              "pathParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": false,
                  "baseName": "petId",
                  "paramName": "petId",
                  "dataType": "Long",
                  "dataFormat": "int64",
                  "description": "ID of pet to return",
                  "unescapedDescription": "ID of pet to return",
                  "example": "789L",
                  "jsonSchema": "{\n  \"name\" : \"petId\",\n  \"in\" : \"path\",\n  \"description\" : \"ID of pet to return\",\n  \"required\" : true,\n  \"type\" : \"integer\",\n  \"format\" : \"int64\"\n}",
                  "isString": false,
                  "isInteger": false,
                  "isLong": true,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "queryParams": [],
              "headerParams": [],
              "formParams": [],
              "authMethods": [
                {
                  "name": "api_key",
                  "type": "apiKey",
                  "hasMore": false,
                  "isBasic": false,
                  "isOAuth": false,
                  "isApiKey": true,
                  "keyParamName": "api_key",
                  "isKeyInQuery": false,
                  "isKeyInHeader": true,
                  "isCode": false,
                  "isPassword": false,
                  "isApplication": false,
                  "isImplicit": false
                }
              ],
              "tags": [
                "Pet"
              ],
              "responses": [
                {
                  "headers": [],
                  "code": "200",
                  "message": "successful operation",
                  "hasMore": true,
                  "dataType": "Pet",
                  "baseType": "Pet",
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": true,
                  "simpleType": true,
                  "primitiveType": false,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "schema": {
                    "$ref": "#/definitions/Pet"
                  },
                  "jsonSchema": "{\n  \"description\" : \"successful operation\",\n  \"schema\" : {\n    \"$ref\" : \"#/definitions/Pet\"\n  }\n}",
                  "vendorExtensions": {
                  }
                },
                {
                  "headers": [],
                  "code": "400",
                  "message": "Invalid ID supplied",
                  "hasMore": true,
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": false,
                  "simpleType": true,
                  "primitiveType": true,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "jsonSchema": "{\n  \"description\" : \"Invalid ID supplied\"\n}",
                  "vendorExtensions": {
                  }
                },
                {
                  "headers": [],
                  "code": "404",
                  "message": "Pet not found",
                  "hasMore": false,
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": false,
                  "simpleType": true,
                  "primitiveType": true,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "jsonSchema": "{\n  \"description\" : \"Pet not found\"\n}",
                  "vendorExtensions": {
                  }
                }
              ],
              "imports": [
                "MainApiException",
                "Pet"
              ],
              "examples": [
                {
                  "contentType": "application/xml",
                  "example": "<Pet>\n  <id>123456789</id>\n  <name>doggie</name>\n  <photoUrls>\n    <photoUrls>aeiou</photoUrls>\n  </photoUrls>\n  <tags>\n  </tags>\n  <status>aeiou</status>\n</Pet>"
                },
                {
                  "contentType": "application/json",
                  "example": "{\n  \"photoUrls\" : [ \"aeiou\" ],\n  \"name\" : \"doggie\",\n  \"id\" : 123456789,\n  \"category\" : {\n    \"name\" : \"aeiou\",\n    \"id\" : 123456789\n  },\n  \"tags\" : [ {\n    \"name\" : \"aeiou\",\n    \"id\" : 123456789\n  } ],\n  \"status\" : \"aeiou\"\n}"
                }
              ],
              "vendorExtensions": {
                "x-contentType": "application/json",
                "x-accepts": "application/json",
                "x-serviceId": "getPetById",
                "x-serviceIduC": "GETPETBYID",
                "x-serviceId-varName": "GETPETBYID_SERVICE_ID",
                "x-serviceId-SQL": "SELECT * FROM TABLE_NAME WHERE petId = ?",
                "x-serviceId-Query-Method": "queryWithParams"
              },
              "nickname": "getPetById",
              "operationIdLowerCase": "getpetbyid",
              "hasBodyParam": false,
              "hasQueryParams": false,
              "hasHeaderParams": false,
              "hasFormParams": false,
              "hasExamples": true,
              "hasPathParams": true,
              "restfulShow": false,
              "restfulIndex": false,
              "restfulCreate": false,
              "restfulUpdate": false,
              "restfulDestroy": false,
              "restful": false
            },
            {
              "responseHeaders": [],
              "hasAuthMethods": true,
              "hasConsumes": true,
              "hasProduces": true,
              "hasParams": true,
              "hasOptionalParams": false,
              "returnTypeIsPrimitive": false,
              "returnSimpleType": false,
              "subresourceOperation": false,
              "isMapContainer": false,
              "isListContainer": false,
              "isMultipart": false,
              "hasMore": true,
              "isResponseBinary": false,
              "isResponseFile": false,
              "hasReference": false,
              "isRestfulIndex": false,
              "isRestfulShow": false,
              "isRestfulCreate": false,
              "isRestfulUpdate": false,
              "isRestfulDestroy": false,
              "isRestful": false,
              "path": "/pet",
              "operationId": "updatePet",
              "httpMethod": "put",
              "summary": "Update an existing pet",
              "unescapedNotes": "",
              "notes": "",
              "baseName": "Pet",
              "consumes": [
                {
                  "hasMore": "true",
                  "mediaType": "application/json"
                },
                {
                  "hasMore": null,
                  "mediaType": "application/xml"
                }
              ],
              "produces": [
                {
                  "hasMore": "true",
                  "mediaType": "application/xml"
                },
                {
                  "hasMore": null,
                  "mediaType": "application/json"
                }
              ],
              "bodyParam": {
                "isFormParam": false,
                "isQueryParam": false,
                "isPathParam": false,
                "isHeaderParam": false,
                "isCookieParam": false,
                "isBodyParam": true,
                "hasMore": false,
                "isContainer": false,
                "secondaryParam": false,
                "isCollectionFormatMulti": false,
                "isPrimitiveType": false,
                "baseName": "body",
                "paramName": "body",
                "dataType": "Pet",
                "description": "Pet object that needs to be added to the store",
                "unescapedDescription": "Pet object that needs to be added to the store",
                "baseType": "Pet",
                "example": "new Pet()",
                "jsonSchema": "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"Pet object that needs to be added to the store\",\n  \"required\" : true,\n  \"schema\" : {\n    \"$ref\" : \"#/definitions/Pet\"\n  }\n}",
                "isString": false,
                "isInteger": false,
                "isLong": false,
                "isFloat": false,
                "isDouble": false,
                "isByteArray": false,
                "isBinary": false,
                "isBoolean": false,
                "isDate": false,
                "isDateTime": false,
                "isListContainer": false,
                "isMapContainer": false,
                "isFile": false,
                "notFile": false,
                "isEnum": false,
                "vendorExtensions": {},
                "hasValidation": false,
                "required": true,
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "uniqueItems": false
              },
              "allParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": true,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": false,
                  "baseName": "body",
                  "paramName": "body",
                  "dataType": "Pet",
                  "description": "Pet object that needs to be added to the store",
                  "unescapedDescription": "Pet object that needs to be added to the store",
                  "baseType": "Pet",
                  "example": "new Pet()",
                  "jsonSchema": "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"Pet object that needs to be added to the store\",\n  \"required\" : true,\n  \"schema\" : {\n    \"$ref\" : \"#/definitions/Pet\"\n  }\n}",
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "bodyParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": true,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": false,
                  "baseName": "body",
                  "paramName": "body",
                  "dataType": "Pet",
                  "description": "Pet object that needs to be added to the store",
                  "unescapedDescription": "Pet object that needs to be added to the store",
                  "baseType": "Pet",
                  "example": "new Pet()",
                  "jsonSchema": "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"Pet object that needs to be added to the store\",\n  \"required\" : true,\n  \"schema\" : {\n    \"$ref\" : \"#/definitions/Pet\"\n  }\n}",
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "pathParams": [],
              "queryParams": [],
              "headerParams": [],
              "formParams": [],
              "authMethods": [
                {
                  "name": "petstore_auth",
                  "type": "oauth2",
                  "hasMore": false,
                  "isBasic": false,
                  "isOAuth": true,
                  "isApiKey": false,
                  "isKeyInQuery": false,
                  "isKeyInHeader": false,
                  "flow": "implicit",
                  "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
                  "scopes": [
                    {
                      "scope": "write:pets",
                      "hasMore": "true",
                      "description": "modify pets in your account"
                    },
                    {
                      "scope": "read:pets",
                      "hasMore": null,
                      "description": "read your pets"
                    }
                  ],
                  "isCode": false,
                  "isPassword": false,
                  "isApplication": false,
                  "isImplicit": true
                }
              ],
              "tags": [
                "Pet"
              ],
              "responses": [
                {
                  "headers": [],
                  "code": "400",
                  "message": "Invalid ID supplied",
                  "hasMore": true,
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": false,
                  "simpleType": true,
                  "primitiveType": true,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "jsonSchema": "{\n  \"description\" : \"Invalid ID supplied\"\n}",
                  "vendorExtensions": {
                  }
                },
                {
                  "headers": [],
                  "code": "404",
                  "message": "Pet not found",
                  "hasMore": true,
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": false,
                  "simpleType": true,
                  "primitiveType": true,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "jsonSchema": "{\n  \"description\" : \"Pet not found\"\n}",
                  "vendorExtensions": {
                  }
                },
                {
                  "headers": [],
                  "code": "405",
                  "message": "Validation exception",
                  "hasMore": false,
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": false,
                  "simpleType": true,
                  "primitiveType": true,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "jsonSchema": "{\n  \"description\" : \"Validation exception\"\n}",
                  "vendorExtensions": {
                  }
                }
              ],
              "imports": [
                "MainApiException",
                "Pet"
              ],
              "vendorExtensions": {
                "x-contentType": "application/json",
                "x-accepts": "application/json",
                "x-serviceId": "updatePet",
                "x-serviceIduC": "UPDATEPET",
                "x-serviceId-varName": "UPDATEPET_SERVICE_ID",
                "x-serviceId-SQL": "UPDATE TABLE_NAME SET ",
                "x-serviceId-Query-Method": "updateWithParams"
              },
              "nickname": "updatePet",
              "operationIdLowerCase": "updatepet",
              "hasBodyParam": true,
              "hasQueryParams": false,
              "hasHeaderParams": false,
              "hasFormParams": false,
              "hasExamples": false,
              "hasPathParams": false,
              "restfulShow": false,
              "restfulIndex": false,
              "restfulCreate": false,
              "restfulUpdate": false,
              "restfulDestroy": false,
              "restful": false
            },
            {
              "responseHeaders": [],
              "hasAuthMethods": true,
              "hasConsumes": true,
              "hasProduces": true,
              "hasParams": true,
              "hasOptionalParams": true,
              "returnTypeIsPrimitive": false,
              "returnSimpleType": false,
              "subresourceOperation": false,
              "isMapContainer": false,
              "isListContainer": false,
              "isMultipart": false,
              "hasMore": true,
              "isResponseBinary": false,
              "isResponseFile": false,
              "hasReference": false,
              "isRestfulIndex": false,
              "isRestfulShow": false,
              "isRestfulCreate": false,
              "isRestfulUpdate": false,
              "isRestfulDestroy": false,
              "isRestful": false,
              "path": "/pet/:petId",
              "operationId": "updatePetWithForm",
              "httpMethod": "post",
              "summary": "Updates a pet in the store with form data",
              "unescapedNotes": "",
              "notes": "",
              "baseName": "Pet",
              "consumes": [
                {
                  "hasMore": null,
                  "mediaType": "application/x-www-form-urlencoded"
                }
              ],
              "produces": [
                {
                  "hasMore": "true",
                  "mediaType": "application/xml"
                },
                {
                  "hasMore": null,
                  "mediaType": "application/json"
                }
              ],
              "allParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": true,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": true,
                  "baseName": "petId",
                  "paramName": "petId",
                  "dataType": "Long",
                  "dataFormat": "int64",
                  "description": "ID of pet that needs to be updated",
                  "unescapedDescription": "ID of pet that needs to be updated",
                  "example": "789L",
                  "jsonSchema": "{\n  \"name\" : \"petId\",\n  \"in\" : \"path\",\n  \"description\" : \"ID of pet that needs to be updated\",\n  \"required\" : true,\n  \"type\" : \"integer\",\n  \"format\" : \"int64\"\n}",
                  "isString": false,
                  "isInteger": false,
                  "isLong": true,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                },
                {
                  "isFormParam": true,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": true,
                  "isContainer": false,
                  "secondaryParam": true,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": true,
                  "baseName": "name",
                  "paramName": "name",
                  "dataType": "String",
                  "description": "Updated name of the pet",
                  "unescapedDescription": "Updated name of the pet",
                  "example": "\"name_example\"",
                  "jsonSchema": "{\n  \"name\" : \"name\",\n  \"in\" : \"formData\",\n  \"description\" : \"Updated name of the pet\",\n  \"required\" : false,\n  \"type\" : \"string\"\n}",
                  "isString": true,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": true,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": false,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                },
                {
                  "isFormParam": true,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": true,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": true,
                  "baseName": "status",
                  "paramName": "status",
                  "dataType": "String",
                  "description": "Updated status of the pet",
                  "unescapedDescription": "Updated status of the pet",
                  "example": "\"status_example\"",
                  "jsonSchema": "{\n  \"name\" : \"status\",\n  \"in\" : \"formData\",\n  \"description\" : \"Updated status of the pet\",\n  \"required\" : false,\n  \"type\" : \"string\"\n}",
                  "isString": true,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": true,
                  "isEnum": false,
                  "vendorExtensions": {
                  },
                  "hasValidation": false,
                  "required": false,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "bodyParams": [],
              "pathParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": false,
                  "baseName": "petId",
                  "paramName": "petId",
                  "dataType": "Long",
                  "dataFormat": "int64",
                  "description": "ID of pet that needs to be updated",
                  "unescapedDescription": "ID of pet that needs to be updated",
                  "example": "789L",
                  "jsonSchema": "{\n  \"name\" : \"petId\",\n  \"in\" : \"path\",\n  \"description\" : \"ID of pet that needs to be updated\",\n  \"required\" : true,\n  \"type\" : \"integer\",\n  \"format\" : \"int64\"\n}",
                  "isString": false,
                  "isInteger": false,
                  "isLong": true,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "queryParams": [],
              "headerParams": [],
              "formParams": [
                {
                  "isFormParam": true,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": true,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": false,
                  "baseName": "name",
                  "paramName": "name",
                  "dataType": "String",
                  "description": "Updated name of the pet",
                  "unescapedDescription": "Updated name of the pet",
                  "example": "\"name_example\"",
                  "jsonSchema": "{\n  \"name\" : \"name\",\n  \"in\" : \"formData\",\n  \"description\" : \"Updated name of the pet\",\n  \"required\" : false,\n  \"type\" : \"string\"\n}",
                  "isString": true,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": true,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": false,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                },
                {
                  "isFormParam": true,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": true,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": false,
                  "baseName": "status",
                  "paramName": "status",
                  "dataType": "String",
                  "description": "Updated status of the pet",
                  "unescapedDescription": "Updated status of the pet",
                  "example": "\"status_example\"",
                  "jsonSchema": "{\n  \"name\" : \"status\",\n  \"in\" : \"formData\",\n  \"description\" : \"Updated status of the pet\",\n  \"required\" : false,\n  \"type\" : \"string\"\n}",
                  "isString": true,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": true,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": false,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "authMethods": [
                {
                  "name": "petstore_auth",
                  "type": "oauth2",
                  "hasMore": false,
                  "isBasic": false,
                  "isOAuth": true,
                  "isApiKey": false,
                  "isKeyInQuery": false,
                  "isKeyInHeader": false,
                  "flow": "implicit",
                  "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
                  "scopes": [
                    {
                      "scope": "write:pets",
                      "hasMore": "true",
                      "description": "modify pets in your account"
                    },
                    {
                      "scope": "read:pets",
                      "hasMore": null,
                      "description": "read your pets"
                    }
                  ],
                  "isCode": false,
                  "isPassword": false,
                  "isApplication": false,
                  "isImplicit": true
                }
              ],
              "tags": [
                "Pet"
              ],
              "responses": [
                {
                  "headers": [],
                  "code": "405",
                  "message": "Invalid input",
                  "hasMore": false,
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": false,
                  "simpleType": true,
                  "primitiveType": true,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "jsonSchema": "{\n  \"description\" : \"Invalid input\"\n}",
                  "vendorExtensions": {
                  }
                }
              ],
              "imports": [
                "MainApiException"
              ],
              "vendorExtensions": {
                "x-contentType": "application/x-www-form-urlencoded",
                "x-accepts": "application/json",
                "x-serviceId": "updatePetWithForm",
                "x-serviceIduC": "UPDATEPETWITHFORM",
                "x-serviceId-varName": "UPDATEPETWITHFORM_SERVICE_ID",
                "x-serviceId-SQL": "INSERT INTO TABLE_NAME WHERE petId = ?",
                "x-serviceId-Query-Method": "updateWithParams"
              },
              "nickname": "updatePetWithForm",
              "operationIdLowerCase": "updatepetwithform",
              "hasBodyParam": false,
              "hasQueryParams": false,
              "hasHeaderParams": false,
              "hasFormParams": true,
              "hasExamples": false,
              "hasPathParams": true,
              "restfulShow": false,
              "restfulIndex": false,
              "restfulCreate": false,
              "restfulUpdate": false,
              "restfulDestroy": false,
              "restful": false
            },
            {
              "responseHeaders": [],
              "hasAuthMethods": true,
              "hasConsumes": true,
              "hasProduces": true,
              "hasParams": true,
              "hasOptionalParams": true,
              "returnTypeIsPrimitive": false,
              "returnSimpleType": true,
              "subresourceOperation": false,
              "isMapContainer": false,
              "isListContainer": false,
              "isMultipart": false,
              "hasMore": false,
              "isResponseBinary": false,
              "isResponseFile": false,
              "hasReference": false,
              "isRestfulIndex": false,
              "isRestfulShow": false,
              "isRestfulCreate": false,
              "isRestfulUpdate": false,
              "isRestfulDestroy": false,
              "isRestful": false,
              "path": "/pet/:petId/uploadImage",
              "operationId": "uploadFile",
              "returnType": "ModelApiResponse",
              "httpMethod": "post",
              "returnBaseType": "ModelApiResponse",
              "summary": "uploads an image",
              "unescapedNotes": "",
              "notes": "",
              "baseName": "Pet",
              "defaultResponse": "null",
              "consumes": [
                {
                  "hasMore": null,
                  "mediaType": "multipart/form-data"
                }
              ],
              "produces": [
                {
                  "hasMore": null,
                  "mediaType": "application/json"
                }
              ],
              "allParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": true,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": true,
                  "baseName": "petId",
                  "paramName": "petId",
                  "dataType": "Long",
                  "dataFormat": "int64",
                  "description": "ID of pet to update",
                  "unescapedDescription": "ID of pet to update",
                  "example": "789L",
                  "jsonSchema": "{\n  \"name\" : \"petId\",\n  \"in\" : \"path\",\n  \"description\" : \"ID of pet to update\",\n  \"required\" : true,\n  \"type\" : \"integer\",\n  \"format\" : \"int64\"\n}",
                  "isString": false,
                  "isInteger": false,
                  "isLong": true,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                },
                {
                  "isFormParam": true,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": true,
                  "isContainer": false,
                  "secondaryParam": true,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": true,
                  "baseName": "additionalMetadata",
                  "paramName": "additionalMetadata",
                  "dataType": "String",
                  "description": "Additional data to pass to server",
                  "unescapedDescription": "Additional data to pass to server",
                  "example": "\"additionalMetadata_example\"",
                  "jsonSchema": "{\n  \"name\" : \"additionalMetadata\",\n  \"in\" : \"formData\",\n  \"description\" : \"Additional data to pass to server\",\n  \"required\" : false,\n  \"type\" : \"string\"\n}",
                  "isString": true,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": true,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": false,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                },
                {
                  "isFormParam": true,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": true,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": false,
                  "baseName": "file",
                  "paramName": "file",
                  "dataType": "File",
                  "description": "file to upload",
                  "unescapedDescription": "file to upload",
                  "example": "new File(\"/path/to/file.txt\")",
                  "jsonSchema": "{\n  \"name\" : \"file\",\n  \"in\" : \"formData\",\n  \"description\" : \"file to upload\",\n  \"required\" : false,\n  \"type\" : \"file\"\n}",
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": true,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {
                  },
                  "hasValidation": false,
                  "required": false,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "bodyParams": [],
              "pathParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": false,
                  "baseName": "petId",
                  "paramName": "petId",
                  "dataType": "Long",
                  "dataFormat": "int64",
                  "description": "ID of pet to update",
                  "unescapedDescription": "ID of pet to update",
                  "example": "789L",
                  "jsonSchema": "{\n  \"name\" : \"petId\",\n  \"in\" : \"path\",\n  \"description\" : \"ID of pet to update\",\n  \"required\" : true,\n  \"type\" : \"integer\",\n  \"format\" : \"int64\"\n}",
                  "isString": false,
                  "isInteger": false,
                  "isLong": true,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "queryParams": [],
              "headerParams": [],
              "formParams": [
                {
                  "isFormParam": true,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": true,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": false,
                  "baseName": "additionalMetadata",
                  "paramName": "additionalMetadata",
                  "dataType": "String",
                  "description": "Additional data to pass to server",
                  "unescapedDescription": "Additional data to pass to server",
                  "example": "\"additionalMetadata_example\"",
                  "jsonSchema": "{\n  \"name\" : \"additionalMetadata\",\n  \"in\" : \"formData\",\n  \"description\" : \"Additional data to pass to server\",\n  \"required\" : false,\n  \"type\" : \"string\"\n}",
                  "isString": true,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": true,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": false,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                },
                {
                  "isFormParam": true,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": true,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": false,
                  "baseName": "file",
                  "paramName": "file",
                  "dataType": "File",
                  "description": "file to upload",
                  "unescapedDescription": "file to upload",
                  "example": "new File(\"/path/to/file.txt\")",
                  "jsonSchema": "{\n  \"name\" : \"file\",\n  \"in\" : \"formData\",\n  \"description\" : \"file to upload\",\n  \"required\" : false,\n  \"type\" : \"file\"\n}",
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": true,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": false,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "authMethods": [
                {
                  "name": "petstore_auth",
                  "type": "oauth2",
                  "hasMore": false,
                  "isBasic": false,
                  "isOAuth": true,
                  "isApiKey": false,
                  "isKeyInQuery": false,
                  "isKeyInHeader": false,
                  "flow": "implicit",
                  "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
                  "scopes": [
                    {
                      "scope": "write:pets",
                      "hasMore": "true",
                      "description": "modify pets in your account"
                    },
                    {
                      "scope": "read:pets",
                      "hasMore": null,
                      "description": "read your pets"
                    }
                  ],
                  "isCode": false,
                  "isPassword": false,
                  "isApplication": false,
                  "isImplicit": true
                }
              ],
              "tags": [
                "Pet"
              ],
              "responses": [
                {
                  "headers": [],
                  "code": "200",
                  "message": "successful operation",
                  "hasMore": false,
                  "dataType": "ModelApiResponse",
                  "baseType": "ModelApiResponse",
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": true,
                  "simpleType": true,
                  "primitiveType": false,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "schema": {
                    "$ref": "#/definitions/ApiResponse"
                  },
                  "jsonSchema": "{\n  \"description\" : \"successful operation\",\n  \"schema\" : {\n    \"$ref\" : \"#/definitions/ApiResponse\"\n  }\n}",
                  "vendorExtensions": {
                  }
                }
              ],
              "imports": [
                "ModelApiResponse",
                "MainApiException",
                "File"
              ],
              "examples": [
                {
                  "contentType": "application/json",
                  "example": "{\n  \"code\" : 123,\n  \"type\" : \"aeiou\",\n  \"message\" : \"aeiou\"\n}"
                }
              ],
              "vendorExtensions": {
                "x-contentType": "multipart/form-data",
                "x-accepts": "application/json",
                "x-serviceId": "uploadFile",
                "x-serviceIduC": "UPLOADFILE",
                "x-serviceId-varName": "UPLOADFILE_SERVICE_ID",
                "x-serviceId-SQL": "INSERT INTO TABLE_NAME WHERE petId = ?",
                "x-serviceId-Query-Method": "updateWithParams"
              },
              "nickname": "uploadFile",
              "operationIdLowerCase": "uploadfile",
              "hasBodyParam": false,
              "hasQueryParams": false,
              "hasHeaderParams": false,
              "hasFormParams": true,
              "hasExamples": true,
              "hasPathParams": true,
              "restfulShow": false,
              "restfulIndex": false,
              "restfulCreate": false,
              "restfulUpdate": false,
              "restfulDestroy": false,
              "restful": false
            }
          ],
          "pathPrefix": "pet"
        },
        "java8": "true",
        "artifactId": "petstore-vertx-server",
        "artifactDescription": "Swagger Java",
        "developerName": "Swagger",
        "scmConnection": "scm:git:git@github.com:swagger-api/swagger-codegen.git",
        "unescapedAppDescription": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
        "artifactVersion": "1.0.0-SNAPSHOT",
        "appName": "Swagger Petstore",
        "termsOfService": "http://swagger.io/terms/",
        "scmUrl": "https://github.com/swagger-api/swagger-codegen",
        "basePath": "http://petstore.swagger.io/v2",
        "classname": "PetApi",
        "gitRepoId": "GIT_REPO_ID",
        "generatedDate": "2017-08-31T22:50:32.533+03:00",
        "infoEmail": "apiteam@swagger.io",
        "gitUserId": "GIT_USER_ID"
      },
      {
        "appVersion": "1.0.0",
        "generatorClass": "com.github.phiz71.vertx.swagger.codegen.JavaVertXServerGenerator",
        "supportJava6": false,
        "sortParamsByRequiredFlag": true,
        "groupId": "io.swagger",
        "hasMore": "true",
        "invokerPackage": "io.swagger.server.api",
        "classVarName": "store",
        "developerEmail": "apiteam@swagger.io",
        "jdbcPersistence": "true",
        "hasImport": true,
        "generateModelTests": true,
        "generateApiTests": true,
        "classFilename": "StoreApi",
        "serializableModel": false,
        "infoUrl": null,
        "inputSpec": "petStore.json",
        "artifactUrl": "https://github.com/swagger-api/swagger-codegen",
        "developerOrganization": "Swagger",
        "baseName": "Store",
        "package": "io.swagger.server.api.verticle",
        "imports": [
          {
            "import": "io.swagger.server.api.MainApiException"
          },
          {
            "import": "io.swagger.server.api.model.Order"
          }
        ],
        "fullJavaUtil": false,
        "contextPath": "/v2",
        "appDescription": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
        "javaUtilPrefix": "",
        "licenseName": "Unlicense",
        "releaseNote": "Minor update",
        "version": "1.0.0",
        "fullSwagger": "{\n  \"swagger\" : \"2.0\",\n  \"info\" : {\n    \"description\" : \"This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.\",\n    \"version\" : \"1.0.0\",\n    \"title\" : \"Swagger Petstore\",\n    \"termsOfService\" : \"http://swagger.io/terms/\",\n    \"contact\" : {\n      \"email\" : \"apiteam@swagger.io\"\n    },\n    \"license\" : {\n      \"name\" : \"Apache 2.0\",\n      \"url\" : \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n    }\n  },\n  \"host\" : \"petstore.swagger.io\",\n  \"basePath\" : \"/v2\",\n  \"tags\" : [ {\n    \"name\" : \"pet\",\n    \"description\" : \"Everything about your Pets\",\n    \"externalDocs\" : {\n      \"description\" : \"Find out more\",\n      \"url\" : \"http://swagger.io\"\n    }\n  }, {\n    \"name\" : \"store\",\n    \"description\" : \"Access to Petstore orders\"\n  }, {\n    \"name\" : \"user\",\n    \"description\" : \"Operations about user\",\n    \"externalDocs\" : {\n      \"description\" : \"Find out more about our store\",\n      \"url\" : \"http://swagger.io\"\n    }\n  } ],\n  \"schemes\" : [ \"http\" ],\n  \"paths\" : {\n    \"/uuid/{uuidParam}\" : {\n      \"get\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"test uuid\",\n        \"operationId\" : \"uuid\",\n        \"parameters\" : [ {\n          \"name\" : \"uuidParam\",\n          \"in\" : \"path\",\n          \"required\" : true,\n          \"type\" : \"string\",\n          \"format\" : \"uuid\"\n        } ],\n        \"responses\" : {\n          \"default\" : {\n            \"description\" : \"OK\",\n            \"schema\" : {\n              \"type\" : \"object\",\n              \"properties\" : {\n                \"uuid\" : {\n                  \"type\" : \"string\",\n                  \"format\" : \"uuid\"\n                }\n              }\n            }\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/pet\" : {\n      \"post\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Add a new pet to the store\",\n        \"description\" : \"\",\n        \"operationId\" : \"addPet\",\n        \"consumes\" : [ \"application/json\", \"application/xml\" ],\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"Pet object that needs to be added to the store\",\n          \"required\" : true,\n          \"schema\" : {\n            \"$ref\" : \"#/definitions/Pet\"\n          }\n        } ],\n        \"responses\" : {\n          \"405\" : {\n            \"description\" : \"Invalid input\"\n          }\n        },\n        \"security\" : [ {\n          \"petstore_auth\" : [ \"write:pets\", \"read:pets\" ]\n        } ],\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      },\n      \"put\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Update an existing pet\",\n        \"description\" : \"\",\n        \"operationId\" : \"updatePet\",\n        \"consumes\" : [ \"application/json\", \"application/xml\" ],\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"Pet object that needs to be added to the store\",\n          \"required\" : true,\n          \"schema\" : {\n            \"$ref\" : \"#/definitions/Pet\"\n          }\n        } ],\n        \"responses\" : {\n          \"400\" : {\n            \"description\" : \"Invalid ID supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"Pet not found\"\n          },\n          \"405\" : {\n            \"description\" : \"Validation exception\"\n          }\n        },\n        \"security\" : [ {\n          \"petstore_auth\" : [ \"write:pets\", \"read:pets\" ]\n        } ],\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/pet/findByStatus\" : {\n      \"get\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Finds Pets by status\",\n        \"description\" : \"Multiple status values can be provided with comma separated strings\",\n        \"operationId\" : \"findPetsByStatus\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"status\",\n          \"in\" : \"query\",\n          \"description\" : \"Status values that need to be considered for filter\",\n          \"required\" : true,\n          \"type\" : \"array\",\n          \"items\" : {\n            \"type\" : \"string\",\n            \"default\" : \"available\",\n            \"enum\" : [ \"available\", \"pending\", \"sold\" ]\n          },\n          \"collectionFormat\" : \"multi\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"type\" : \"array\",\n              \"items\" : {\n                \"$ref\" : \"#/definitions/Pet\"\n              }\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid status value\"\n          }\n        },\n        \"security\" : [ {\n          \"petstore_auth\" : [ \"write:pets\", \"read:pets\" ]\n        } ],\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/pet/findByTags\" : {\n      \"get\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Finds Pets by tags\",\n        \"description\" : \"Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\",\n        \"operationId\" : \"findPetsByTags\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"tags\",\n          \"in\" : \"query\",\n          \"description\" : \"Tags to filter by\",\n          \"required\" : true,\n          \"type\" : \"array\",\n          \"items\" : {\n            \"type\" : \"string\"\n          },\n          \"collectionFormat\" : \"multi\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"type\" : \"array\",\n              \"items\" : {\n                \"$ref\" : \"#/definitions/Pet\"\n              }\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid tag value\"\n          }\n        },\n        \"security\" : [ {\n          \"petstore_auth\" : [ \"write:pets\", \"read:pets\" ]\n        } ],\n        \"deprecated\" : true,\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/pet/{petId}\" : {\n      \"get\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Find pet by ID\",\n        \"description\" : \"Returns a single pet\",\n        \"operationId\" : \"getPetById\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"petId\",\n          \"in\" : \"path\",\n          \"description\" : \"ID of pet to return\",\n          \"required\" : true,\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"$ref\" : \"#/definitions/Pet\"\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid ID supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"Pet not found\"\n          }\n        },\n        \"security\" : [ {\n          \"api_key\" : [ ]\n        } ],\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      },\n      \"post\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Updates a pet in the store with form data\",\n        \"description\" : \"\",\n        \"operationId\" : \"updatePetWithForm\",\n        \"consumes\" : [ \"application/x-www-form-urlencoded\" ],\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"petId\",\n          \"in\" : \"path\",\n          \"description\" : \"ID of pet that needs to be updated\",\n          \"required\" : true,\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        }, {\n          \"name\" : \"name\",\n          \"in\" : \"formData\",\n          \"description\" : \"Updated name of the pet\",\n          \"required\" : false,\n          \"type\" : \"string\"\n        }, {\n          \"name\" : \"status\",\n          \"in\" : \"formData\",\n          \"description\" : \"Updated status of the pet\",\n          \"required\" : false,\n          \"type\" : \"string\"\n        } ],\n        \"responses\" : {\n          \"405\" : {\n            \"description\" : \"Invalid input\"\n          }\n        },\n        \"security\" : [ {\n          \"petstore_auth\" : [ \"write:pets\", \"read:pets\" ]\n        } ],\n        \"x-contentType\" : \"application/x-www-form-urlencoded\",\n        \"x-accepts\" : \"application/json\"\n      },\n      \"delete\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Deletes a pet\",\n        \"description\" : \"\",\n        \"operationId\" : \"deletePet\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"api_key\",\n          \"in\" : \"header\",\n          \"required\" : false,\n          \"type\" : \"string\"\n        }, {\n          \"name\" : \"petId\",\n          \"in\" : \"path\",\n          \"description\" : \"Pet id to delete\",\n          \"required\" : true,\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        } ],\n        \"responses\" : {\n          \"400\" : {\n            \"description\" : \"Invalid ID supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"Pet not found\"\n          }\n        },\n        \"security\" : [ {\n          \"petstore_auth\" : [ \"write:pets\", \"read:pets\" ]\n        } ],\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/pet/{petId}/uploadImage\" : {\n      \"post\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"uploads an image\",\n        \"description\" : \"\",\n        \"operationId\" : \"uploadFile\",\n        \"consumes\" : [ \"multipart/form-data\" ],\n        \"produces\" : [ \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"petId\",\n          \"in\" : \"path\",\n          \"description\" : \"ID of pet to update\",\n          \"required\" : true,\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        }, {\n          \"name\" : \"additionalMetadata\",\n          \"in\" : \"formData\",\n          \"description\" : \"Additional data to pass to server\",\n          \"required\" : false,\n          \"type\" : \"string\"\n        }, {\n          \"name\" : \"file\",\n          \"in\" : \"formData\",\n          \"description\" : \"file to upload\",\n          \"required\" : false,\n          \"type\" : \"file\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"$ref\" : \"#/definitions/ApiResponse\"\n            }\n          }\n        },\n        \"security\" : [ {\n          \"petstore_auth\" : [ \"write:pets\", \"read:pets\" ]\n        } ],\n        \"x-contentType\" : \"multipart/form-data\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/store/inventory\" : {\n      \"get\" : {\n        \"tags\" : [ \"store\" ],\n        \"summary\" : \"Returns pet inventories by status\",\n        \"description\" : \"Returns a map of status codes to quantities\",\n        \"operationId\" : \"getInventory\",\n        \"produces\" : [ \"application/json\" ],\n        \"parameters\" : [ ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"type\" : \"object\",\n              \"additionalProperties\" : {\n                \"type\" : \"integer\",\n                \"format\" : \"int32\"\n              }\n            }\n          }\n        },\n        \"security\" : [ {\n          \"api_key\" : [ ]\n        } ],\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/store/order\" : {\n      \"post\" : {\n        \"tags\" : [ \"store\" ],\n        \"summary\" : \"Place an order for a pet\",\n        \"description\" : \"\",\n        \"operationId\" : \"placeOrder\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"order placed for purchasing the pet\",\n          \"required\" : true,\n          \"schema\" : {\n            \"$ref\" : \"#/definitions/Order\"\n          }\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"$ref\" : \"#/definitions/Order\"\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid Order\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/store/order/{orderId}\" : {\n      \"get\" : {\n        \"tags\" : [ \"store\" ],\n        \"summary\" : \"Find purchase order by ID\",\n        \"description\" : \"For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions\",\n        \"operationId\" : \"getOrderById\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"OrderId\",\n          \"in\" : \"path\",\n          \"description\" : \"ID of pet that needs to be fetched\",\n          \"required\" : true,\n          \"type\" : \"integer\",\n          \"maximum\" : 10.0,\n          \"minimum\" : 1.0,\n          \"format\" : \"int64\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"$ref\" : \"#/definitions/Order\"\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid ID supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"Order not found\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      },\n      \"delete\" : {\n        \"tags\" : [ \"store\" ],\n        \"summary\" : \"Delete purchase order by ID\",\n        \"description\" : \"For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\",\n        \"operationId\" : \"deleteOrder\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"orderId\",\n          \"in\" : \"path\",\n          \"description\" : \"ID of the order that needs to be deleted\",\n          \"required\" : true,\n          \"type\" : \"integer\",\n          \"minimum\" : 1.0,\n          \"format\" : \"int64\"\n        } ],\n        \"responses\" : {\n          \"400\" : {\n            \"description\" : \"Invalid ID supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"Order not found\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/user\" : {\n      \"post\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Create user\",\n        \"description\" : \"This can only be done by the logged in user.\",\n        \"operationId\" : \"createUser\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"Created user object\",\n          \"required\" : true,\n          \"schema\" : {\n            \"$ref\" : \"#/definitions/User\"\n          }\n        } ],\n        \"responses\" : {\n          \"default\" : {\n            \"description\" : \"successful operation\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/user/createWithArray\" : {\n      \"post\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Creates list of users with given input array\",\n        \"description\" : \"\",\n        \"operationId\" : \"createUsersWithArrayInput\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"List of user object\",\n          \"required\" : true,\n          \"schema\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/definitions/User\"\n            }\n          }\n        } ],\n        \"responses\" : {\n          \"default\" : {\n            \"description\" : \"successful operation\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/user/createWithList\" : {\n      \"post\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Creates list of users with given input array\",\n        \"description\" : \"\",\n        \"operationId\" : \"createUsersWithListInput\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"List of user object\",\n          \"required\" : true,\n          \"schema\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/definitions/User\"\n            }\n          }\n        } ],\n        \"responses\" : {\n          \"default\" : {\n            \"description\" : \"successful operation\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/user/login\" : {\n      \"get\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Logs user into the system\",\n        \"description\" : \"\",\n        \"operationId\" : \"loginUser\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"username\",\n          \"in\" : \"query\",\n          \"description\" : \"The user name for login\",\n          \"required\" : true,\n          \"type\" : \"string\"\n        }, {\n          \"name\" : \"password\",\n          \"in\" : \"query\",\n          \"description\" : \"The password for login in clear text\",\n          \"required\" : true,\n          \"type\" : \"string\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"type\" : \"string\"\n            },\n            \"headers\" : {\n              \"X-Rate-Limit\" : {\n                \"type\" : \"integer\",\n                \"format\" : \"int32\",\n                \"description\" : \"calls per hour allowed by the user\"\n              },\n              \"X-Expires-After\" : {\n                \"type\" : \"string\",\n                \"format\" : \"date-time\",\n                \"description\" : \"date in UTC when token expires\"\n              }\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid username/password supplied\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/user/logout\" : {\n      \"get\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Logs out current logged in user session\",\n        \"description\" : \"\",\n        \"operationId\" : \"logoutUser\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ ],\n        \"responses\" : {\n          \"default\" : {\n            \"description\" : \"successful operation\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/user/{username}\" : {\n      \"get\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Get user by user name\",\n        \"description\" : \"\",\n        \"operationId\" : \"getUserByName\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"username\",\n          \"in\" : \"path\",\n          \"description\" : \"The name that needs to be fetched. Use user1 for testing. \",\n          \"required\" : true,\n          \"type\" : \"string\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"$ref\" : \"#/definitions/User\"\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid username supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"User not found\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      },\n      \"put\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Updated user\",\n        \"description\" : \"This can only be done by the logged in user.\",\n        \"operationId\" : \"updateUser\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"username\",\n          \"in\" : \"path\",\n          \"description\" : \"name that need to be updated\",\n          \"required\" : true,\n          \"type\" : \"string\"\n        }, {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"Updated user object\",\n          \"required\" : true,\n          \"schema\" : {\n            \"$ref\" : \"#/definitions/User\"\n          }\n        } ],\n        \"responses\" : {\n          \"400\" : {\n            \"description\" : \"Invalid user supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"User not found\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      },\n      \"delete\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Delete user\",\n        \"description\" : \"This can only be done by the logged in user.\",\n        \"operationId\" : \"deleteUser\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"username\",\n          \"in\" : \"path\",\n          \"description\" : \"The name that needs to be deleted\",\n          \"required\" : true,\n          \"type\" : \"string\"\n        } ],\n        \"responses\" : {\n          \"400\" : {\n            \"description\" : \"Invalid username supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"User not found\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    }\n  },\n  \"securityDefinitions\" : {\n    \"petstore_auth\" : {\n      \"type\" : \"oauth2\",\n      \"authorizationUrl\" : \"http://petstore.swagger.io/oauth/dialog\",\n      \"flow\" : \"implicit\",\n      \"scopes\" : {\n        \"write:pets\" : \"modify pets in your account\",\n        \"read:pets\" : \"read your pets\"\n      }\n    },\n    \"api_key\" : {\n      \"type\" : \"apiKey\",\n      \"name\" : \"api_key\",\n      \"in\" : \"header\"\n    }\n  },\n  \"definitions\" : {\n    \"Order\" : {\n      \"type\" : \"object\",\n      \"properties\" : {\n        \"id\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        },\n        \"petId\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        },\n        \"quantity\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int32\"\n        },\n        \"shipDate\" : {\n          \"type\" : \"string\",\n          \"format\" : \"date-time\"\n        },\n        \"status\" : {\n          \"type\" : \"string\",\n          \"description\" : \"Order Status\",\n          \"enum\" : [ \"placed\", \"approved\", \"delivered\" ]\n        },\n        \"complete\" : {\n          \"type\" : \"boolean\",\n          \"default\" : false\n        }\n      },\n      \"xml\" : {\n        \"name\" : \"Order\"\n      }\n    },\n    \"Category\" : {\n      \"type\" : \"object\",\n      \"properties\" : {\n        \"id\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        },\n        \"name\" : {\n          \"type\" : \"string\"\n        }\n      },\n      \"description\" : \"some description\",\n      \"xml\" : {\n        \"name\" : \"Category\"\n      }\n    },\n    \"User\" : {\n      \"type\" : \"object\",\n      \"properties\" : {\n        \"id\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        },\n        \"username\" : {\n          \"type\" : \"string\"\n        },\n        \"firstName\" : {\n          \"type\" : \"string\"\n        },\n        \"lastName\" : {\n          \"type\" : \"string\"\n        },\n        \"email\" : {\n          \"type\" : \"string\"\n        },\n        \"password\" : {\n          \"type\" : \"string\"\n        },\n        \"phone\" : {\n          \"type\" : \"string\"\n        },\n        \"userStatus\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int32\",\n          \"description\" : \"User Status\"\n        }\n      },\n      \"xml\" : {\n        \"name\" : \"User\"\n      }\n    },\n    \"Tag\" : {\n      \"type\" : \"object\",\n      \"properties\" : {\n        \"id\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        },\n        \"name\" : {\n          \"type\" : \"string\"\n        }\n      },\n      \"xml\" : {\n        \"name\" : \"Tag\"\n      }\n    },\n    \"Pet\" : {\n      \"type\" : \"object\",\n      \"required\" : [ \"name\", \"photoUrls\" ],\n      \"properties\" : {\n        \"id\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        },\n        \"category\" : {\n          \"$ref\" : \"#/definitions/Category\"\n        },\n        \"name\" : {\n          \"type\" : \"string\",\n          \"example\" : \"doggie\"\n        },\n        \"photoUrls\" : {\n          \"type\" : \"array\",\n          \"xml\" : {\n            \"name\" : \"photoUrl\",\n            \"wrapped\" : true\n          },\n          \"items\" : {\n            \"type\" : \"string\"\n          }\n        },\n        \"tags\" : {\n          \"type\" : \"array\",\n          \"xml\" : {\n            \"name\" : \"tag\",\n            \"wrapped\" : true\n          },\n          \"items\" : {\n            \"$ref\" : \"#/definitions/Tag\"\n          }\n        },\n        \"status\" : {\n          \"type\" : \"string\",\n          \"description\" : \"pet status in the store\",\n          \"enum\" : [ \"available\", \"pending\", \"sold\" ]\n        }\n      },\n      \"xml\" : {\n        \"name\" : \"Pet\"\n      }\n    },\n    \"ApiResponse\" : {\n      \"type\" : \"object\",\n      \"properties\" : {\n        \"code\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int32\"\n        },\n        \"type\" : {\n          \"type\" : \"string\"\n        },\n        \"message\" : {\n          \"type\" : \"string\"\n        }\n      }\n    }\n  },\n  \"externalDocs\" : {\n    \"description\" : \"Find out more about Swagger\",\n    \"url\" : \"http://swagger.io\"\n  }\n}",
        "modelDocPath": "docs/",
        "scmDeveloperConnection": "scm:git:git@github.com:swagger-api/swagger-codegen.git",
        "vertxSwaggerRouterVersion": "1.4.1-SNAPSHOT",
        "importPath": "io.swagger.server.api.verticle.Store",
        "licenseUrl": "http://www.apache.org/licenses/LICENSE-2.0.html",
        "modelPackage": "io.swagger.server.api.model",
        "apiDocPath": "docs/",
        "licenseInfo": "Apache 2.0",
        "serverPort": "8080",
        "basePathWithoutHost": "/v2",
        "developerOrganizationUrl": "http://swagger.io",
        "operations": {
          "classname": "StoreApi",
          "operation": [
            {
              "responseHeaders": [],
              "hasAuthMethods": false,
              "hasConsumes": false,
              "hasProduces": true,
              "hasParams": true,
              "hasOptionalParams": false,
              "returnTypeIsPrimitive": false,
              "returnSimpleType": false,
              "subresourceOperation": false,
              "isMapContainer": false,
              "isListContainer": false,
              "isMultipart": false,
              "hasMore": true,
              "isResponseBinary": false,
              "isResponseFile": false,
              "hasReference": false,
              "isRestfulIndex": false,
              "isRestfulShow": false,
              "isRestfulCreate": false,
              "isRestfulUpdate": false,
              "isRestfulDestroy": false,
              "isRestful": false,
              "path": "/store/order/:orderId",
              "operationId": "deleteOrder",
              "httpMethod": "delete",
              "summary": "Delete purchase order by ID",
              "unescapedNotes": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
              "notes": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
              "baseName": "Store",
              "produces": [
                {
                  "hasMore": "true",
                  "mediaType": "application/xml"
                },
                {
                  "hasMore": null,
                  "mediaType": "application/json"
                }
              ],
              "allParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": true,
                  "baseName": "orderId",
                  "paramName": "orderId",
                  "dataType": "Long",
                  "dataFormat": "int64",
                  "description": "ID of the order that needs to be deleted",
                  "unescapedDescription": "ID of the order that needs to be deleted",
                  "example": "789L",
                  "jsonSchema": "{\n  \"name\" : \"orderId\",\n  \"in\" : \"path\",\n  \"description\" : \"ID of the order that needs to be deleted\",\n  \"required\" : true,\n  \"type\" : \"integer\",\n  \"minimum\" : 1.0,\n  \"format\" : \"int64\"\n}",
                  "isString": false,
                  "isInteger": false,
                  "isLong": true,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": true,
                  "required": true,
                  "exclusiveMaximum": false,
                  "minimum": "1",
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "bodyParams": [],
              "pathParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": false,
                  "baseName": "orderId",
                  "paramName": "orderId",
                  "dataType": "Long",
                  "dataFormat": "int64",
                  "description": "ID of the order that needs to be deleted",
                  "unescapedDescription": "ID of the order that needs to be deleted",
                  "example": "789L",
                  "jsonSchema": "{\n  \"name\" : \"orderId\",\n  \"in\" : \"path\",\n  \"description\" : \"ID of the order that needs to be deleted\",\n  \"required\" : true,\n  \"type\" : \"integer\",\n  \"minimum\" : 1.0,\n  \"format\" : \"int64\"\n}",
                  "isString": false,
                  "isInteger": false,
                  "isLong": true,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": true,
                  "required": true,
                  "exclusiveMaximum": false,
                  "minimum": "1",
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "queryParams": [],
              "headerParams": [],
              "formParams": [],
              "tags": [
                "Store"
              ],
              "responses": [
                {
                  "headers": [],
                  "code": "400",
                  "message": "Invalid ID supplied",
                  "hasMore": true,
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": false,
                  "simpleType": true,
                  "primitiveType": true,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "jsonSchema": "{\n  \"description\" : \"Invalid ID supplied\"\n}",
                  "vendorExtensions": {
                  }
                },
                {
                  "headers": [],
                  "code": "404",
                  "message": "Order not found",
                  "hasMore": false,
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": false,
                  "simpleType": true,
                  "primitiveType": true,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "jsonSchema": "{\n  \"description\" : \"Order not found\"\n}",
                  "vendorExtensions": {
                  }
                }
              ],
              "imports": [
                "MainApiException"
              ],
              "vendorExtensions": {
                "x-contentType": "application/json",
                "x-accepts": "application/json",
                "x-serviceId": "deleteOrder",
                "x-serviceIduC": "DELETEORDER",
                "x-serviceId-varName": "DELETEORDER_SERVICE_ID",
                "x-serviceId-SQL": "DELETE FROM TABLE_NAME WHERE orderId = ?",
                "x-serviceId-Query-Method": "updateWithParams"
              },
              "nickname": "deleteOrder",
              "operationIdLowerCase": "deleteorder",
              "hasBodyParam": false,
              "hasQueryParams": false,
              "hasHeaderParams": false,
              "hasFormParams": false,
              "hasExamples": false,
              "hasPathParams": true,
              "restfulShow": false,
              "restfulIndex": false,
              "restfulCreate": false,
              "restfulUpdate": false,
              "restfulDestroy": false,
              "restful": false
            },
            {
              "responseHeaders": [],
              "hasAuthMethods": true,
              "hasConsumes": false,
              "hasProduces": true,
              "hasParams": false,
              "hasOptionalParams": false,
              "returnTypeIsPrimitive": false,
              "returnSimpleType": false,
              "subresourceOperation": false,
              "isMapContainer": true,
              "isListContainer": false,
              "isMultipart": false,
              "hasMore": true,
              "isResponseBinary": false,
              "isResponseFile": false,
              "hasReference": false,
              "isRestfulIndex": false,
              "isRestfulShow": false,
              "isRestfulCreate": false,
              "isRestfulUpdate": false,
              "isRestfulDestroy": false,
              "isRestful": false,
              "path": "/store/inventory",
              "operationId": "getInventory",
              "returnType": "Map<String, Integer>",
              "httpMethod": "get",
              "returnBaseType": "Map",
              "returnContainer": "map",
              "summary": "Returns pet inventories by status",
              "unescapedNotes": "Returns a map of status codes to quantities",
              "notes": "Returns a map of status codes to quantities",
              "baseName": "Store",
              "defaultResponse": "new HashMap<String, Integer>()",
              "produces": [
                {
                  "hasMore": null,
                  "mediaType": "application/json"
                }
              ],
              "allParams": [],
              "bodyParams": [],
              "pathParams": [],
              "queryParams": [],
              "headerParams": [],
              "formParams": [],
              "authMethods": [
                {
                  "name": "api_key",
                  "type": "apiKey",
                  "hasMore": false,
                  "isBasic": false,
                  "isOAuth": false,
                  "isApiKey": true,
                  "keyParamName": "api_key",
                  "isKeyInQuery": false,
                  "isKeyInHeader": true,
                  "isCode": false,
                  "isPassword": false,
                  "isApplication": false,
                  "isImplicit": false
                }
              ],
              "tags": [
                "Store"
              ],
              "responses": [
                {
                  "headers": [],
                  "code": "200",
                  "message": "successful operation",
                  "hasMore": false,
                  "dataType": "Map<String, Integer>",
                  "baseType": "Map",
                  "containerType": "map",
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": true,
                  "simpleType": false,
                  "primitiveType": false,
                  "isMapContainer": true,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "jsonSchema": "{\n  \"description\" : \"successful operation\",\n  \"schema\" : {\n    \"type\" : \"object\",\n    \"additionalProperties\" : {\n      \"type\" : \"integer\",\n      \"format\" : \"int32\"\n    }\n  }\n}",
                  "vendorExtensions": {}
                }
              ],
              "imports": [
                "MainApiException",
                "Map"
              ],
              "examples": [
                {
                  "contentType": "application/json",
                  "example": "{\n  \"key\" : 123\n}"
                }
              ],
              "vendorExtensions": {
                "x-contentType": "application/json",
                "x-accepts": "application/json",
                "x-serviceId": "getInventory",
                "x-serviceIduC": "GETINVENTORY",
                "x-serviceId-varName": "GETINVENTORY_SERVICE_ID",
                "x-serviceId-SQL": "SELECT * FROM TABLE_NAME",
                "x-serviceId-Query-Method": "queryWithParams"
              },
              "nickname": "getInventory",
              "operationIdLowerCase": "getinventory",
              "hasBodyParam": false,
              "hasQueryParams": false,
              "hasHeaderParams": false,
              "hasFormParams": false,
              "hasExamples": true,
              "hasPathParams": false,
              "restfulShow": false,
              "restfulIndex": false,
              "restfulCreate": false,
              "restfulUpdate": false,
              "restfulDestroy": false,
              "restful": false
            },
            {
              "responseHeaders": [],
              "hasAuthMethods": false,
              "hasConsumes": false,
              "hasProduces": true,
              "hasParams": true,
              "hasOptionalParams": false,
              "returnTypeIsPrimitive": false,
              "returnSimpleType": true,
              "subresourceOperation": false,
              "isMapContainer": false,
              "isListContainer": false,
              "isMultipart": false,
              "hasMore": true,
              "isResponseBinary": false,
              "isResponseFile": false,
              "hasReference": true,
              "isRestfulIndex": false,
              "isRestfulShow": false,
              "isRestfulCreate": false,
              "isRestfulUpdate": false,
              "isRestfulDestroy": false,
              "isRestful": false,
              "path": "/store/order/:orderId",
              "operationId": "getOrderById",
              "returnType": "Order",
              "httpMethod": "get",
              "returnBaseType": "Order",
              "summary": "Find purchase order by ID",
              "unescapedNotes": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
              "notes": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
              "baseName": "Store",
              "defaultResponse": "null",
              "produces": [
                {
                  "hasMore": "true",
                  "mediaType": "application/xml"
                },
                {
                  "hasMore": null,
                  "mediaType": "application/json"
                }
              ],
              "allParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": true,
                  "baseName": "OrderId",
                  "paramName": "orderId",
                  "dataType": "Long",
                  "dataFormat": "int64",
                  "description": "ID of pet that needs to be fetched",
                  "unescapedDescription": "ID of pet that needs to be fetched",
                  "example": "789L",
                  "jsonSchema": "{\n  \"name\" : \"OrderId\",\n  \"in\" : \"path\",\n  \"description\" : \"ID of pet that needs to be fetched\",\n  \"required\" : true,\n  \"type\" : \"integer\",\n  \"maximum\" : 10.0,\n  \"minimum\" : 1.0,\n  \"format\" : \"int64\"\n}",
                  "isString": false,
                  "isInteger": false,
                  "isLong": true,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": true,
                  "required": true,
                  "maximum": "10",
                  "exclusiveMaximum": false,
                  "minimum": "1",
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "bodyParams": [],
              "pathParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": false,
                  "baseName": "OrderId",
                  "paramName": "orderId",
                  "dataType": "Long",
                  "dataFormat": "int64",
                  "description": "ID of pet that needs to be fetched",
                  "unescapedDescription": "ID of pet that needs to be fetched",
                  "example": "789L",
                  "jsonSchema": "{\n  \"name\" : \"OrderId\",\n  \"in\" : \"path\",\n  \"description\" : \"ID of pet that needs to be fetched\",\n  \"required\" : true,\n  \"type\" : \"integer\",\n  \"maximum\" : 10.0,\n  \"minimum\" : 1.0,\n  \"format\" : \"int64\"\n}",
                  "isString": false,
                  "isInteger": false,
                  "isLong": true,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": true,
                  "required": true,
                  "maximum": "10",
                  "exclusiveMaximum": false,
                  "minimum": "1",
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "queryParams": [],
              "headerParams": [],
              "formParams": [],
              "tags": [
                "Store"
              ],
              "responses": [
                {
                  "headers": [],
                  "code": "200",
                  "message": "successful operation",
                  "hasMore": true,
                  "dataType": "Order",
                  "baseType": "Order",
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": true,
                  "simpleType": true,
                  "primitiveType": false,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "schema": {
                    "$ref": "#/definitions/Order"
                  },
                  "jsonSchema": "{\n  \"description\" : \"successful operation\",\n  \"schema\" : {\n    \"$ref\" : \"#/definitions/Order\"\n  }\n}",
                  "vendorExtensions": {
                  }
                },
                {
                  "headers": [],
                  "code": "400",
                  "message": "Invalid ID supplied",
                  "hasMore": true,
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": false,
                  "simpleType": true,
                  "primitiveType": true,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "jsonSchema": "{\n  \"description\" : \"Invalid ID supplied\"\n}",
                  "vendorExtensions": {
                  }
                },
                {
                  "headers": [],
                  "code": "404",
                  "message": "Order not found",
                  "hasMore": false,
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": false,
                  "simpleType": true,
                  "primitiveType": true,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "jsonSchema": "{\n  \"description\" : \"Order not found\"\n}",
                  "vendorExtensions": {
                  }
                }
              ],
              "imports": [
                "Order",
                "MainApiException"
              ],
              "examples": [
                {
                  "contentType": "application/xml",
                  "example": "<Order>\n  <id>123456789</id>\n  <petId>123456789</petId>\n  <quantity>123</quantity>\n  <shipDate>2000-01-23T04:56:07.000Z</shipDate>\n  <status>aeiou</status>\n  <complete>true</complete>\n</Order>"
                },
                {
                  "contentType": "application/json",
                  "example": "{\n  \"petId\" : 123456789,\n  \"quantity\" : 123,\n  \"id\" : 123456789,\n  \"shipDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"complete\" : true,\n  \"status\" : \"aeiou\"\n}"
                }
              ],
              "vendorExtensions": {
                "x-contentType": "application/json",
                "x-accepts": "application/json",
                "x-serviceId": "getOrderById",
                "x-serviceIduC": "GETORDERBYID",
                "x-serviceId-varName": "GETORDERBYID_SERVICE_ID",
                "x-serviceId-SQL": "SELECT * FROM TABLE_NAME WHERE OrderId = ?",
                "x-serviceId-Query-Method": "queryWithParams"
              },
              "nickname": "getOrderById",
              "operationIdLowerCase": "getorderbyid",
              "hasBodyParam": false,
              "hasQueryParams": false,
              "hasHeaderParams": false,
              "hasFormParams": false,
              "hasExamples": true,
              "hasPathParams": true,
              "restfulShow": false,
              "restfulIndex": false,
              "restfulCreate": false,
              "restfulUpdate": false,
              "restfulDestroy": false,
              "restful": false
            },
            {
              "responseHeaders": [],
              "hasAuthMethods": false,
              "hasConsumes": false,
              "hasProduces": true,
              "hasParams": true,
              "hasOptionalParams": false,
              "returnTypeIsPrimitive": false,
              "returnSimpleType": true,
              "subresourceOperation": false,
              "isMapContainer": false,
              "isListContainer": false,
              "isMultipart": false,
              "hasMore": false,
              "isResponseBinary": false,
              "isResponseFile": false,
              "hasReference": true,
              "isRestfulIndex": false,
              "isRestfulShow": false,
              "isRestfulCreate": false,
              "isRestfulUpdate": false,
              "isRestfulDestroy": false,
              "isRestful": false,
              "path": "/store/order",
              "operationId": "placeOrder",
              "returnType": "Order",
              "httpMethod": "post",
              "returnBaseType": "Order",
              "summary": "Place an order for a pet",
              "unescapedNotes": "",
              "notes": "",
              "baseName": "Store",
              "defaultResponse": "null",
              "produces": [
                {
                  "hasMore": "true",
                  "mediaType": "application/xml"
                },
                {
                  "hasMore": null,
                  "mediaType": "application/json"
                }
              ],
              "bodyParam": {
                "isFormParam": false,
                "isQueryParam": false,
                "isPathParam": false,
                "isHeaderParam": false,
                "isCookieParam": false,
                "isBodyParam": true,
                "hasMore": false,
                "isContainer": false,
                "secondaryParam": false,
                "isCollectionFormatMulti": false,
                "isPrimitiveType": false,
                "baseName": "body",
                "paramName": "body",
                "dataType": "Order",
                "description": "order placed for purchasing the pet",
                "unescapedDescription": "order placed for purchasing the pet",
                "baseType": "Order",
                "example": "new Order()",
                "jsonSchema": "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"order placed for purchasing the pet\",\n  \"required\" : true,\n  \"schema\" : {\n    \"$ref\" : \"#/definitions/Order\"\n  }\n}",
                "isString": false,
                "isInteger": false,
                "isLong": false,
                "isFloat": false,
                "isDouble": false,
                "isByteArray": false,
                "isBinary": false,
                "isBoolean": false,
                "isDate": false,
                "isDateTime": false,
                "isListContainer": false,
                "isMapContainer": false,
                "isFile": false,
                "notFile": false,
                "isEnum": false,
                "vendorExtensions": {},
                "hasValidation": false,
                "required": true,
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "uniqueItems": false
              },
              "allParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": true,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": false,
                  "baseName": "body",
                  "paramName": "body",
                  "dataType": "Order",
                  "description": "order placed for purchasing the pet",
                  "unescapedDescription": "order placed for purchasing the pet",
                  "baseType": "Order",
                  "example": "new Order()",
                  "jsonSchema": "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"order placed for purchasing the pet\",\n  \"required\" : true,\n  \"schema\" : {\n    \"$ref\" : \"#/definitions/Order\"\n  }\n}",
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "bodyParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": true,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": false,
                  "baseName": "body",
                  "paramName": "body",
                  "dataType": "Order",
                  "description": "order placed for purchasing the pet",
                  "unescapedDescription": "order placed for purchasing the pet",
                  "baseType": "Order",
                  "example": "new Order()",
                  "jsonSchema": "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"order placed for purchasing the pet\",\n  \"required\" : true,\n  \"schema\" : {\n    \"$ref\" : \"#/definitions/Order\"\n  }\n}",
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "pathParams": [],
              "queryParams": [],
              "headerParams": [],
              "formParams": [],
              "tags": [
                "Store"
              ],
              "responses": [
                {
                  "headers": [],
                  "code": "200",
                  "message": "successful operation",
                  "hasMore": true,
                  "dataType": "Order",
                  "baseType": "Order",
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": true,
                  "simpleType": true,
                  "primitiveType": false,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "schema": {
                    "$ref": "#/definitions/Order"
                  },
                  "jsonSchema": "{\n  \"description\" : \"successful operation\",\n  \"schema\" : {\n    \"$ref\" : \"#/definitions/Order\"\n  }\n}",
                  "vendorExtensions": {
                  }
                },
                {
                  "headers": [],
                  "code": "400",
                  "message": "Invalid Order",
                  "hasMore": false,
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": false,
                  "simpleType": true,
                  "primitiveType": true,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "jsonSchema": "{\n  \"description\" : \"Invalid Order\"\n}",
                  "vendorExtensions": {
                  }
                }
              ],
              "imports": [
                "Order",
                "MainApiException"
              ],
              "examples": [
                {
                  "contentType": "application/xml",
                  "example": "<Order>\n  <id>123456789</id>\n  <petId>123456789</petId>\n  <quantity>123</quantity>\n  <shipDate>2000-01-23T04:56:07.000Z</shipDate>\n  <status>aeiou</status>\n  <complete>true</complete>\n</Order>"
                },
                {
                  "contentType": "application/json",
                  "example": "{\n  \"petId\" : 123456789,\n  \"quantity\" : 123,\n  \"id\" : 123456789,\n  \"shipDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"complete\" : true,\n  \"status\" : \"aeiou\"\n}"
                }
              ],
              "vendorExtensions": {
                "x-contentType": "application/json",
                "x-accepts": "application/json",
                "x-serviceId": "placeOrder",
                "x-serviceIduC": "PLACEORDER",
                "x-serviceId-varName": "PLACEORDER_SERVICE_ID",
                "x-serviceId-SQL": "INSERT INTO TABLE_NAME",
                "x-serviceId-Query-Method": "updateWithParams"
              },
              "nickname": "placeOrder",
              "operationIdLowerCase": "placeorder",
              "hasBodyParam": true,
              "hasQueryParams": false,
              "hasHeaderParams": false,
              "hasFormParams": false,
              "hasExamples": true,
              "hasPathParams": false,
              "restfulShow": false,
              "restfulIndex": false,
              "restfulCreate": false,
              "restfulUpdate": false,
              "restfulDestroy": false,
              "restful": false
            }
          ],
          "pathPrefix": "store"
        },
        "java8": "true",
        "artifactId": "petstore-vertx-server",
        "artifactDescription": "Swagger Java",
        "developerName": "Swagger",
        "scmConnection": "scm:git:git@github.com:swagger-api/swagger-codegen.git",
        "unescapedAppDescription": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
        "artifactVersion": "1.0.0-SNAPSHOT",
        "appName": "Swagger Petstore",
        "termsOfService": "http://swagger.io/terms/",
        "scmUrl": "https://github.com/swagger-api/swagger-codegen",
        "basePath": "http://petstore.swagger.io/v2",
        "classname": "StoreApi",
        "gitRepoId": "GIT_REPO_ID",
        "generatedDate": "2017-08-31T22:50:32.533+03:00",
        "infoEmail": "apiteam@swagger.io",
        "gitUserId": "GIT_USER_ID"
      },
      {
        "appVersion": "1.0.0",
        "generatorClass": "com.github.phiz71.vertx.swagger.codegen.JavaVertXServerGenerator",
        "supportJava6": false,
        "sortParamsByRequiredFlag": true,
        "groupId": "io.swagger",
        "invokerPackage": "io.swagger.server.api",
        "classVarName": "user",
        "developerEmail": "apiteam@swagger.io",
        "jdbcPersistence": "true",
        "hasImport": true,
        "generateModelTests": true,
        "generateApiTests": true,
        "classFilename": "UserApi",
        "serializableModel": false,
        "infoUrl": null,
        "inputSpec": "petStore.json",
        "artifactUrl": "https://github.com/swagger-api/swagger-codegen",
        "developerOrganization": "Swagger",
        "baseName": "User",
        "package": "io.swagger.server.api.verticle",
        "imports": [
          {
            "import": "io.swagger.server.api.model.InlineResponseDefault"
          },
          {
            "import": "io.swagger.server.api.MainApiException"
          },
          {
            "import": "io.swagger.server.api.model.ModelUser"
          },
          {
            "import": "java.util.UUID"
          }
        ],
        "fullJavaUtil": false,
        "contextPath": "/v2",
        "appDescription": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
        "javaUtilPrefix": "",
        "licenseName": "Unlicense",
        "releaseNote": "Minor update",
        "version": "1.0.0",
        "fullSwagger": "{\n  \"swagger\" : \"2.0\",\n  \"info\" : {\n    \"description\" : \"This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.\",\n    \"version\" : \"1.0.0\",\n    \"title\" : \"Swagger Petstore\",\n    \"termsOfService\" : \"http://swagger.io/terms/\",\n    \"contact\" : {\n      \"email\" : \"apiteam@swagger.io\"\n    },\n    \"license\" : {\n      \"name\" : \"Apache 2.0\",\n      \"url\" : \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n    }\n  },\n  \"host\" : \"petstore.swagger.io\",\n  \"basePath\" : \"/v2\",\n  \"tags\" : [ {\n    \"name\" : \"pet\",\n    \"description\" : \"Everything about your Pets\",\n    \"externalDocs\" : {\n      \"description\" : \"Find out more\",\n      \"url\" : \"http://swagger.io\"\n    }\n  }, {\n    \"name\" : \"store\",\n    \"description\" : \"Access to Petstore orders\"\n  }, {\n    \"name\" : \"user\",\n    \"description\" : \"Operations about user\",\n    \"externalDocs\" : {\n      \"description\" : \"Find out more about our store\",\n      \"url\" : \"http://swagger.io\"\n    }\n  } ],\n  \"schemes\" : [ \"http\" ],\n  \"paths\" : {\n    \"/uuid/{uuidParam}\" : {\n      \"get\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"test uuid\",\n        \"operationId\" : \"uuid\",\n        \"parameters\" : [ {\n          \"name\" : \"uuidParam\",\n          \"in\" : \"path\",\n          \"required\" : true,\n          \"type\" : \"string\",\n          \"format\" : \"uuid\"\n        } ],\n        \"responses\" : {\n          \"default\" : {\n            \"description\" : \"OK\",\n            \"schema\" : {\n              \"type\" : \"object\",\n              \"properties\" : {\n                \"uuid\" : {\n                  \"type\" : \"string\",\n                  \"format\" : \"uuid\"\n                }\n              }\n            }\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/pet\" : {\n      \"post\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Add a new pet to the store\",\n        \"description\" : \"\",\n        \"operationId\" : \"addPet\",\n        \"consumes\" : [ \"application/json\", \"application/xml\" ],\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"Pet object that needs to be added to the store\",\n          \"required\" : true,\n          \"schema\" : {\n            \"$ref\" : \"#/definitions/Pet\"\n          }\n        } ],\n        \"responses\" : {\n          \"405\" : {\n            \"description\" : \"Invalid input\"\n          }\n        },\n        \"security\" : [ {\n          \"petstore_auth\" : [ \"write:pets\", \"read:pets\" ]\n        } ],\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      },\n      \"put\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Update an existing pet\",\n        \"description\" : \"\",\n        \"operationId\" : \"updatePet\",\n        \"consumes\" : [ \"application/json\", \"application/xml\" ],\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"Pet object that needs to be added to the store\",\n          \"required\" : true,\n          \"schema\" : {\n            \"$ref\" : \"#/definitions/Pet\"\n          }\n        } ],\n        \"responses\" : {\n          \"400\" : {\n            \"description\" : \"Invalid ID supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"Pet not found\"\n          },\n          \"405\" : {\n            \"description\" : \"Validation exception\"\n          }\n        },\n        \"security\" : [ {\n          \"petstore_auth\" : [ \"write:pets\", \"read:pets\" ]\n        } ],\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/pet/findByStatus\" : {\n      \"get\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Finds Pets by status\",\n        \"description\" : \"Multiple status values can be provided with comma separated strings\",\n        \"operationId\" : \"findPetsByStatus\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"status\",\n          \"in\" : \"query\",\n          \"description\" : \"Status values that need to be considered for filter\",\n          \"required\" : true,\n          \"type\" : \"array\",\n          \"items\" : {\n            \"type\" : \"string\",\n            \"default\" : \"available\",\n            \"enum\" : [ \"available\", \"pending\", \"sold\" ]\n          },\n          \"collectionFormat\" : \"multi\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"type\" : \"array\",\n              \"items\" : {\n                \"$ref\" : \"#/definitions/Pet\"\n              }\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid status value\"\n          }\n        },\n        \"security\" : [ {\n          \"petstore_auth\" : [ \"write:pets\", \"read:pets\" ]\n        } ],\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/pet/findByTags\" : {\n      \"get\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Finds Pets by tags\",\n        \"description\" : \"Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\",\n        \"operationId\" : \"findPetsByTags\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"tags\",\n          \"in\" : \"query\",\n          \"description\" : \"Tags to filter by\",\n          \"required\" : true,\n          \"type\" : \"array\",\n          \"items\" : {\n            \"type\" : \"string\"\n          },\n          \"collectionFormat\" : \"multi\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"type\" : \"array\",\n              \"items\" : {\n                \"$ref\" : \"#/definitions/Pet\"\n              }\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid tag value\"\n          }\n        },\n        \"security\" : [ {\n          \"petstore_auth\" : [ \"write:pets\", \"read:pets\" ]\n        } ],\n        \"deprecated\" : true,\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/pet/{petId}\" : {\n      \"get\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Find pet by ID\",\n        \"description\" : \"Returns a single pet\",\n        \"operationId\" : \"getPetById\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"petId\",\n          \"in\" : \"path\",\n          \"description\" : \"ID of pet to return\",\n          \"required\" : true,\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"$ref\" : \"#/definitions/Pet\"\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid ID supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"Pet not found\"\n          }\n        },\n        \"security\" : [ {\n          \"api_key\" : [ ]\n        } ],\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      },\n      \"post\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Updates a pet in the store with form data\",\n        \"description\" : \"\",\n        \"operationId\" : \"updatePetWithForm\",\n        \"consumes\" : [ \"application/x-www-form-urlencoded\" ],\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"petId\",\n          \"in\" : \"path\",\n          \"description\" : \"ID of pet that needs to be updated\",\n          \"required\" : true,\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        }, {\n          \"name\" : \"name\",\n          \"in\" : \"formData\",\n          \"description\" : \"Updated name of the pet\",\n          \"required\" : false,\n          \"type\" : \"string\"\n        }, {\n          \"name\" : \"status\",\n          \"in\" : \"formData\",\n          \"description\" : \"Updated status of the pet\",\n          \"required\" : false,\n          \"type\" : \"string\"\n        } ],\n        \"responses\" : {\n          \"405\" : {\n            \"description\" : \"Invalid input\"\n          }\n        },\n        \"security\" : [ {\n          \"petstore_auth\" : [ \"write:pets\", \"read:pets\" ]\n        } ],\n        \"x-contentType\" : \"application/x-www-form-urlencoded\",\n        \"x-accepts\" : \"application/json\"\n      },\n      \"delete\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Deletes a pet\",\n        \"description\" : \"\",\n        \"operationId\" : \"deletePet\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"api_key\",\n          \"in\" : \"header\",\n          \"required\" : false,\n          \"type\" : \"string\"\n        }, {\n          \"name\" : \"petId\",\n          \"in\" : \"path\",\n          \"description\" : \"Pet id to delete\",\n          \"required\" : true,\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        } ],\n        \"responses\" : {\n          \"400\" : {\n            \"description\" : \"Invalid ID supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"Pet not found\"\n          }\n        },\n        \"security\" : [ {\n          \"petstore_auth\" : [ \"write:pets\", \"read:pets\" ]\n        } ],\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/pet/{petId}/uploadImage\" : {\n      \"post\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"uploads an image\",\n        \"description\" : \"\",\n        \"operationId\" : \"uploadFile\",\n        \"consumes\" : [ \"multipart/form-data\" ],\n        \"produces\" : [ \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"petId\",\n          \"in\" : \"path\",\n          \"description\" : \"ID of pet to update\",\n          \"required\" : true,\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        }, {\n          \"name\" : \"additionalMetadata\",\n          \"in\" : \"formData\",\n          \"description\" : \"Additional data to pass to server\",\n          \"required\" : false,\n          \"type\" : \"string\"\n        }, {\n          \"name\" : \"file\",\n          \"in\" : \"formData\",\n          \"description\" : \"file to upload\",\n          \"required\" : false,\n          \"type\" : \"file\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"$ref\" : \"#/definitions/ApiResponse\"\n            }\n          }\n        },\n        \"security\" : [ {\n          \"petstore_auth\" : [ \"write:pets\", \"read:pets\" ]\n        } ],\n        \"x-contentType\" : \"multipart/form-data\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/store/inventory\" : {\n      \"get\" : {\n        \"tags\" : [ \"store\" ],\n        \"summary\" : \"Returns pet inventories by status\",\n        \"description\" : \"Returns a map of status codes to quantities\",\n        \"operationId\" : \"getInventory\",\n        \"produces\" : [ \"application/json\" ],\n        \"parameters\" : [ ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"type\" : \"object\",\n              \"additionalProperties\" : {\n                \"type\" : \"integer\",\n                \"format\" : \"int32\"\n              }\n            }\n          }\n        },\n        \"security\" : [ {\n          \"api_key\" : [ ]\n        } ],\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/store/order\" : {\n      \"post\" : {\n        \"tags\" : [ \"store\" ],\n        \"summary\" : \"Place an order for a pet\",\n        \"description\" : \"\",\n        \"operationId\" : \"placeOrder\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"order placed for purchasing the pet\",\n          \"required\" : true,\n          \"schema\" : {\n            \"$ref\" : \"#/definitions/Order\"\n          }\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"$ref\" : \"#/definitions/Order\"\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid Order\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/store/order/{orderId}\" : {\n      \"get\" : {\n        \"tags\" : [ \"store\" ],\n        \"summary\" : \"Find purchase order by ID\",\n        \"description\" : \"For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions\",\n        \"operationId\" : \"getOrderById\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"OrderId\",\n          \"in\" : \"path\",\n          \"description\" : \"ID of pet that needs to be fetched\",\n          \"required\" : true,\n          \"type\" : \"integer\",\n          \"maximum\" : 10.0,\n          \"minimum\" : 1.0,\n          \"format\" : \"int64\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"$ref\" : \"#/definitions/Order\"\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid ID supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"Order not found\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      },\n      \"delete\" : {\n        \"tags\" : [ \"store\" ],\n        \"summary\" : \"Delete purchase order by ID\",\n        \"description\" : \"For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\",\n        \"operationId\" : \"deleteOrder\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"orderId\",\n          \"in\" : \"path\",\n          \"description\" : \"ID of the order that needs to be deleted\",\n          \"required\" : true,\n          \"type\" : \"integer\",\n          \"minimum\" : 1.0,\n          \"format\" : \"int64\"\n        } ],\n        \"responses\" : {\n          \"400\" : {\n            \"description\" : \"Invalid ID supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"Order not found\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/user\" : {\n      \"post\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Create user\",\n        \"description\" : \"This can only be done by the logged in user.\",\n        \"operationId\" : \"createUser\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"Created user object\",\n          \"required\" : true,\n          \"schema\" : {\n            \"$ref\" : \"#/definitions/User\"\n          }\n        } ],\n        \"responses\" : {\n          \"default\" : {\n            \"description\" : \"successful operation\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/user/createWithArray\" : {\n      \"post\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Creates list of users with given input array\",\n        \"description\" : \"\",\n        \"operationId\" : \"createUsersWithArrayInput\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"List of user object\",\n          \"required\" : true,\n          \"schema\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/definitions/User\"\n            }\n          }\n        } ],\n        \"responses\" : {\n          \"default\" : {\n            \"description\" : \"successful operation\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/user/createWithList\" : {\n      \"post\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Creates list of users with given input array\",\n        \"description\" : \"\",\n        \"operationId\" : \"createUsersWithListInput\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"List of user object\",\n          \"required\" : true,\n          \"schema\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/definitions/User\"\n            }\n          }\n        } ],\n        \"responses\" : {\n          \"default\" : {\n            \"description\" : \"successful operation\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/user/login\" : {\n      \"get\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Logs user into the system\",\n        \"description\" : \"\",\n        \"operationId\" : \"loginUser\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"username\",\n          \"in\" : \"query\",\n          \"description\" : \"The user name for login\",\n          \"required\" : true,\n          \"type\" : \"string\"\n        }, {\n          \"name\" : \"password\",\n          \"in\" : \"query\",\n          \"description\" : \"The password for login in clear text\",\n          \"required\" : true,\n          \"type\" : \"string\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"type\" : \"string\"\n            },\n            \"headers\" : {\n              \"X-Rate-Limit\" : {\n                \"type\" : \"integer\",\n                \"format\" : \"int32\",\n                \"description\" : \"calls per hour allowed by the user\"\n              },\n              \"X-Expires-After\" : {\n                \"type\" : \"string\",\n                \"format\" : \"date-time\",\n                \"description\" : \"date in UTC when token expires\"\n              }\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid username/password supplied\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/user/logout\" : {\n      \"get\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Logs out current logged in user session\",\n        \"description\" : \"\",\n        \"operationId\" : \"logoutUser\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ ],\n        \"responses\" : {\n          \"default\" : {\n            \"description\" : \"successful operation\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/user/{username}\" : {\n      \"get\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Get user by user name\",\n        \"description\" : \"\",\n        \"operationId\" : \"getUserByName\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"username\",\n          \"in\" : \"path\",\n          \"description\" : \"The name that needs to be fetched. Use user1 for testing. \",\n          \"required\" : true,\n          \"type\" : \"string\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"$ref\" : \"#/definitions/User\"\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid username supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"User not found\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      },\n      \"put\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Updated user\",\n        \"description\" : \"This can only be done by the logged in user.\",\n        \"operationId\" : \"updateUser\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"username\",\n          \"in\" : \"path\",\n          \"description\" : \"name that need to be updated\",\n          \"required\" : true,\n          \"type\" : \"string\"\n        }, {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"Updated user object\",\n          \"required\" : true,\n          \"schema\" : {\n            \"$ref\" : \"#/definitions/User\"\n          }\n        } ],\n        \"responses\" : {\n          \"400\" : {\n            \"description\" : \"Invalid user supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"User not found\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      },\n      \"delete\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Delete user\",\n        \"description\" : \"This can only be done by the logged in user.\",\n        \"operationId\" : \"deleteUser\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"username\",\n          \"in\" : \"path\",\n          \"description\" : \"The name that needs to be deleted\",\n          \"required\" : true,\n          \"type\" : \"string\"\n        } ],\n        \"responses\" : {\n          \"400\" : {\n            \"description\" : \"Invalid username supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"User not found\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    }\n  },\n  \"securityDefinitions\" : {\n    \"petstore_auth\" : {\n      \"type\" : \"oauth2\",\n      \"authorizationUrl\" : \"http://petstore.swagger.io/oauth/dialog\",\n      \"flow\" : \"implicit\",\n      \"scopes\" : {\n        \"write:pets\" : \"modify pets in your account\",\n        \"read:pets\" : \"read your pets\"\n      }\n    },\n    \"api_key\" : {\n      \"type\" : \"apiKey\",\n      \"name\" : \"api_key\",\n      \"in\" : \"header\"\n    }\n  },\n  \"definitions\" : {\n    \"Order\" : {\n      \"type\" : \"object\",\n      \"properties\" : {\n        \"id\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        },\n        \"petId\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        },\n        \"quantity\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int32\"\n        },\n        \"shipDate\" : {\n          \"type\" : \"string\",\n          \"format\" : \"date-time\"\n        },\n        \"status\" : {\n          \"type\" : \"string\",\n          \"description\" : \"Order Status\",\n          \"enum\" : [ \"placed\", \"approved\", \"delivered\" ]\n        },\n        \"complete\" : {\n          \"type\" : \"boolean\",\n          \"default\" : false\n        }\n      },\n      \"xml\" : {\n        \"name\" : \"Order\"\n      }\n    },\n    \"Category\" : {\n      \"type\" : \"object\",\n      \"properties\" : {\n        \"id\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        },\n        \"name\" : {\n          \"type\" : \"string\"\n        }\n      },\n      \"description\" : \"some description\",\n      \"xml\" : {\n        \"name\" : \"Category\"\n      }\n    },\n    \"User\" : {\n      \"type\" : \"object\",\n      \"properties\" : {\n        \"id\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        },\n        \"username\" : {\n          \"type\" : \"string\"\n        },\n        \"firstName\" : {\n          \"type\" : \"string\"\n        },\n        \"lastName\" : {\n          \"type\" : \"string\"\n        },\n        \"email\" : {\n          \"type\" : \"string\"\n        },\n        \"password\" : {\n          \"type\" : \"string\"\n        },\n        \"phone\" : {\n          \"type\" : \"string\"\n        },\n        \"userStatus\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int32\",\n          \"description\" : \"User Status\"\n        }\n      },\n      \"xml\" : {\n        \"name\" : \"User\"\n      }\n    },\n    \"Tag\" : {\n      \"type\" : \"object\",\n      \"properties\" : {\n        \"id\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        },\n        \"name\" : {\n          \"type\" : \"string\"\n        }\n      },\n      \"xml\" : {\n        \"name\" : \"Tag\"\n      }\n    },\n    \"Pet\" : {\n      \"type\" : \"object\",\n      \"required\" : [ \"name\", \"photoUrls\" ],\n      \"properties\" : {\n        \"id\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        },\n        \"category\" : {\n          \"$ref\" : \"#/definitions/Category\"\n        },\n        \"name\" : {\n          \"type\" : \"string\",\n          \"example\" : \"doggie\"\n        },\n        \"photoUrls\" : {\n          \"type\" : \"array\",\n          \"xml\" : {\n            \"name\" : \"photoUrl\",\n            \"wrapped\" : true\n          },\n          \"items\" : {\n            \"type\" : \"string\"\n          }\n        },\n        \"tags\" : {\n          \"type\" : \"array\",\n          \"xml\" : {\n            \"name\" : \"tag\",\n            \"wrapped\" : true\n          },\n          \"items\" : {\n            \"$ref\" : \"#/definitions/Tag\"\n          }\n        },\n        \"status\" : {\n          \"type\" : \"string\",\n          \"description\" : \"pet status in the store\",\n          \"enum\" : [ \"available\", \"pending\", \"sold\" ]\n        }\n      },\n      \"xml\" : {\n        \"name\" : \"Pet\"\n      }\n    },\n    \"ApiResponse\" : {\n      \"type\" : \"object\",\n      \"properties\" : {\n        \"code\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int32\"\n        },\n        \"type\" : {\n          \"type\" : \"string\"\n        },\n        \"message\" : {\n          \"type\" : \"string\"\n        }\n      }\n    }\n  },\n  \"externalDocs\" : {\n    \"description\" : \"Find out more about Swagger\",\n    \"url\" : \"http://swagger.io\"\n  }\n}",
        "modelDocPath": "docs/",
        "scmDeveloperConnection": "scm:git:git@github.com:swagger-api/swagger-codegen.git",
        "vertxSwaggerRouterVersion": "1.4.1-SNAPSHOT",
        "importPath": "io.swagger.server.api.verticle.User",
        "licenseUrl": "http://www.apache.org/licenses/LICENSE-2.0.html",
        "modelPackage": "io.swagger.server.api.model",
        "apiDocPath": "docs/",
        "licenseInfo": "Apache 2.0",
        "serverPort": "8080",
        "basePathWithoutHost": "/v2",
        "developerOrganizationUrl": "http://swagger.io",
        "operations": {
          "classname": "UserApi",
          "operation": [
            {
              "responseHeaders": [],
              "hasAuthMethods": false,
              "hasConsumes": false,
              "hasProduces": true,
              "hasParams": true,
              "hasOptionalParams": false,
              "returnTypeIsPrimitive": false,
              "returnSimpleType": false,
              "subresourceOperation": false,
              "isMapContainer": false,
              "isListContainer": false,
              "isMultipart": false,
              "hasMore": true,
              "isResponseBinary": false,
              "isResponseFile": false,
              "hasReference": false,
              "isRestfulIndex": false,
              "isRestfulShow": false,
              "isRestfulCreate": false,
              "isRestfulUpdate": false,
              "isRestfulDestroy": false,
              "isRestful": false,
              "path": "/user",
              "operationId": "createUser",
              "httpMethod": "post",
              "summary": "Create user",
              "unescapedNotes": "This can only be done by the logged in user.",
              "notes": "This can only be done by the logged in user.",
              "baseName": "User",
              "produces": [
                {
                  "hasMore": "true",
                  "mediaType": "application/xml"
                },
                {
                  "hasMore": null,
                  "mediaType": "application/json"
                }
              ],
              "bodyParam": {
                "isFormParam": false,
                "isQueryParam": false,
                "isPathParam": false,
                "isHeaderParam": false,
                "isCookieParam": false,
                "isBodyParam": true,
                "hasMore": false,
                "isContainer": false,
                "secondaryParam": false,
                "isCollectionFormatMulti": false,
                "isPrimitiveType": false,
                "baseName": "body",
                "paramName": "body",
                "dataType": "ModelUser",
                "description": "Created user object",
                "unescapedDescription": "Created user object",
                "baseType": "ModelUser",
                "example": "new ModelUser()",
                "jsonSchema": "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"Created user object\",\n  \"required\" : true,\n  \"schema\" : {\n    \"$ref\" : \"#/definitions/User\"\n  }\n}",
                "isString": false,
                "isInteger": false,
                "isLong": false,
                "isFloat": false,
                "isDouble": false,
                "isByteArray": false,
                "isBinary": false,
                "isBoolean": false,
                "isDate": false,
                "isDateTime": false,
                "isListContainer": false,
                "isMapContainer": false,
                "isFile": false,
                "notFile": false,
                "isEnum": false,
                "vendorExtensions": {},
                "hasValidation": false,
                "required": true,
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "uniqueItems": false
              },
              "allParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": true,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": false,
                  "baseName": "body",
                  "paramName": "body",
                  "dataType": "ModelUser",
                  "description": "Created user object",
                  "unescapedDescription": "Created user object",
                  "baseType": "ModelUser",
                  "example": "new ModelUser()",
                  "jsonSchema": "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"Created user object\",\n  \"required\" : true,\n  \"schema\" : {\n    \"$ref\" : \"#/definitions/User\"\n  }\n}",
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "bodyParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": true,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": false,
                  "baseName": "body",
                  "paramName": "body",
                  "dataType": "ModelUser",
                  "description": "Created user object",
                  "unescapedDescription": "Created user object",
                  "baseType": "ModelUser",
                  "example": "new ModelUser()",
                  "jsonSchema": "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"Created user object\",\n  \"required\" : true,\n  \"schema\" : {\n    \"$ref\" : \"#/definitions/User\"\n  }\n}",
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "pathParams": [],
              "queryParams": [],
              "headerParams": [],
              "formParams": [],
              "tags": [
                "User"
              ],
              "responses": [
                {
                  "headers": [],
                  "code": "0",
                  "message": "successful operation",
                  "hasMore": false,
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": true,
                  "simpleType": true,
                  "primitiveType": true,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "jsonSchema": "{\n  \"description\" : \"successful operation\"\n}",
                  "vendorExtensions": {
                  }
                }
              ],
              "imports": [
                "MainApiException",
                "ModelUser"
              ],
              "vendorExtensions": {
                "x-contentType": "application/json",
                "x-accepts": "application/json",
                "x-serviceId": "createUser",
                "x-serviceIduC": "CREATEUSER",
                "x-serviceId-varName": "CREATEUSER_SERVICE_ID",
                "x-serviceId-SQL": "INSERT INTO TABLE_NAME",
                "x-serviceId-Query-Method": "updateWithParams"
              },
              "nickname": "createUser",
              "operationIdLowerCase": "createuser",
              "hasBodyParam": true,
              "hasQueryParams": false,
              "hasHeaderParams": false,
              "hasFormParams": false,
              "hasExamples": false,
              "hasPathParams": false,
              "restfulShow": false,
              "restfulIndex": false,
              "restfulCreate": false,
              "restfulUpdate": false,
              "restfulDestroy": false,
              "restful": false
            },
            {
              "responseHeaders": [],
              "hasAuthMethods": false,
              "hasConsumes": false,
              "hasProduces": true,
              "hasParams": true,
              "hasOptionalParams": false,
              "returnTypeIsPrimitive": false,
              "returnSimpleType": false,
              "subresourceOperation": false,
              "isMapContainer": false,
              "isListContainer": false,
              "isMultipart": false,
              "hasMore": true,
              "isResponseBinary": false,
              "isResponseFile": false,
              "hasReference": false,
              "isRestfulIndex": false,
              "isRestfulShow": false,
              "isRestfulCreate": false,
              "isRestfulUpdate": false,
              "isRestfulDestroy": false,
              "isRestful": false,
              "path": "/user/createWithArray",
              "operationId": "createUsersWithArrayInput",
              "httpMethod": "post",
              "summary": "Creates list of users with given input array",
              "unescapedNotes": "",
              "notes": "",
              "baseName": "User",
              "produces": [
                {
                  "hasMore": "true",
                  "mediaType": "application/xml"
                },
                {
                  "hasMore": null,
                  "mediaType": "application/json"
                }
              ],
              "bodyParam": {
                "isFormParam": false,
                "isQueryParam": false,
                "isPathParam": false,
                "isHeaderParam": false,
                "isCookieParam": false,
                "isBodyParam": true,
                "hasMore": false,
                "isContainer": true,
                "secondaryParam": false,
                "isCollectionFormatMulti": false,
                "isPrimitiveType": false,
                "baseName": "body",
                "paramName": "body",
                "dataType": "List<ModelUser>",
                "description": "List of user object",
                "unescapedDescription": "List of user object",
                "baseType": "ModelUser",
                "example": "Arrays.asList(new ModelUser())",
                "jsonSchema": "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"List of user object\",\n  \"required\" : true,\n  \"schema\" : {\n    \"type\" : \"array\",\n    \"items\" : {\n      \"$ref\" : \"#/definitions/User\"\n    }\n  }\n}",
                "isString": false,
                "isInteger": false,
                "isLong": false,
                "isFloat": false,
                "isDouble": false,
                "isByteArray": false,
                "isBinary": false,
                "isBoolean": false,
                "isDate": false,
                "isDateTime": false,
                "isListContainer": true,
                "isMapContainer": false,
                "isFile": false,
                "notFile": false,
                "isEnum": false,
                "items": {
                  "baseName": "inner",
                  "complexType": "ModelUser",
                  "getter": "getInner",
                  "setter": "setInner",
                  "datatype": "List<ModelUser>",
                  "datatypeWithEnum": "List<ModelUser>",
                  "name": "inner",
                  "defaultValue": "new ArrayList<ModelUser>()",
                  "defaultValueWithParam": " = data.inner;",
                  "baseType": "List",
                  "containerType": "array",
                  "example": "null",
                  "jsonSchema": "{\n  \"type\" : \"array\",\n  \"items\" : {\n    \"$ref\" : \"#/definitions/User\"\n  }\n}",
                  "exclusiveMinimum": false,
                  "exclusiveMaximum": false,
                  "hasMore": false,
                  "required": false,
                  "secondaryParam": false,
                  "hasMoreNonReadOnly": false,
                  "isPrimitiveType": false,
                  "isContainer": true,
                  "isNotContainer": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isFile": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": true,
                  "isMapContainer": false,
                  "isEnum": false,
                  "isReadOnly": false,
                  "items": {
                    "baseName": "inner",
                    "complexType": "ModelUser",
                    "getter": "getInner",
                    "setter": "setInner",
                    "datatype": "ModelUser",
                    "datatypeWithEnum": "ModelUser",
                    "name": "inner",
                    "defaultValue": "null",
                    "defaultValueWithParam": " = data.inner;",
                    "baseType": "ModelUser",
                    "example": "null",
                    "jsonSchema": "{\n  \"$ref\" : \"#/definitions/User\"\n}",
                    "exclusiveMinimum": false,
                    "exclusiveMaximum": false,
                    "hasMore": false,
                    "required": false,
                    "secondaryParam": false,
                    "hasMoreNonReadOnly": false,
                    "isPrimitiveType": false,
                    "isContainer": false,
                    "isNotContainer": true,
                    "isString": false,
                    "isInteger": false,
                    "isLong": false,
                    "isFloat": false,
                    "isDouble": false,
                    "isByteArray": false,
                    "isBinary": false,
                    "isFile": false,
                    "isBoolean": false,
                    "isDate": false,
                    "isDateTime": false,
                    "isListContainer": false,
                    "isMapContainer": false,
                    "isEnum": false,
                    "isReadOnly": false,
                    "vendorExtensions": {},
                    "hasValidation": false,
                    "isInherited": false,
                    "nameInCamelCase": "Inner"
                  },
                  "vendorExtensions": {
                  },
                  "hasValidation": false,
                  "isInherited": false,
                  "nameInCamelCase": "Inner"
                },
                "vendorExtensions": {},
                "hasValidation": false,
                "required": true,
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "uniqueItems": false
              },
              "allParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": true,
                  "hasMore": false,
                  "isContainer": true,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": false,
                  "baseName": "body",
                  "paramName": "body",
                  "dataType": "List<ModelUser>",
                  "description": "List of user object",
                  "unescapedDescription": "List of user object",
                  "baseType": "ModelUser",
                  "example": "Arrays.asList(new ModelUser())",
                  "jsonSchema": "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"List of user object\",\n  \"required\" : true,\n  \"schema\" : {\n    \"type\" : \"array\",\n    \"items\" : {\n      \"$ref\" : \"#/definitions/User\"\n    }\n  }\n}",
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": true,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "items": {
                    "baseName": "inner",
                    "complexType": "ModelUser",
                    "getter": "getInner",
                    "setter": "setInner",
                    "datatype": "List<ModelUser>",
                    "datatypeWithEnum": "List<ModelUser>",
                    "name": "inner",
                    "defaultValue": "new ArrayList<ModelUser>()",
                    "defaultValueWithParam": " = data.inner;",
                    "baseType": "List",
                    "containerType": "array",
                    "example": "null",
                    "jsonSchema": "{\n  \"type\" : \"array\",\n  \"items\" : {\n    \"$ref\" : \"#/definitions/User\"\n  }\n}",
                    "exclusiveMinimum": false,
                    "exclusiveMaximum": false,
                    "hasMore": false,
                    "required": false,
                    "secondaryParam": false,
                    "hasMoreNonReadOnly": false,
                    "isPrimitiveType": false,
                    "isContainer": true,
                    "isNotContainer": false,
                    "isString": false,
                    "isInteger": false,
                    "isLong": false,
                    "isFloat": false,
                    "isDouble": false,
                    "isByteArray": false,
                    "isBinary": false,
                    "isFile": false,
                    "isBoolean": false,
                    "isDate": false,
                    "isDateTime": false,
                    "isListContainer": true,
                    "isMapContainer": false,
                    "isEnum": false,
                    "isReadOnly": false,
                    "items": {
                      "baseName": "inner",
                      "complexType": "ModelUser",
                      "getter": "getInner",
                      "setter": "setInner",
                      "datatype": "ModelUser",
                      "datatypeWithEnum": "ModelUser",
                      "name": "inner",
                      "defaultValue": "null",
                      "defaultValueWithParam": " = data.inner;",
                      "baseType": "ModelUser",
                      "example": "null",
                      "jsonSchema": "{\n  \"$ref\" : \"#/definitions/User\"\n}",
                      "exclusiveMinimum": false,
                      "exclusiveMaximum": false,
                      "hasMore": false,
                      "required": false,
                      "secondaryParam": false,
                      "hasMoreNonReadOnly": false,
                      "isPrimitiveType": false,
                      "isContainer": false,
                      "isNotContainer": true,
                      "isString": false,
                      "isInteger": false,
                      "isLong": false,
                      "isFloat": false,
                      "isDouble": false,
                      "isByteArray": false,
                      "isBinary": false,
                      "isFile": false,
                      "isBoolean": false,
                      "isDate": false,
                      "isDateTime": false,
                      "isListContainer": false,
                      "isMapContainer": false,
                      "isEnum": false,
                      "isReadOnly": false,
                      "vendorExtensions": {
                      },
                      "hasValidation": false,
                      "isInherited": false,
                      "nameInCamelCase": "Inner"
                    },
                    "vendorExtensions": {},
                    "hasValidation": false,
                    "isInherited": false,
                    "nameInCamelCase": "Inner"
                  },
                  "vendorExtensions": {
                  },
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "bodyParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": true,
                  "hasMore": false,
                  "isContainer": true,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": false,
                  "baseName": "body",
                  "paramName": "body",
                  "dataType": "List<ModelUser>",
                  "description": "List of user object",
                  "unescapedDescription": "List of user object",
                  "baseType": "ModelUser",
                  "example": "Arrays.asList(new ModelUser())",
                  "jsonSchema": "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"List of user object\",\n  \"required\" : true,\n  \"schema\" : {\n    \"type\" : \"array\",\n    \"items\" : {\n      \"$ref\" : \"#/definitions/User\"\n    }\n  }\n}",
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": true,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "items": {
                    "baseName": "inner",
                    "complexType": "ModelUser",
                    "getter": "getInner",
                    "setter": "setInner",
                    "datatype": "List<ModelUser>",
                    "datatypeWithEnum": "List<ModelUser>",
                    "name": "inner",
                    "defaultValue": "new ArrayList<ModelUser>()",
                    "defaultValueWithParam": " = data.inner;",
                    "baseType": "List",
                    "containerType": "array",
                    "example": "null",
                    "jsonSchema": "{\n  \"type\" : \"array\",\n  \"items\" : {\n    \"$ref\" : \"#/definitions/User\"\n  }\n}",
                    "exclusiveMinimum": false,
                    "exclusiveMaximum": false,
                    "hasMore": false,
                    "required": false,
                    "secondaryParam": false,
                    "hasMoreNonReadOnly": false,
                    "isPrimitiveType": false,
                    "isContainer": true,
                    "isNotContainer": false,
                    "isString": false,
                    "isInteger": false,
                    "isLong": false,
                    "isFloat": false,
                    "isDouble": false,
                    "isByteArray": false,
                    "isBinary": false,
                    "isFile": false,
                    "isBoolean": false,
                    "isDate": false,
                    "isDateTime": false,
                    "isListContainer": true,
                    "isMapContainer": false,
                    "isEnum": false,
                    "isReadOnly": false,
                    "items": {
                      "baseName": "inner",
                      "complexType": "ModelUser",
                      "getter": "getInner",
                      "setter": "setInner",
                      "datatype": "ModelUser",
                      "datatypeWithEnum": "ModelUser",
                      "name": "inner",
                      "defaultValue": "null",
                      "defaultValueWithParam": " = data.inner;",
                      "baseType": "ModelUser",
                      "example": "null",
                      "jsonSchema": "{\n  \"$ref\" : \"#/definitions/User\"\n}",
                      "exclusiveMinimum": false,
                      "exclusiveMaximum": false,
                      "hasMore": false,
                      "required": false,
                      "secondaryParam": false,
                      "hasMoreNonReadOnly": false,
                      "isPrimitiveType": false,
                      "isContainer": false,
                      "isNotContainer": true,
                      "isString": false,
                      "isInteger": false,
                      "isLong": false,
                      "isFloat": false,
                      "isDouble": false,
                      "isByteArray": false,
                      "isBinary": false,
                      "isFile": false,
                      "isBoolean": false,
                      "isDate": false,
                      "isDateTime": false,
                      "isListContainer": false,
                      "isMapContainer": false,
                      "isEnum": false,
                      "isReadOnly": false,
                      "vendorExtensions": {
                      },
                      "hasValidation": false,
                      "isInherited": false,
                      "nameInCamelCase": "Inner"
                    },
                    "vendorExtensions": {},
                    "hasValidation": false,
                    "isInherited": false,
                    "nameInCamelCase": "Inner"
                  },
                  "vendorExtensions": {
                  },
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "pathParams": [],
              "queryParams": [],
              "headerParams": [],
              "formParams": [],
              "tags": [
                "User"
              ],
              "responses": [
                {
                  "headers": [],
                  "code": "0",
                  "message": "successful operation",
                  "hasMore": false,
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": true,
                  "simpleType": true,
                  "primitiveType": true,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "jsonSchema": "{\n  \"description\" : \"successful operation\"\n}",
                  "vendorExtensions": {
                  }
                }
              ],
              "imports": [
                "List",
                "MainApiException",
                "ModelUser"
              ],
              "vendorExtensions": {
                "x-contentType": "application/json",
                "x-accepts": "application/json",
                "x-serviceId": "createUsersWithArrayInput",
                "x-serviceIduC": "CREATEUSERSWITHARRAYINPUT",
                "x-serviceId-varName": "CREATEUSERSWITHARRAYINPUT_SERVICE_ID",
                "x-serviceId-SQL": "INSERT INTO TABLE_NAME",
                "x-serviceId-Query-Method": "updateWithParams"
              },
              "nickname": "createUsersWithArrayInput",
              "operationIdLowerCase": "createuserswitharrayinput",
              "hasBodyParam": true,
              "hasQueryParams": false,
              "hasHeaderParams": false,
              "hasFormParams": false,
              "hasExamples": false,
              "hasPathParams": false,
              "restfulShow": false,
              "restfulIndex": false,
              "restfulCreate": false,
              "restfulUpdate": false,
              "restfulDestroy": false,
              "restful": false
            },
            {
              "responseHeaders": [],
              "hasAuthMethods": false,
              "hasConsumes": false,
              "hasProduces": true,
              "hasParams": true,
              "hasOptionalParams": false,
              "returnTypeIsPrimitive": false,
              "returnSimpleType": false,
              "subresourceOperation": false,
              "isMapContainer": false,
              "isListContainer": false,
              "isMultipart": false,
              "hasMore": true,
              "isResponseBinary": false,
              "isResponseFile": false,
              "hasReference": false,
              "isRestfulIndex": false,
              "isRestfulShow": false,
              "isRestfulCreate": false,
              "isRestfulUpdate": false,
              "isRestfulDestroy": false,
              "isRestful": false,
              "path": "/user/createWithList",
              "operationId": "createUsersWithListInput",
              "httpMethod": "post",
              "summary": "Creates list of users with given input array",
              "unescapedNotes": "",
              "notes": "",
              "baseName": "User",
              "produces": [
                {
                  "hasMore": "true",
                  "mediaType": "application/xml"
                },
                {
                  "hasMore": null,
                  "mediaType": "application/json"
                }
              ],
              "bodyParam": {
                "isFormParam": false,
                "isQueryParam": false,
                "isPathParam": false,
                "isHeaderParam": false,
                "isCookieParam": false,
                "isBodyParam": true,
                "hasMore": false,
                "isContainer": true,
                "secondaryParam": false,
                "isCollectionFormatMulti": false,
                "isPrimitiveType": false,
                "baseName": "body",
                "paramName": "body",
                "dataType": "List<ModelUser>",
                "description": "List of user object",
                "unescapedDescription": "List of user object",
                "baseType": "ModelUser",
                "example": "Arrays.asList(new ModelUser())",
                "jsonSchema": "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"List of user object\",\n  \"required\" : true,\n  \"schema\" : {\n    \"type\" : \"array\",\n    \"items\" : {\n      \"$ref\" : \"#/definitions/User\"\n    }\n  }\n}",
                "isString": false,
                "isInteger": false,
                "isLong": false,
                "isFloat": false,
                "isDouble": false,
                "isByteArray": false,
                "isBinary": false,
                "isBoolean": false,
                "isDate": false,
                "isDateTime": false,
                "isListContainer": true,
                "isMapContainer": false,
                "isFile": false,
                "notFile": false,
                "isEnum": false,
                "items": {
                  "baseName": "inner",
                  "complexType": "ModelUser",
                  "getter": "getInner",
                  "setter": "setInner",
                  "datatype": "List<ModelUser>",
                  "datatypeWithEnum": "List<ModelUser>",
                  "name": "inner",
                  "defaultValue": "new ArrayList<ModelUser>()",
                  "defaultValueWithParam": " = data.inner;",
                  "baseType": "List",
                  "containerType": "array",
                  "example": "null",
                  "jsonSchema": "{\n  \"type\" : \"array\",\n  \"items\" : {\n    \"$ref\" : \"#/definitions/User\"\n  }\n}",
                  "exclusiveMinimum": false,
                  "exclusiveMaximum": false,
                  "hasMore": false,
                  "required": false,
                  "secondaryParam": false,
                  "hasMoreNonReadOnly": false,
                  "isPrimitiveType": false,
                  "isContainer": true,
                  "isNotContainer": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isFile": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": true,
                  "isMapContainer": false,
                  "isEnum": false,
                  "isReadOnly": false,
                  "items": {
                    "baseName": "inner",
                    "complexType": "ModelUser",
                    "getter": "getInner",
                    "setter": "setInner",
                    "datatype": "ModelUser",
                    "datatypeWithEnum": "ModelUser",
                    "name": "inner",
                    "defaultValue": "null",
                    "defaultValueWithParam": " = data.inner;",
                    "baseType": "ModelUser",
                    "example": "null",
                    "jsonSchema": "{\n  \"$ref\" : \"#/definitions/User\"\n}",
                    "exclusiveMinimum": false,
                    "exclusiveMaximum": false,
                    "hasMore": false,
                    "required": false,
                    "secondaryParam": false,
                    "hasMoreNonReadOnly": false,
                    "isPrimitiveType": false,
                    "isContainer": false,
                    "isNotContainer": true,
                    "isString": false,
                    "isInteger": false,
                    "isLong": false,
                    "isFloat": false,
                    "isDouble": false,
                    "isByteArray": false,
                    "isBinary": false,
                    "isFile": false,
                    "isBoolean": false,
                    "isDate": false,
                    "isDateTime": false,
                    "isListContainer": false,
                    "isMapContainer": false,
                    "isEnum": false,
                    "isReadOnly": false,
                    "vendorExtensions": {},
                    "hasValidation": false,
                    "isInherited": false,
                    "nameInCamelCase": "Inner"
                  },
                  "vendorExtensions": {
                  },
                  "hasValidation": false,
                  "isInherited": false,
                  "nameInCamelCase": "Inner"
                },
                "vendorExtensions": {},
                "hasValidation": false,
                "required": true,
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "uniqueItems": false
              },
              "allParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": true,
                  "hasMore": false,
                  "isContainer": true,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": false,
                  "baseName": "body",
                  "paramName": "body",
                  "dataType": "List<ModelUser>",
                  "description": "List of user object",
                  "unescapedDescription": "List of user object",
                  "baseType": "ModelUser",
                  "example": "Arrays.asList(new ModelUser())",
                  "jsonSchema": "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"List of user object\",\n  \"required\" : true,\n  \"schema\" : {\n    \"type\" : \"array\",\n    \"items\" : {\n      \"$ref\" : \"#/definitions/User\"\n    }\n  }\n}",
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": true,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "items": {
                    "baseName": "inner",
                    "complexType": "ModelUser",
                    "getter": "getInner",
                    "setter": "setInner",
                    "datatype": "List<ModelUser>",
                    "datatypeWithEnum": "List<ModelUser>",
                    "name": "inner",
                    "defaultValue": "new ArrayList<ModelUser>()",
                    "defaultValueWithParam": " = data.inner;",
                    "baseType": "List",
                    "containerType": "array",
                    "example": "null",
                    "jsonSchema": "{\n  \"type\" : \"array\",\n  \"items\" : {\n    \"$ref\" : \"#/definitions/User\"\n  }\n}",
                    "exclusiveMinimum": false,
                    "exclusiveMaximum": false,
                    "hasMore": false,
                    "required": false,
                    "secondaryParam": false,
                    "hasMoreNonReadOnly": false,
                    "isPrimitiveType": false,
                    "isContainer": true,
                    "isNotContainer": false,
                    "isString": false,
                    "isInteger": false,
                    "isLong": false,
                    "isFloat": false,
                    "isDouble": false,
                    "isByteArray": false,
                    "isBinary": false,
                    "isFile": false,
                    "isBoolean": false,
                    "isDate": false,
                    "isDateTime": false,
                    "isListContainer": true,
                    "isMapContainer": false,
                    "isEnum": false,
                    "isReadOnly": false,
                    "items": {
                      "baseName": "inner",
                      "complexType": "ModelUser",
                      "getter": "getInner",
                      "setter": "setInner",
                      "datatype": "ModelUser",
                      "datatypeWithEnum": "ModelUser",
                      "name": "inner",
                      "defaultValue": "null",
                      "defaultValueWithParam": " = data.inner;",
                      "baseType": "ModelUser",
                      "example": "null",
                      "jsonSchema": "{\n  \"$ref\" : \"#/definitions/User\"\n}",
                      "exclusiveMinimum": false,
                      "exclusiveMaximum": false,
                      "hasMore": false,
                      "required": false,
                      "secondaryParam": false,
                      "hasMoreNonReadOnly": false,
                      "isPrimitiveType": false,
                      "isContainer": false,
                      "isNotContainer": true,
                      "isString": false,
                      "isInteger": false,
                      "isLong": false,
                      "isFloat": false,
                      "isDouble": false,
                      "isByteArray": false,
                      "isBinary": false,
                      "isFile": false,
                      "isBoolean": false,
                      "isDate": false,
                      "isDateTime": false,
                      "isListContainer": false,
                      "isMapContainer": false,
                      "isEnum": false,
                      "isReadOnly": false,
                      "vendorExtensions": {
                      },
                      "hasValidation": false,
                      "isInherited": false,
                      "nameInCamelCase": "Inner"
                    },
                    "vendorExtensions": {},
                    "hasValidation": false,
                    "isInherited": false,
                    "nameInCamelCase": "Inner"
                  },
                  "vendorExtensions": {
                  },
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "bodyParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": true,
                  "hasMore": false,
                  "isContainer": true,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": false,
                  "baseName": "body",
                  "paramName": "body",
                  "dataType": "List<ModelUser>",
                  "description": "List of user object",
                  "unescapedDescription": "List of user object",
                  "baseType": "ModelUser",
                  "example": "Arrays.asList(new ModelUser())",
                  "jsonSchema": "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"List of user object\",\n  \"required\" : true,\n  \"schema\" : {\n    \"type\" : \"array\",\n    \"items\" : {\n      \"$ref\" : \"#/definitions/User\"\n    }\n  }\n}",
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": true,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "items": {
                    "baseName": "inner",
                    "complexType": "ModelUser",
                    "getter": "getInner",
                    "setter": "setInner",
                    "datatype": "List<ModelUser>",
                    "datatypeWithEnum": "List<ModelUser>",
                    "name": "inner",
                    "defaultValue": "new ArrayList<ModelUser>()",
                    "defaultValueWithParam": " = data.inner;",
                    "baseType": "List",
                    "containerType": "array",
                    "example": "null",
                    "jsonSchema": "{\n  \"type\" : \"array\",\n  \"items\" : {\n    \"$ref\" : \"#/definitions/User\"\n  }\n}",
                    "exclusiveMinimum": false,
                    "exclusiveMaximum": false,
                    "hasMore": false,
                    "required": false,
                    "secondaryParam": false,
                    "hasMoreNonReadOnly": false,
                    "isPrimitiveType": false,
                    "isContainer": true,
                    "isNotContainer": false,
                    "isString": false,
                    "isInteger": false,
                    "isLong": false,
                    "isFloat": false,
                    "isDouble": false,
                    "isByteArray": false,
                    "isBinary": false,
                    "isFile": false,
                    "isBoolean": false,
                    "isDate": false,
                    "isDateTime": false,
                    "isListContainer": true,
                    "isMapContainer": false,
                    "isEnum": false,
                    "isReadOnly": false,
                    "items": {
                      "baseName": "inner",
                      "complexType": "ModelUser",
                      "getter": "getInner",
                      "setter": "setInner",
                      "datatype": "ModelUser",
                      "datatypeWithEnum": "ModelUser",
                      "name": "inner",
                      "defaultValue": "null",
                      "defaultValueWithParam": " = data.inner;",
                      "baseType": "ModelUser",
                      "example": "null",
                      "jsonSchema": "{\n  \"$ref\" : \"#/definitions/User\"\n}",
                      "exclusiveMinimum": false,
                      "exclusiveMaximum": false,
                      "hasMore": false,
                      "required": false,
                      "secondaryParam": false,
                      "hasMoreNonReadOnly": false,
                      "isPrimitiveType": false,
                      "isContainer": false,
                      "isNotContainer": true,
                      "isString": false,
                      "isInteger": false,
                      "isLong": false,
                      "isFloat": false,
                      "isDouble": false,
                      "isByteArray": false,
                      "isBinary": false,
                      "isFile": false,
                      "isBoolean": false,
                      "isDate": false,
                      "isDateTime": false,
                      "isListContainer": false,
                      "isMapContainer": false,
                      "isEnum": false,
                      "isReadOnly": false,
                      "vendorExtensions": {
                      },
                      "hasValidation": false,
                      "isInherited": false,
                      "nameInCamelCase": "Inner"
                    },
                    "vendorExtensions": {},
                    "hasValidation": false,
                    "isInherited": false,
                    "nameInCamelCase": "Inner"
                  },
                  "vendorExtensions": {
                  },
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "pathParams": [],
              "queryParams": [],
              "headerParams": [],
              "formParams": [],
              "tags": [
                "User"
              ],
              "responses": [
                {
                  "headers": [],
                  "code": "0",
                  "message": "successful operation",
                  "hasMore": false,
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": true,
                  "simpleType": true,
                  "primitiveType": true,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "jsonSchema": "{\n  \"description\" : \"successful operation\"\n}",
                  "vendorExtensions": {
                  }
                }
              ],
              "imports": [
                "List",
                "MainApiException",
                "ModelUser"
              ],
              "vendorExtensions": {
                "x-contentType": "application/json",
                "x-accepts": "application/json",
                "x-serviceId": "createUsersWithListInput",
                "x-serviceIduC": "CREATEUSERSWITHLISTINPUT",
                "x-serviceId-varName": "CREATEUSERSWITHLISTINPUT_SERVICE_ID",
                "x-serviceId-SQL": "INSERT INTO TABLE_NAME",
                "x-serviceId-Query-Method": "updateWithParams"
              },
              "nickname": "createUsersWithListInput",
              "operationIdLowerCase": "createuserswithlistinput",
              "hasBodyParam": true,
              "hasQueryParams": false,
              "hasHeaderParams": false,
              "hasFormParams": false,
              "hasExamples": false,
              "hasPathParams": false,
              "restfulShow": false,
              "restfulIndex": false,
              "restfulCreate": false,
              "restfulUpdate": false,
              "restfulDestroy": false,
              "restful": false
            },
            {
              "responseHeaders": [],
              "hasAuthMethods": false,
              "hasConsumes": false,
              "hasProduces": true,
              "hasParams": true,
              "hasOptionalParams": false,
              "returnTypeIsPrimitive": false,
              "returnSimpleType": false,
              "subresourceOperation": false,
              "isMapContainer": false,
              "isListContainer": false,
              "isMultipart": false,
              "hasMore": true,
              "isResponseBinary": false,
              "isResponseFile": false,
              "hasReference": false,
              "isRestfulIndex": false,
              "isRestfulShow": false,
              "isRestfulCreate": false,
              "isRestfulUpdate": false,
              "isRestfulDestroy": false,
              "isRestful": false,
              "path": "/user/:username",
              "operationId": "deleteUser",
              "httpMethod": "delete",
              "summary": "Delete user",
              "unescapedNotes": "This can only be done by the logged in user.",
              "notes": "This can only be done by the logged in user.",
              "baseName": "User",
              "produces": [
                {
                  "hasMore": "true",
                  "mediaType": "application/xml"
                },
                {
                  "hasMore": null,
                  "mediaType": "application/json"
                }
              ],
              "allParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": true,
                  "baseName": "username",
                  "paramName": "username",
                  "dataType": "String",
                  "description": "The name that needs to be deleted",
                  "unescapedDescription": "The name that needs to be deleted",
                  "example": "\"username_example\"",
                  "jsonSchema": "{\n  \"name\" : \"username\",\n  \"in\" : \"path\",\n  \"description\" : \"The name that needs to be deleted\",\n  \"required\" : true,\n  \"type\" : \"string\"\n}",
                  "isString": true,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "bodyParams": [],
              "pathParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": false,
                  "baseName": "username",
                  "paramName": "username",
                  "dataType": "String",
                  "description": "The name that needs to be deleted",
                  "unescapedDescription": "The name that needs to be deleted",
                  "example": "\"username_example\"",
                  "jsonSchema": "{\n  \"name\" : \"username\",\n  \"in\" : \"path\",\n  \"description\" : \"The name that needs to be deleted\",\n  \"required\" : true,\n  \"type\" : \"string\"\n}",
                  "isString": true,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "queryParams": [],
              "headerParams": [],
              "formParams": [],
              "tags": [
                "User"
              ],
              "responses": [
                {
                  "headers": [],
                  "code": "400",
                  "message": "Invalid username supplied",
                  "hasMore": true,
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": false,
                  "simpleType": true,
                  "primitiveType": true,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "jsonSchema": "{\n  \"description\" : \"Invalid username supplied\"\n}",
                  "vendorExtensions": {
                  }
                },
                {
                  "headers": [],
                  "code": "404",
                  "message": "User not found",
                  "hasMore": false,
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": false,
                  "simpleType": true,
                  "primitiveType": true,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "jsonSchema": "{\n  \"description\" : \"User not found\"\n}",
                  "vendorExtensions": {
                  }
                }
              ],
              "imports": [
                "MainApiException"
              ],
              "vendorExtensions": {
                "x-contentType": "application/json",
                "x-accepts": "application/json",
                "x-serviceId": "deleteUser",
                "x-serviceIduC": "DELETEUSER",
                "x-serviceId-varName": "DELETEUSER_SERVICE_ID",
                "x-serviceId-SQL": "DELETE FROM TABLE_NAME WHERE username = ?",
                "x-serviceId-Query-Method": "updateWithParams"
              },
              "nickname": "deleteUser",
              "operationIdLowerCase": "deleteuser",
              "hasBodyParam": false,
              "hasQueryParams": false,
              "hasHeaderParams": false,
              "hasFormParams": false,
              "hasExamples": false,
              "hasPathParams": true,
              "restfulShow": false,
              "restfulIndex": false,
              "restfulCreate": false,
              "restfulUpdate": false,
              "restfulDestroy": false,
              "restful": false
            },
            {
              "responseHeaders": [],
              "hasAuthMethods": false,
              "hasConsumes": false,
              "hasProduces": true,
              "hasParams": true,
              "hasOptionalParams": false,
              "returnTypeIsPrimitive": false,
              "returnSimpleType": true,
              "subresourceOperation": false,
              "isMapContainer": false,
              "isListContainer": false,
              "isMultipart": false,
              "hasMore": true,
              "isResponseBinary": false,
              "isResponseFile": false,
              "hasReference": false,
              "isRestfulIndex": false,
              "isRestfulShow": false,
              "isRestfulCreate": false,
              "isRestfulUpdate": false,
              "isRestfulDestroy": false,
              "isRestful": false,
              "path": "/user/:username",
              "operationId": "getUserByName",
              "returnType": "ModelUser",
              "httpMethod": "get",
              "returnBaseType": "ModelUser",
              "summary": "Get user by user name",
              "unescapedNotes": "",
              "notes": "",
              "baseName": "User",
              "defaultResponse": "null",
              "produces": [
                {
                  "hasMore": "true",
                  "mediaType": "application/xml"
                },
                {
                  "hasMore": null,
                  "mediaType": "application/json"
                }
              ],
              "allParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": true,
                  "baseName": "username",
                  "paramName": "username",
                  "dataType": "String",
                  "description": "The name that needs to be fetched. Use user1 for testing. ",
                  "unescapedDescription": "The name that needs to be fetched. Use user1 for testing. ",
                  "example": "\"username_example\"",
                  "jsonSchema": "{\n  \"name\" : \"username\",\n  \"in\" : \"path\",\n  \"description\" : \"The name that needs to be fetched. Use user1 for testing. \",\n  \"required\" : true,\n  \"type\" : \"string\"\n}",
                  "isString": true,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "bodyParams": [],
              "pathParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": false,
                  "baseName": "username",
                  "paramName": "username",
                  "dataType": "String",
                  "description": "The name that needs to be fetched. Use user1 for testing. ",
                  "unescapedDescription": "The name that needs to be fetched. Use user1 for testing. ",
                  "example": "\"username_example\"",
                  "jsonSchema": "{\n  \"name\" : \"username\",\n  \"in\" : \"path\",\n  \"description\" : \"The name that needs to be fetched. Use user1 for testing. \",\n  \"required\" : true,\n  \"type\" : \"string\"\n}",
                  "isString": true,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "queryParams": [],
              "headerParams": [],
              "formParams": [],
              "tags": [
                "User"
              ],
              "responses": [
                {
                  "headers": [],
                  "code": "200",
                  "message": "successful operation",
                  "hasMore": true,
                  "dataType": "ModelUser",
                  "baseType": "ModelUser",
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": true,
                  "simpleType": true,
                  "primitiveType": false,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "schema": {
                    "$ref": "#/definitions/User"
                  },
                  "jsonSchema": "{\n  \"description\" : \"successful operation\",\n  \"schema\" : {\n    \"$ref\" : \"#/definitions/User\"\n  }\n}",
                  "vendorExtensions": {
                  }
                },
                {
                  "headers": [],
                  "code": "400",
                  "message": "Invalid username supplied",
                  "hasMore": true,
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": false,
                  "simpleType": true,
                  "primitiveType": true,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "jsonSchema": "{\n  \"description\" : \"Invalid username supplied\"\n}",
                  "vendorExtensions": {
                  }
                },
                {
                  "headers": [],
                  "code": "404",
                  "message": "User not found",
                  "hasMore": false,
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": false,
                  "simpleType": true,
                  "primitiveType": true,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "jsonSchema": "{\n  \"description\" : \"User not found\"\n}",
                  "vendorExtensions": {
                  }
                }
              ],
              "imports": [
                "MainApiException",
                "ModelUser"
              ],
              "examples": [
                {
                  "contentType": "application/xml",
                  "example": "<User>\n  <id>123456789</id>\n  <username>aeiou</username>\n  <firstName>aeiou</firstName>\n  <lastName>aeiou</lastName>\n  <email>aeiou</email>\n  <password>aeiou</password>\n  <phone>aeiou</phone>\n  <userStatus>123</userStatus>\n</User>"
                },
                {
                  "contentType": "application/json",
                  "example": "{\n  \"firstName\" : \"aeiou\",\n  \"lastName\" : \"aeiou\",\n  \"password\" : \"aeiou\",\n  \"userStatus\" : 123,\n  \"phone\" : \"aeiou\",\n  \"id\" : 123456789,\n  \"email\" : \"aeiou\",\n  \"username\" : \"aeiou\"\n}"
                }
              ],
              "vendorExtensions": {
                "x-contentType": "application/json",
                "x-accepts": "application/json",
                "x-serviceId": "getUserByName",
                "x-serviceIduC": "GETUSERBYNAME",
                "x-serviceId-varName": "GETUSERBYNAME_SERVICE_ID",
                "x-serviceId-SQL": "SELECT * FROM TABLE_NAME WHERE username = ?",
                "x-serviceId-Query-Method": "queryWithParams"
              },
              "nickname": "getUserByName",
              "operationIdLowerCase": "getuserbyname",
              "hasBodyParam": false,
              "hasQueryParams": false,
              "hasHeaderParams": false,
              "hasFormParams": false,
              "hasExamples": true,
              "hasPathParams": true,
              "restfulShow": false,
              "restfulIndex": false,
              "restfulCreate": false,
              "restfulUpdate": false,
              "restfulDestroy": false,
              "restful": false
            },
            {
              "responseHeaders": [
                {
                  "baseName": "X-Rate-Limit",
                  "getter": "getXRateLimit",
                  "setter": "setXRateLimit",
                  "description": "calls per hour allowed by the user",
                  "datatype": "Integer",
                  "datatypeWithEnum": "Integer",
                  "dataFormat": "int32",
                  "name": "xRateLimit",
                  "defaultValue": "null",
                  "defaultValueWithParam": " = data.X-Rate-Limit;",
                  "baseType": "Integer",
                  "unescapedDescription": "calls per hour allowed by the user",
                  "example": "null",
                  "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int32\",\n  \"description\" : \"calls per hour allowed by the user\"\n}",
                  "exclusiveMinimum": false,
                  "exclusiveMaximum": false,
                  "hasMore": false,
                  "required": false,
                  "secondaryParam": false,
                  "hasMoreNonReadOnly": false,
                  "isPrimitiveType": true,
                  "isContainer": false,
                  "isNotContainer": true,
                  "isString": false,
                  "isInteger": true,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isFile": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isEnum": false,
                  "isReadOnly": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "isInherited": false,
                  "nameInCamelCase": "XRateLimit"
                },
                {
                  "baseName": "X-Expires-After",
                  "complexType": "OffsetDateTime",
                  "getter": "getXExpiresAfter",
                  "setter": "setXExpiresAfter",
                  "description": "date in UTC when token expires",
                  "datatype": "OffsetDateTime",
                  "datatypeWithEnum": "OffsetDateTime",
                  "dataFormat": "date-time",
                  "name": "xExpiresAfter",
                  "defaultValue": "null",
                  "defaultValueWithParam": " = data.X-Expires-After;",
                  "baseType": "OffsetDateTime",
                  "unescapedDescription": "date in UTC when token expires",
                  "example": "null",
                  "jsonSchema": "{\n  \"type\" : \"string\",\n  \"format\" : \"date-time\",\n  \"description\" : \"date in UTC when token expires\"\n}",
                  "exclusiveMinimum": false,
                  "exclusiveMaximum": false,
                  "hasMore": false,
                  "required": false,
                  "secondaryParam": false,
                  "hasMoreNonReadOnly": false,
                  "isPrimitiveType": false,
                  "isContainer": false,
                  "isNotContainer": true,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isFile": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": true,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isEnum": false,
                  "isReadOnly": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "isInherited": false,
                  "nameInCamelCase": "XExpiresAfter"
                }
              ],
              "hasAuthMethods": false,
              "hasConsumes": false,
              "hasProduces": true,
              "hasParams": true,
              "hasOptionalParams": false,
              "returnTypeIsPrimitive": true,
              "returnSimpleType": true,
              "subresourceOperation": false,
              "isMapContainer": false,
              "isListContainer": false,
              "isMultipart": false,
              "hasMore": true,
              "isResponseBinary": false,
              "isResponseFile": false,
              "hasReference": false,
              "isRestfulIndex": false,
              "isRestfulShow": false,
              "isRestfulCreate": false,
              "isRestfulUpdate": false,
              "isRestfulDestroy": false,
              "isRestful": false,
              "path": "/user/login",
              "operationId": "loginUser",
              "returnType": "String",
              "httpMethod": "get",
              "returnBaseType": "String",
              "summary": "Logs user into the system",
              "unescapedNotes": "",
              "notes": "",
              "baseName": "User",
              "defaultResponse": "null",
              "produces": [
                {
                  "hasMore": "true",
                  "mediaType": "application/xml"
                },
                {
                  "hasMore": null,
                  "mediaType": "application/json"
                }
              ],
              "allParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": true,
                  "isPathParam": false,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": true,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": true,
                  "baseName": "username",
                  "paramName": "username",
                  "dataType": "String",
                  "description": "The user name for login",
                  "unescapedDescription": "The user name for login",
                  "example": "\"username_example\"",
                  "jsonSchema": "{\n  \"name\" : \"username\",\n  \"in\" : \"query\",\n  \"description\" : \"The user name for login\",\n  \"required\" : true,\n  \"type\" : \"string\"\n}",
                  "isString": true,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                },
                {
                  "isFormParam": false,
                  "isQueryParam": true,
                  "isPathParam": false,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": true,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": true,
                  "baseName": "password",
                  "paramName": "password",
                  "dataType": "String",
                  "description": "The password for login in clear text",
                  "unescapedDescription": "The password for login in clear text",
                  "example": "\"password_example\"",
                  "jsonSchema": "{\n  \"name\" : \"password\",\n  \"in\" : \"query\",\n  \"description\" : \"The password for login in clear text\",\n  \"required\" : true,\n  \"type\" : \"string\"\n}",
                  "isString": true,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "bodyParams": [],
              "pathParams": [],
              "queryParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": true,
                  "isPathParam": false,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": true,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": false,
                  "baseName": "username",
                  "paramName": "username",
                  "dataType": "String",
                  "description": "The user name for login",
                  "unescapedDescription": "The user name for login",
                  "example": "\"username_example\"",
                  "jsonSchema": "{\n  \"name\" : \"username\",\n  \"in\" : \"query\",\n  \"description\" : \"The user name for login\",\n  \"required\" : true,\n  \"type\" : \"string\"\n}",
                  "isString": true,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                },
                {
                  "isFormParam": false,
                  "isQueryParam": true,
                  "isPathParam": false,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": true,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": false,
                  "baseName": "password",
                  "paramName": "password",
                  "dataType": "String",
                  "description": "The password for login in clear text",
                  "unescapedDescription": "The password for login in clear text",
                  "example": "\"password_example\"",
                  "jsonSchema": "{\n  \"name\" : \"password\",\n  \"in\" : \"query\",\n  \"description\" : \"The password for login in clear text\",\n  \"required\" : true,\n  \"type\" : \"string\"\n}",
                  "isString": true,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "headerParams": [],
              "formParams": [],
              "tags": [
                "User"
              ],
              "responses": [
                {
                  "headers": [
                    {
                      "baseName": "X-Rate-Limit",
                      "getter": "getXRateLimit",
                      "setter": "setXRateLimit",
                      "description": "calls per hour allowed by the user",
                      "datatype": "Integer",
                      "datatypeWithEnum": "Integer",
                      "dataFormat": "int32",
                      "name": "xRateLimit",
                      "defaultValue": "null",
                      "defaultValueWithParam": " = data.X-Rate-Limit;",
                      "baseType": "Integer",
                      "unescapedDescription": "calls per hour allowed by the user",
                      "example": "null",
                      "jsonSchema": "{\n  \"type\" : \"integer\",\n  \"format\" : \"int32\",\n  \"description\" : \"calls per hour allowed by the user\"\n}",
                      "exclusiveMinimum": false,
                      "exclusiveMaximum": false,
                      "hasMore": false,
                      "required": false,
                      "secondaryParam": false,
                      "hasMoreNonReadOnly": false,
                      "isPrimitiveType": true,
                      "isContainer": false,
                      "isNotContainer": true,
                      "isString": false,
                      "isInteger": true,
                      "isLong": false,
                      "isFloat": false,
                      "isDouble": false,
                      "isByteArray": false,
                      "isBinary": false,
                      "isFile": false,
                      "isBoolean": false,
                      "isDate": false,
                      "isDateTime": false,
                      "isListContainer": false,
                      "isMapContainer": false,
                      "isEnum": false,
                      "isReadOnly": false,
                      "vendorExtensions": {},
                      "hasValidation": false,
                      "isInherited": false,
                      "nameInCamelCase": "XRateLimit"
                    },
                    {
                      "baseName": "X-Expires-After",
                      "complexType": "OffsetDateTime",
                      "getter": "getXExpiresAfter",
                      "setter": "setXExpiresAfter",
                      "description": "date in UTC when token expires",
                      "datatype": "OffsetDateTime",
                      "datatypeWithEnum": "OffsetDateTime",
                      "dataFormat": "date-time",
                      "name": "xExpiresAfter",
                      "defaultValue": "null",
                      "defaultValueWithParam": " = data.X-Expires-After;",
                      "baseType": "OffsetDateTime",
                      "unescapedDescription": "date in UTC when token expires",
                      "example": "null",
                      "jsonSchema": "{\n  \"type\" : \"string\",\n  \"format\" : \"date-time\",\n  \"description\" : \"date in UTC when token expires\"\n}",
                      "exclusiveMinimum": false,
                      "exclusiveMaximum": false,
                      "hasMore": false,
                      "required": false,
                      "secondaryParam": false,
                      "hasMoreNonReadOnly": false,
                      "isPrimitiveType": false,
                      "isContainer": false,
                      "isNotContainer": true,
                      "isString": false,
                      "isInteger": false,
                      "isLong": false,
                      "isFloat": false,
                      "isDouble": false,
                      "isByteArray": false,
                      "isBinary": false,
                      "isFile": false,
                      "isBoolean": false,
                      "isDate": false,
                      "isDateTime": true,
                      "isListContainer": false,
                      "isMapContainer": false,
                      "isEnum": false,
                      "isReadOnly": false,
                      "vendorExtensions": {},
                      "hasValidation": false,
                      "isInherited": false,
                      "nameInCamelCase": "XExpiresAfter"
                    }
                  ],
                  "code": "200",
                  "message": "successful operation",
                  "hasMore": true,
                  "dataType": "String",
                  "baseType": "String",
                  "hasHeaders": true,
                  "isString": true,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": true,
                  "simpleType": true,
                  "primitiveType": true,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "schema": {
                    "type": "string"
                  },
                  "jsonSchema": "{\n  \"description\" : \"successful operation\",\n  \"schema\" : {\n    \"type\" : \"string\"\n  },\n  \"headers\" : {\n    \"X-Rate-Limit\" : {\n      \"type\" : \"integer\",\n      \"format\" : \"int32\",\n      \"description\" : \"calls per hour allowed by the user\"\n    },\n    \"X-Expires-After\" : {\n      \"type\" : \"string\",\n      \"format\" : \"date-time\",\n      \"description\" : \"date in UTC when token expires\"\n    }\n  }\n}",
                  "vendorExtensions": {
                  }
                },
                {
                  "headers": [],
                  "code": "400",
                  "message": "Invalid username/password supplied",
                  "hasMore": false,
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": false,
                  "simpleType": true,
                  "primitiveType": true,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "jsonSchema": "{\n  \"description\" : \"Invalid username/password supplied\"\n}",
                  "vendorExtensions": {
                  }
                }
              ],
              "imports": [
                "MainApiException"
              ],
              "examples": [
                {
                  "contentType": "application/xml",
                  "example": "aeiou"
                },
                {
                  "contentType": "application/json",
                  "example": "\"aeiou\""
                }
              ],
              "vendorExtensions": {
                "x-contentType": "application/json",
                "x-accepts": "application/json",
                "x-serviceId": "loginUser",
                "x-serviceIduC": "LOGINUSER",
                "x-serviceId-varName": "LOGINUSER_SERVICE_ID",
                "x-serviceId-SQL": "SELECT * FROM TABLE_NAME WHERE username = ? AND password = ?",
                "x-serviceId-Query-Method": "queryWithParams"
              },
              "nickname": "loginUser",
              "operationIdLowerCase": "loginuser",
              "hasBodyParam": false,
              "hasQueryParams": true,
              "hasHeaderParams": false,
              "hasFormParams": false,
              "hasExamples": true,
              "hasPathParams": false,
              "restfulShow": false,
              "restfulIndex": false,
              "restfulCreate": false,
              "restfulUpdate": false,
              "restfulDestroy": false,
              "restful": false
            },
            {
              "responseHeaders": [],
              "hasAuthMethods": false,
              "hasConsumes": false,
              "hasProduces": true,
              "hasParams": false,
              "hasOptionalParams": false,
              "returnTypeIsPrimitive": false,
              "returnSimpleType": false,
              "subresourceOperation": false,
              "isMapContainer": false,
              "isListContainer": false,
              "isMultipart": false,
              "hasMore": true,
              "isResponseBinary": false,
              "isResponseFile": false,
              "hasReference": false,
              "isRestfulIndex": false,
              "isRestfulShow": false,
              "isRestfulCreate": false,
              "isRestfulUpdate": false,
              "isRestfulDestroy": false,
              "isRestful": false,
              "path": "/user/logout",
              "operationId": "logoutUser",
              "httpMethod": "get",
              "summary": "Logs out current logged in user session",
              "unescapedNotes": "",
              "notes": "",
              "baseName": "User",
              "produces": [
                {
                  "hasMore": "true",
                  "mediaType": "application/xml"
                },
                {
                  "hasMore": null,
                  "mediaType": "application/json"
                }
              ],
              "allParams": [],
              "bodyParams": [],
              "pathParams": [],
              "queryParams": [],
              "headerParams": [],
              "formParams": [],
              "tags": [
                "User"
              ],
              "responses": [
                {
                  "headers": [],
                  "code": "0",
                  "message": "successful operation",
                  "hasMore": false,
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": true,
                  "simpleType": true,
                  "primitiveType": true,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "jsonSchema": "{\n  \"description\" : \"successful operation\"\n}",
                  "vendorExtensions": {
                  }
                }
              ],
              "imports": [
                "MainApiException"
              ],
              "vendorExtensions": {
                "x-contentType": "application/json",
                "x-accepts": "application/json",
                "x-serviceId": "logoutUser",
                "x-serviceIduC": "LOGOUTUSER",
                "x-serviceId-varName": "LOGOUTUSER_SERVICE_ID",
                "x-serviceId-SQL": "SELECT * FROM TABLE_NAME",
                "x-serviceId-Query-Method": "queryWithParams"
              },
              "nickname": "logoutUser",
              "operationIdLowerCase": "logoutuser",
              "hasBodyParam": false,
              "hasQueryParams": false,
              "hasHeaderParams": false,
              "hasFormParams": false,
              "hasExamples": false,
              "hasPathParams": false,
              "restfulShow": false,
              "restfulIndex": false,
              "restfulCreate": false,
              "restfulUpdate": false,
              "restfulDestroy": false,
              "restful": false
            },
            {
              "responseHeaders": [],
              "hasAuthMethods": false,
              "hasConsumes": false,
              "hasProduces": true,
              "hasParams": true,
              "hasOptionalParams": false,
              "returnTypeIsPrimitive": false,
              "returnSimpleType": false,
              "subresourceOperation": false,
              "isMapContainer": false,
              "isListContainer": false,
              "isMultipart": false,
              "hasMore": true,
              "isResponseBinary": false,
              "isResponseFile": false,
              "hasReference": false,
              "isRestfulIndex": false,
              "isRestfulShow": false,
              "isRestfulCreate": false,
              "isRestfulUpdate": false,
              "isRestfulDestroy": false,
              "isRestful": false,
              "path": "/user/:username",
              "operationId": "updateUser",
              "httpMethod": "put",
              "summary": "Updated user",
              "unescapedNotes": "This can only be done by the logged in user.",
              "notes": "This can only be done by the logged in user.",
              "baseName": "User",
              "produces": [
                {
                  "hasMore": "true",
                  "mediaType": "application/xml"
                },
                {
                  "hasMore": null,
                  "mediaType": "application/json"
                }
              ],
              "bodyParam": {
                "isFormParam": false,
                "isQueryParam": false,
                "isPathParam": false,
                "isHeaderParam": false,
                "isCookieParam": false,
                "isBodyParam": true,
                "hasMore": false,
                "isContainer": false,
                "secondaryParam": true,
                "isCollectionFormatMulti": false,
                "isPrimitiveType": false,
                "baseName": "body",
                "paramName": "body",
                "dataType": "ModelUser",
                "description": "Updated user object",
                "unescapedDescription": "Updated user object",
                "baseType": "ModelUser",
                "example": "new ModelUser()",
                "jsonSchema": "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"Updated user object\",\n  \"required\" : true,\n  \"schema\" : {\n    \"$ref\" : \"#/definitions/User\"\n  }\n}",
                "isString": false,
                "isInteger": false,
                "isLong": false,
                "isFloat": false,
                "isDouble": false,
                "isByteArray": false,
                "isBinary": false,
                "isBoolean": false,
                "isDate": false,
                "isDateTime": false,
                "isListContainer": false,
                "isMapContainer": false,
                "isFile": false,
                "notFile": false,
                "isEnum": false,
                "vendorExtensions": {},
                "hasValidation": false,
                "required": true,
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "uniqueItems": false
              },
              "allParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": true,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": true,
                  "baseName": "username",
                  "paramName": "username",
                  "dataType": "String",
                  "description": "name that need to be updated",
                  "unescapedDescription": "name that need to be updated",
                  "example": "\"username_example\"",
                  "jsonSchema": "{\n  \"name\" : \"username\",\n  \"in\" : \"path\",\n  \"description\" : \"name that need to be updated\",\n  \"required\" : true,\n  \"type\" : \"string\"\n}",
                  "isString": true,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                },
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": true,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": true,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": false,
                  "baseName": "body",
                  "paramName": "body",
                  "dataType": "ModelUser",
                  "description": "Updated user object",
                  "unescapedDescription": "Updated user object",
                  "baseType": "ModelUser",
                  "example": "new ModelUser()",
                  "jsonSchema": "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"Updated user object\",\n  \"required\" : true,\n  \"schema\" : {\n    \"$ref\" : \"#/definitions/User\"\n  }\n}",
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "bodyParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": false,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": true,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": false,
                  "baseName": "body",
                  "paramName": "body",
                  "dataType": "ModelUser",
                  "description": "Updated user object",
                  "unescapedDescription": "Updated user object",
                  "baseType": "ModelUser",
                  "example": "new ModelUser()",
                  "jsonSchema": "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"Updated user object\",\n  \"required\" : true,\n  \"schema\" : {\n    \"$ref\" : \"#/definitions/User\"\n  }\n}",
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "pathParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": false,
                  "baseName": "username",
                  "paramName": "username",
                  "dataType": "String",
                  "description": "name that need to be updated",
                  "unescapedDescription": "name that need to be updated",
                  "example": "\"username_example\"",
                  "jsonSchema": "{\n  \"name\" : \"username\",\n  \"in\" : \"path\",\n  \"description\" : \"name that need to be updated\",\n  \"required\" : true,\n  \"type\" : \"string\"\n}",
                  "isString": true,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "queryParams": [],
              "headerParams": [],
              "formParams": [],
              "tags": [
                "User"
              ],
              "responses": [
                {
                  "headers": [],
                  "code": "400",
                  "message": "Invalid user supplied",
                  "hasMore": true,
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": false,
                  "simpleType": true,
                  "primitiveType": true,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "jsonSchema": "{\n  \"description\" : \"Invalid user supplied\"\n}",
                  "vendorExtensions": {
                  }
                },
                {
                  "headers": [],
                  "code": "404",
                  "message": "User not found",
                  "hasMore": false,
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": false,
                  "simpleType": true,
                  "primitiveType": true,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "jsonSchema": "{\n  \"description\" : \"User not found\"\n}",
                  "vendorExtensions": {
                  }
                }
              ],
              "imports": [
                "MainApiException",
                "ModelUser"
              ],
              "vendorExtensions": {
                "x-contentType": "application/json",
                "x-accepts": "application/json",
                "x-serviceId": "updateUser",
                "x-serviceIduC": "UPDATEUSER",
                "x-serviceId-varName": "UPDATEUSER_SERVICE_ID",
                "x-serviceId-SQL": "UPDATE TABLE_NAME SET  WHERE username = ?",
                "x-serviceId-Query-Method": "updateWithParams"
              },
              "nickname": "updateUser",
              "operationIdLowerCase": "updateuser",
              "hasBodyParam": true,
              "hasQueryParams": false,
              "hasHeaderParams": false,
              "hasFormParams": false,
              "hasExamples": false,
              "hasPathParams": true,
              "restfulShow": false,
              "restfulIndex": false,
              "restfulCreate": false,
              "restfulUpdate": false,
              "restfulDestroy": false,
              "restful": false
            },
            {
              "responseHeaders": [],
              "hasAuthMethods": false,
              "hasConsumes": false,
              "hasProduces": false,
              "hasParams": true,
              "hasOptionalParams": false,
              "returnTypeIsPrimitive": false,
              "returnSimpleType": true,
              "subresourceOperation": false,
              "isMapContainer": false,
              "isListContainer": false,
              "isMultipart": false,
              "hasMore": false,
              "isResponseBinary": false,
              "isResponseFile": false,
              "hasReference": false,
              "isRestfulIndex": false,
              "isRestfulShow": false,
              "isRestfulCreate": false,
              "isRestfulUpdate": false,
              "isRestfulDestroy": false,
              "isRestful": false,
              "path": "/uuid/:uuidParam",
              "operationId": "uuid",
              "returnType": "InlineResponseDefault",
              "httpMethod": "get",
              "returnBaseType": "InlineResponseDefault",
              "summary": "test uuid",
              "baseName": "User",
              "defaultResponse": "null",
              "allParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": true,
                  "baseName": "uuidParam",
                  "paramName": "uuidParam",
                  "dataType": "UUID",
                  "dataFormat": "uuid",
                  "example": "new UUID()",
                  "jsonSchema": "{\n  \"name\" : \"uuidParam\",\n  \"in\" : \"path\",\n  \"required\" : true,\n  \"type\" : \"string\",\n  \"format\" : \"uuid\"\n}",
                  "isString": true,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {
                    "X-isUUID": true
                  },
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "bodyParams": [],
              "pathParams": [
                {
                  "isFormParam": false,
                  "isQueryParam": false,
                  "isPathParam": true,
                  "isHeaderParam": false,
                  "isCookieParam": false,
                  "isBodyParam": false,
                  "hasMore": false,
                  "isContainer": false,
                  "secondaryParam": false,
                  "isCollectionFormatMulti": false,
                  "isPrimitiveType": false,
                  "baseName": "uuidParam",
                  "paramName": "uuidParam",
                  "dataType": "UUID",
                  "dataFormat": "uuid",
                  "example": "new UUID()",
                  "jsonSchema": "{\n  \"name\" : \"uuidParam\",\n  \"in\" : \"path\",\n  \"required\" : true,\n  \"type\" : \"string\",\n  \"format\" : \"uuid\"\n}",
                  "isString": true,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBinary": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isListContainer": false,
                  "isMapContainer": false,
                  "isFile": false,
                  "notFile": false,
                  "isEnum": false,
                  "vendorExtensions": {},
                  "hasValidation": false,
                  "required": true,
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "uniqueItems": false
                }
              ],
              "queryParams": [],
              "headerParams": [],
              "formParams": [],
              "tags": [
                "User"
              ],
              "responses": [
                {
                  "headers": [],
                  "code": "0",
                  "message": "OK",
                  "hasMore": false,
                  "dataType": "InlineResponseDefault",
                  "baseType": "InlineResponseDefault",
                  "hasHeaders": false,
                  "isString": false,
                  "isInteger": false,
                  "isLong": false,
                  "isFloat": false,
                  "isDouble": false,
                  "isByteArray": false,
                  "isBoolean": false,
                  "isDate": false,
                  "isDateTime": false,
                  "isDefault": true,
                  "simpleType": true,
                  "primitiveType": false,
                  "isMapContainer": false,
                  "isListContainer": false,
                  "isBinary": false,
                  "isFile": false,
                  "schema": {
                    "$ref": "#/definitions/inline_response_default"
                  },
                  "jsonSchema": "{\n  \"description\" : \"OK\",\n  \"schema\" : {\n    \"$ref\" : \"#/definitions/inline_response_default\"\n  }\n}",
                  "vendorExtensions": {
                  }
                }
              ],
              "imports": [
                "InlineResponseDefault",
                "UUID",
                "MainApiException"
              ],
              "examples": [
                {
                  "contentType": "application/json",
                  "example": "{\n  \"uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\"\n}"
                }
              ],
              "vendorExtensions": {
                "x-contentType": "application/json",
                "x-accepts": "application/json",
                "x-serviceId": "uuid",
                "x-serviceIduC": "UUID",
                "x-serviceId-varName": "UUID_SERVICE_ID",
                "x-serviceId-SQL": "SELECT * FROM TABLE_NAME WHERE uuidParam = ?",
                "x-serviceId-Query-Method": "queryWithParams"
              },
              "nickname": "uuid",
              "operationIdLowerCase": "uuid",
              "hasBodyParam": false,
              "hasQueryParams": false,
              "hasHeaderParams": false,
              "hasFormParams": false,
              "hasExamples": true,
              "hasPathParams": true,
              "restfulShow": false,
              "restfulIndex": false,
              "restfulCreate": false,
              "restfulUpdate": false,
              "restfulDestroy": false,
              "restful": false
            }
          ],
          "pathPrefix": "user"
        },
        "java8": "true",
        "artifactId": "petstore-vertx-server",
        "artifactDescription": "Swagger Java",
        "developerName": "Swagger",
        "scmConnection": "scm:git:git@github.com:swagger-api/swagger-codegen.git",
        "unescapedAppDescription": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
        "artifactVersion": "1.0.0-SNAPSHOT",
        "appName": "Swagger Petstore",
        "termsOfService": "http://swagger.io/terms/",
        "scmUrl": "https://github.com/swagger-api/swagger-codegen",
        "basePath": "http://petstore.swagger.io/v2",
        "classname": "UserApi",
        "gitRepoId": "GIT_REPO_ID",
        "generatedDate": "2017-08-31T22:50:32.533+03:00",
        "infoEmail": "apiteam@swagger.io",
        "gitUserId": "GIT_USER_ID"
      }
    ]
  },
  "fullSwagger": "{\n  \"swagger\" : \"2.0\",\n  \"info\" : {\n    \"description\" : \"This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.\",\n    \"version\" : \"1.0.0\",\n    \"title\" : \"Swagger Petstore\",\n    \"termsOfService\" : \"http://swagger.io/terms/\",\n    \"contact\" : {\n      \"email\" : \"apiteam@swagger.io\"\n    },\n    \"license\" : {\n      \"name\" : \"Apache 2.0\",\n      \"url\" : \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n    }\n  },\n  \"host\" : \"petstore.swagger.io\",\n  \"basePath\" : \"/v2\",\n  \"tags\" : [ {\n    \"name\" : \"pet\",\n    \"description\" : \"Everything about your Pets\",\n    \"externalDocs\" : {\n      \"description\" : \"Find out more\",\n      \"url\" : \"http://swagger.io\"\n    }\n  }, {\n    \"name\" : \"store\",\n    \"description\" : \"Access to Petstore orders\"\n  }, {\n    \"name\" : \"user\",\n    \"description\" : \"Operations about user\",\n    \"externalDocs\" : {\n      \"description\" : \"Find out more about our store\",\n      \"url\" : \"http://swagger.io\"\n    }\n  } ],\n  \"schemes\" : [ \"http\" ],\n  \"paths\" : {\n    \"/uuid/{uuidParam}\" : {\n      \"get\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"test uuid\",\n        \"operationId\" : \"uuid\",\n        \"parameters\" : [ {\n          \"name\" : \"uuidParam\",\n          \"in\" : \"path\",\n          \"required\" : true,\n          \"type\" : \"string\",\n          \"format\" : \"uuid\"\n        } ],\n        \"responses\" : {\n          \"default\" : {\n            \"description\" : \"OK\",\n            \"schema\" : {\n              \"type\" : \"object\",\n              \"properties\" : {\n                \"uuid\" : {\n                  \"type\" : \"string\",\n                  \"format\" : \"uuid\"\n                }\n              }\n            }\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/pet\" : {\n      \"post\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Add a new pet to the store\",\n        \"description\" : \"\",\n        \"operationId\" : \"addPet\",\n        \"consumes\" : [ \"application/json\", \"application/xml\" ],\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"Pet object that needs to be added to the store\",\n          \"required\" : true,\n          \"schema\" : {\n            \"$ref\" : \"#/definitions/Pet\"\n          }\n        } ],\n        \"responses\" : {\n          \"405\" : {\n            \"description\" : \"Invalid input\"\n          }\n        },\n        \"security\" : [ {\n          \"petstore_auth\" : [ \"write:pets\", \"read:pets\" ]\n        } ],\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      },\n      \"put\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Update an existing pet\",\n        \"description\" : \"\",\n        \"operationId\" : \"updatePet\",\n        \"consumes\" : [ \"application/json\", \"application/xml\" ],\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"Pet object that needs to be added to the store\",\n          \"required\" : true,\n          \"schema\" : {\n            \"$ref\" : \"#/definitions/Pet\"\n          }\n        } ],\n        \"responses\" : {\n          \"400\" : {\n            \"description\" : \"Invalid ID supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"Pet not found\"\n          },\n          \"405\" : {\n            \"description\" : \"Validation exception\"\n          }\n        },\n        \"security\" : [ {\n          \"petstore_auth\" : [ \"write:pets\", \"read:pets\" ]\n        } ],\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/pet/findByStatus\" : {\n      \"get\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Finds Pets by status\",\n        \"description\" : \"Multiple status values can be provided with comma separated strings\",\n        \"operationId\" : \"findPetsByStatus\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"status\",\n          \"in\" : \"query\",\n          \"description\" : \"Status values that need to be considered for filter\",\n          \"required\" : true,\n          \"type\" : \"array\",\n          \"items\" : {\n            \"type\" : \"string\",\n            \"default\" : \"available\",\n            \"enum\" : [ \"available\", \"pending\", \"sold\" ]\n          },\n          \"collectionFormat\" : \"multi\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"type\" : \"array\",\n              \"items\" : {\n                \"$ref\" : \"#/definitions/Pet\"\n              }\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid status value\"\n          }\n        },\n        \"security\" : [ {\n          \"petstore_auth\" : [ \"write:pets\", \"read:pets\" ]\n        } ],\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/pet/findByTags\" : {\n      \"get\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Finds Pets by tags\",\n        \"description\" : \"Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.\",\n        \"operationId\" : \"findPetsByTags\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"tags\",\n          \"in\" : \"query\",\n          \"description\" : \"Tags to filter by\",\n          \"required\" : true,\n          \"type\" : \"array\",\n          \"items\" : {\n            \"type\" : \"string\"\n          },\n          \"collectionFormat\" : \"multi\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"type\" : \"array\",\n              \"items\" : {\n                \"$ref\" : \"#/definitions/Pet\"\n              }\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid tag value\"\n          }\n        },\n        \"security\" : [ {\n          \"petstore_auth\" : [ \"write:pets\", \"read:pets\" ]\n        } ],\n        \"deprecated\" : true,\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/pet/{petId}\" : {\n      \"get\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Find pet by ID\",\n        \"description\" : \"Returns a single pet\",\n        \"operationId\" : \"getPetById\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"petId\",\n          \"in\" : \"path\",\n          \"description\" : \"ID of pet to return\",\n          \"required\" : true,\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"$ref\" : \"#/definitions/Pet\"\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid ID supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"Pet not found\"\n          }\n        },\n        \"security\" : [ {\n          \"api_key\" : [ ]\n        } ],\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      },\n      \"post\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Updates a pet in the store with form data\",\n        \"description\" : \"\",\n        \"operationId\" : \"updatePetWithForm\",\n        \"consumes\" : [ \"application/x-www-form-urlencoded\" ],\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"petId\",\n          \"in\" : \"path\",\n          \"description\" : \"ID of pet that needs to be updated\",\n          \"required\" : true,\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        }, {\n          \"name\" : \"name\",\n          \"in\" : \"formData\",\n          \"description\" : \"Updated name of the pet\",\n          \"required\" : false,\n          \"type\" : \"string\"\n        }, {\n          \"name\" : \"status\",\n          \"in\" : \"formData\",\n          \"description\" : \"Updated status of the pet\",\n          \"required\" : false,\n          \"type\" : \"string\"\n        } ],\n        \"responses\" : {\n          \"405\" : {\n            \"description\" : \"Invalid input\"\n          }\n        },\n        \"security\" : [ {\n          \"petstore_auth\" : [ \"write:pets\", \"read:pets\" ]\n        } ],\n        \"x-contentType\" : \"application/x-www-form-urlencoded\",\n        \"x-accepts\" : \"application/json\"\n      },\n      \"delete\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"Deletes a pet\",\n        \"description\" : \"\",\n        \"operationId\" : \"deletePet\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"api_key\",\n          \"in\" : \"header\",\n          \"required\" : false,\n          \"type\" : \"string\"\n        }, {\n          \"name\" : \"petId\",\n          \"in\" : \"path\",\n          \"description\" : \"Pet id to delete\",\n          \"required\" : true,\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        } ],\n        \"responses\" : {\n          \"400\" : {\n            \"description\" : \"Invalid ID supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"Pet not found\"\n          }\n        },\n        \"security\" : [ {\n          \"petstore_auth\" : [ \"write:pets\", \"read:pets\" ]\n        } ],\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/pet/{petId}/uploadImage\" : {\n      \"post\" : {\n        \"tags\" : [ \"pet\" ],\n        \"summary\" : \"uploads an image\",\n        \"description\" : \"\",\n        \"operationId\" : \"uploadFile\",\n        \"consumes\" : [ \"multipart/form-data\" ],\n        \"produces\" : [ \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"petId\",\n          \"in\" : \"path\",\n          \"description\" : \"ID of pet to update\",\n          \"required\" : true,\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        }, {\n          \"name\" : \"additionalMetadata\",\n          \"in\" : \"formData\",\n          \"description\" : \"Additional data to pass to server\",\n          \"required\" : false,\n          \"type\" : \"string\"\n        }, {\n          \"name\" : \"file\",\n          \"in\" : \"formData\",\n          \"description\" : \"file to upload\",\n          \"required\" : false,\n          \"type\" : \"file\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"$ref\" : \"#/definitions/ApiResponse\"\n            }\n          }\n        },\n        \"security\" : [ {\n          \"petstore_auth\" : [ \"write:pets\", \"read:pets\" ]\n        } ],\n        \"x-contentType\" : \"multipart/form-data\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/store/inventory\" : {\n      \"get\" : {\n        \"tags\" : [ \"store\" ],\n        \"summary\" : \"Returns pet inventories by status\",\n        \"description\" : \"Returns a map of status codes to quantities\",\n        \"operationId\" : \"getInventory\",\n        \"produces\" : [ \"application/json\" ],\n        \"parameters\" : [ ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"type\" : \"object\",\n              \"additionalProperties\" : {\n                \"type\" : \"integer\",\n                \"format\" : \"int32\"\n              }\n            }\n          }\n        },\n        \"security\" : [ {\n          \"api_key\" : [ ]\n        } ],\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/store/order\" : {\n      \"post\" : {\n        \"tags\" : [ \"store\" ],\n        \"summary\" : \"Place an order for a pet\",\n        \"description\" : \"\",\n        \"operationId\" : \"placeOrder\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"order placed for purchasing the pet\",\n          \"required\" : true,\n          \"schema\" : {\n            \"$ref\" : \"#/definitions/Order\"\n          }\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"$ref\" : \"#/definitions/Order\"\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid Order\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/store/order/{orderId}\" : {\n      \"get\" : {\n        \"tags\" : [ \"store\" ],\n        \"summary\" : \"Find purchase order by ID\",\n        \"description\" : \"For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions\",\n        \"operationId\" : \"getOrderById\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"OrderId\",\n          \"in\" : \"path\",\n          \"description\" : \"ID of pet that needs to be fetched\",\n          \"required\" : true,\n          \"type\" : \"integer\",\n          \"maximum\" : 10.0,\n          \"minimum\" : 1.0,\n          \"format\" : \"int64\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"$ref\" : \"#/definitions/Order\"\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid ID supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"Order not found\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      },\n      \"delete\" : {\n        \"tags\" : [ \"store\" ],\n        \"summary\" : \"Delete purchase order by ID\",\n        \"description\" : \"For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors\",\n        \"operationId\" : \"deleteOrder\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"orderId\",\n          \"in\" : \"path\",\n          \"description\" : \"ID of the order that needs to be deleted\",\n          \"required\" : true,\n          \"type\" : \"integer\",\n          \"minimum\" : 1.0,\n          \"format\" : \"int64\"\n        } ],\n        \"responses\" : {\n          \"400\" : {\n            \"description\" : \"Invalid ID supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"Order not found\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/user\" : {\n      \"post\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Create user\",\n        \"description\" : \"This can only be done by the logged in user.\",\n        \"operationId\" : \"createUser\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"Created user object\",\n          \"required\" : true,\n          \"schema\" : {\n            \"$ref\" : \"#/definitions/User\"\n          }\n        } ],\n        \"responses\" : {\n          \"default\" : {\n            \"description\" : \"successful operation\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/user/createWithArray\" : {\n      \"post\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Creates list of users with given input array\",\n        \"description\" : \"\",\n        \"operationId\" : \"createUsersWithArrayInput\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"List of user object\",\n          \"required\" : true,\n          \"schema\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/definitions/User\"\n            }\n          }\n        } ],\n        \"responses\" : {\n          \"default\" : {\n            \"description\" : \"successful operation\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/user/createWithList\" : {\n      \"post\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Creates list of users with given input array\",\n        \"description\" : \"\",\n        \"operationId\" : \"createUsersWithListInput\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"List of user object\",\n          \"required\" : true,\n          \"schema\" : {\n            \"type\" : \"array\",\n            \"items\" : {\n              \"$ref\" : \"#/definitions/User\"\n            }\n          }\n        } ],\n        \"responses\" : {\n          \"default\" : {\n            \"description\" : \"successful operation\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/user/login\" : {\n      \"get\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Logs user into the system\",\n        \"description\" : \"\",\n        \"operationId\" : \"loginUser\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"username\",\n          \"in\" : \"query\",\n          \"description\" : \"The user name for login\",\n          \"required\" : true,\n          \"type\" : \"string\"\n        }, {\n          \"name\" : \"password\",\n          \"in\" : \"query\",\n          \"description\" : \"The password for login in clear text\",\n          \"required\" : true,\n          \"type\" : \"string\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"type\" : \"string\"\n            },\n            \"headers\" : {\n              \"X-Rate-Limit\" : {\n                \"type\" : \"integer\",\n                \"format\" : \"int32\",\n                \"description\" : \"calls per hour allowed by the user\"\n              },\n              \"X-Expires-After\" : {\n                \"type\" : \"string\",\n                \"format\" : \"date-time\",\n                \"description\" : \"date in UTC when token expires\"\n              }\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid username/password supplied\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/user/logout\" : {\n      \"get\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Logs out current logged in user session\",\n        \"description\" : \"\",\n        \"operationId\" : \"logoutUser\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ ],\n        \"responses\" : {\n          \"default\" : {\n            \"description\" : \"successful operation\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    },\n    \"/user/{username}\" : {\n      \"get\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Get user by user name\",\n        \"description\" : \"\",\n        \"operationId\" : \"getUserByName\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"username\",\n          \"in\" : \"path\",\n          \"description\" : \"The name that needs to be fetched. Use user1 for testing. \",\n          \"required\" : true,\n          \"type\" : \"string\"\n        } ],\n        \"responses\" : {\n          \"200\" : {\n            \"description\" : \"successful operation\",\n            \"schema\" : {\n              \"$ref\" : \"#/definitions/User\"\n            }\n          },\n          \"400\" : {\n            \"description\" : \"Invalid username supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"User not found\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      },\n      \"put\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Updated user\",\n        \"description\" : \"This can only be done by the logged in user.\",\n        \"operationId\" : \"updateUser\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"username\",\n          \"in\" : \"path\",\n          \"description\" : \"name that need to be updated\",\n          \"required\" : true,\n          \"type\" : \"string\"\n        }, {\n          \"in\" : \"body\",\n          \"name\" : \"body\",\n          \"description\" : \"Updated user object\",\n          \"required\" : true,\n          \"schema\" : {\n            \"$ref\" : \"#/definitions/User\"\n          }\n        } ],\n        \"responses\" : {\n          \"400\" : {\n            \"description\" : \"Invalid user supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"User not found\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      },\n      \"delete\" : {\n        \"tags\" : [ \"user\" ],\n        \"summary\" : \"Delete user\",\n        \"description\" : \"This can only be done by the logged in user.\",\n        \"operationId\" : \"deleteUser\",\n        \"produces\" : [ \"application/xml\", \"application/json\" ],\n        \"parameters\" : [ {\n          \"name\" : \"username\",\n          \"in\" : \"path\",\n          \"description\" : \"The name that needs to be deleted\",\n          \"required\" : true,\n          \"type\" : \"string\"\n        } ],\n        \"responses\" : {\n          \"400\" : {\n            \"description\" : \"Invalid username supplied\"\n          },\n          \"404\" : {\n            \"description\" : \"User not found\"\n          }\n        },\n        \"x-contentType\" : \"application/json\",\n        \"x-accepts\" : \"application/json\"\n      }\n    }\n  },\n  \"securityDefinitions\" : {\n    \"petstore_auth\" : {\n      \"type\" : \"oauth2\",\n      \"authorizationUrl\" : \"http://petstore.swagger.io/oauth/dialog\",\n      \"flow\" : \"implicit\",\n      \"scopes\" : {\n        \"write:pets\" : \"modify pets in your account\",\n        \"read:pets\" : \"read your pets\"\n      }\n    },\n    \"api_key\" : {\n      \"type\" : \"apiKey\",\n      \"name\" : \"api_key\",\n      \"in\" : \"header\"\n    }\n  },\n  \"definitions\" : {\n    \"Order\" : {\n      \"type\" : \"object\",\n      \"properties\" : {\n        \"id\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        },\n        \"petId\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        },\n        \"quantity\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int32\"\n        },\n        \"shipDate\" : {\n          \"type\" : \"string\",\n          \"format\" : \"date-time\"\n        },\n        \"status\" : {\n          \"type\" : \"string\",\n          \"description\" : \"Order Status\",\n          \"enum\" : [ \"placed\", \"approved\", \"delivered\" ]\n        },\n        \"complete\" : {\n          \"type\" : \"boolean\",\n          \"default\" : false\n        }\n      },\n      \"xml\" : {\n        \"name\" : \"Order\"\n      }\n    },\n    \"Category\" : {\n      \"type\" : \"object\",\n      \"properties\" : {\n        \"id\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        },\n        \"name\" : {\n          \"type\" : \"string\"\n        }\n      },\n      \"description\" : \"some description\",\n      \"xml\" : {\n        \"name\" : \"Category\"\n      }\n    },\n    \"User\" : {\n      \"type\" : \"object\",\n      \"properties\" : {\n        \"id\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        },\n        \"username\" : {\n          \"type\" : \"string\"\n        },\n        \"firstName\" : {\n          \"type\" : \"string\"\n        },\n        \"lastName\" : {\n          \"type\" : \"string\"\n        },\n        \"email\" : {\n          \"type\" : \"string\"\n        },\n        \"password\" : {\n          \"type\" : \"string\"\n        },\n        \"phone\" : {\n          \"type\" : \"string\"\n        },\n        \"userStatus\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int32\",\n          \"description\" : \"User Status\"\n        }\n      },\n      \"xml\" : {\n        \"name\" : \"User\"\n      }\n    },\n    \"Tag\" : {\n      \"type\" : \"object\",\n      \"properties\" : {\n        \"id\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        },\n        \"name\" : {\n          \"type\" : \"string\"\n        }\n      },\n      \"xml\" : {\n        \"name\" : \"Tag\"\n      }\n    },\n    \"Pet\" : {\n      \"type\" : \"object\",\n      \"required\" : [ \"name\", \"photoUrls\" ],\n      \"properties\" : {\n        \"id\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int64\"\n        },\n        \"category\" : {\n          \"$ref\" : \"#/definitions/Category\"\n        },\n        \"name\" : {\n          \"type\" : \"string\",\n          \"example\" : \"doggie\"\n        },\n        \"photoUrls\" : {\n          \"type\" : \"array\",\n          \"xml\" : {\n            \"name\" : \"photoUrl\",\n            \"wrapped\" : true\n          },\n          \"items\" : {\n            \"type\" : \"string\"\n          }\n        },\n        \"tags\" : {\n          \"type\" : \"array\",\n          \"xml\" : {\n            \"name\" : \"tag\",\n            \"wrapped\" : true\n          },\n          \"items\" : {\n            \"$ref\" : \"#/definitions/Tag\"\n          }\n        },\n        \"status\" : {\n          \"type\" : \"string\",\n          \"description\" : \"pet status in the store\",\n          \"enum\" : [ \"available\", \"pending\", \"sold\" ]\n        }\n      },\n      \"xml\" : {\n        \"name\" : \"Pet\"\n      }\n    },\n    \"ApiResponse\" : {\n      \"type\" : \"object\",\n      \"properties\" : {\n        \"code\" : {\n          \"type\" : \"integer\",\n          \"format\" : \"int32\"\n        },\n        \"type\" : {\n          \"type\" : \"string\"\n        },\n        \"message\" : {\n          \"type\" : \"string\"\n        }\n      }\n    }\n  },\n  \"externalDocs\" : {\n    \"description\" : \"Find out more about Swagger\",\n    \"url\" : \"http://swagger.io\"\n  }\n}",
  "modelDocPath": "docs/",
  "scmDeveloperConnection": "scm:git:git@github.com:swagger-api/swagger-codegen.git",
  "vertxSwaggerRouterVersion": "1.4.1-SNAPSHOT",
  "licenseUrl": "http://www.apache.org/licenses/LICENSE-2.0.html",
  "scheme": "http",
  "modelPackage": "io.swagger.server.api.model",
  "apiDocPath": "docs/",
  "licenseInfo": "Apache 2.0",
  "serverPort": "8080",
  "basePathWithoutHost": "/v2",
  "developerOrganizationUrl": "http://swagger.io",
  "java8": "true",
  "artifactId": "petstore-vertx-server",
  "artifactDescription": "Swagger Java",
  "developerName": "Swagger",
  "scmConnection": "scm:git:git@github.com:swagger-api/swagger-codegen.git",
  "unescapedAppDescription": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
  "artifactVersion": "1.0.0-SNAPSHOT",
  "appName": "Swagger Petstore",
  "termsOfService": "http://swagger.io/terms/",
  "scmUrl": "https://github.com/swagger-api/swagger-codegen",
  "apiPackage": "io.swagger.server.api.verticle",
  "basePath": "http://petstore.swagger.io/v2",
  "gitRepoId": "GIT_REPO_ID",
  "generatedDate": "2017-08-31T22:50:32.533+03:00",
  "infoEmail": "apiteam@swagger.io",
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "gitUserId": "GIT_USER_ID"
}